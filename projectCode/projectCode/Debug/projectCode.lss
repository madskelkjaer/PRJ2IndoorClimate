
projectCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  00000df4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020e3  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012b7  00000000  00000000  00003107  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a0  00000000  00000000  000043be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000982  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000959  00000000  00000000  00005892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000061eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ef       	ldi	r30, 0xF4	; 244
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 32       	cpi	r26, 0x26	; 38
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	43 d0       	rcall	.+134    	; 0x196 <main>
 110:	6f c6       	rjmp	.+3294   	; 0xdf0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z15float_to_stringPcf>:

// SCD30 adressen er 0x61. står i interface databladet
#define SLAVE_ADDRESS 0x61

void float_to_string(char* buffer, float value) 
{
 114:	8f 92       	push	r8
 116:	9f 92       	push	r9
 118:	af 92       	push	r10
 11a:	bf 92       	push	r11
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	c8 2f       	mov	r28, r24
 12a:	d9 2f       	mov	r29, r25
 12c:	4a 01       	movw	r8, r20
 12e:	5b 01       	movw	r10, r22
	int integerPart = (int)value;
 130:	cb 01       	movw	r24, r22
 132:	ba 01       	movw	r22, r20
 134:	60 d2       	rcall	.+1216   	; 0x5f6 <__fixsfsi>
 136:	6b 01       	movw	r12, r22
 138:	7c 01       	movw	r14, r24
	int decimalPart = (int)((value - integerPart) * 100);
 13a:	07 2e       	mov	r0, r23
 13c:	00 0c       	add	r0, r0
 13e:	88 0b       	sbc	r24, r24
 140:	99 0b       	sbc	r25, r25
 142:	8c d2       	rcall	.+1304   	; 0x65c <__floatsisf>
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	ef d1       	rcall	.+990    	; 0x52c <__subsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	48 ec       	ldi	r20, 0xC8	; 200
 154:	52 e4       	ldi	r21, 0x42	; 66
 156:	0e d3       	rcall	.+1564   	; 0x774 <__mulsf3>
 158:	4e d2       	rcall	.+1180   	; 0x5f6 <__fixsfsi>
	
	sprintf(buffer, "%d.%02d", integerPart, decimalPart);
 15a:	7f 93       	push	r23
 15c:	6f 93       	push	r22
 15e:	df 92       	push	r13
 160:	cf 92       	push	r12
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9f 93       	push	r25
 168:	8f 93       	push	r24
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	65 d3       	rcall	.+1738   	; 0x83a <sprintf>
};
 170:	8d b7       	in	r24, 0x3d	; 61
 172:	9e b7       	in	r25, 0x3e	; 62
 174:	08 96       	adiw	r24, 0x08	; 8
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	9e bf       	out	0x3e, r25	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	8d bf       	out	0x3d, r24	; 61
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	bf 90       	pop	r11
 18e:	af 90       	pop	r10
 190:	9f 90       	pop	r9
 192:	8f 90       	pop	r8
 194:	08 95       	ret

00000196 <main>:

int main(void) 
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	65 97       	sbiw	r28, 0x15	; 21
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	UART uart;
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	95 d1       	rcall	.+810    	; 0x4da <_ZN4UARTC1Ev>
	SDC30 sdc30(SLAVE_ADDRESS);
 1b0:	61 e6       	ldi	r22, 0x61	; 97
 1b2:	ce 01       	movw	r24, r28
 1b4:	02 96       	adiw	r24, 0x02	; 2
 1b6:	78 d0       	rcall	.+240    	; 0x2a8 <_ZN5SDC30C1Eh>
	char buffer_string[4];
	float float_number;

	while(true) 
	{
		sdc30.Measure();
 1b8:	ce 01       	movw	r24, r28
 1ba:	02 96       	adiw	r24, 0x02	; 2
 1bc:	e4 d0       	rcall	.+456    	; 0x386 <_ZN5SDC307MeasureEv>
		
		float_number = sdc30.getCo2();
 1be:	ce 01       	movw	r24, r28
 1c0:	02 96       	adiw	r24, 0x02	; 2
 1c2:	cf d0       	rcall	.+414    	; 0x362 <_ZN5SDC306getCo2Ev>
 1c4:	6b 01       	movw	r12, r22
 1c6:	7c 01       	movw	r14, r24
 1c8:	68 e0       	ldi	r22, 0x08	; 8
		uart.transmitString("\r\nC2:    ");
 1ca:	72 e0       	ldi	r23, 0x02	; 2
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	94 d1       	rcall	.+808    	; 0x4fa <_ZN4UART14transmitStringEPKc>
 1d2:	b7 01       	movw	r22, r14
		float_to_string(buffer_string, float_number);
 1d4:	a6 01       	movw	r20, r12
 1d6:	ce 01       	movw	r24, r28
 1d8:	42 96       	adiw	r24, 0x12	; 18
 1da:	9c df       	rcall	.-200    	; 0x114 <_Z15float_to_stringPcf>
 1dc:	be 01       	movw	r22, r28
		uart.transmitString(buffer_string);
 1de:	6e 5e       	subi	r22, 0xEE	; 238
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	89 d1       	rcall	.+786    	; 0x4fa <_ZN4UART14transmitStringEPKc>
 1e8:	ce 01       	movw	r24, r28
		
		float_number = sdc30.getTemperature();
 1ea:	02 96       	adiw	r24, 0x02	; 2
 1ec:	c0 d0       	rcall	.+384    	; 0x36e <_ZN5SDC3014getTemperatureEv>
 1ee:	6b 01       	movw	r12, r22
 1f0:	7c 01       	movw	r14, r24
 1f2:	62 e1       	ldi	r22, 0x12	; 18
		uart.transmitString("\r\nTE:    ");
 1f4:	72 e0       	ldi	r23, 0x02	; 2
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	7f d1       	rcall	.+766    	; 0x4fa <_ZN4UART14transmitStringEPKc>
 1fc:	b7 01       	movw	r22, r14
		float_to_string(buffer_string, float_number);
 1fe:	a6 01       	movw	r20, r12
 200:	ce 01       	movw	r24, r28
 202:	42 96       	adiw	r24, 0x12	; 18
 204:	87 df       	rcall	.-242    	; 0x114 <_Z15float_to_stringPcf>
		uart.transmitString(buffer_string);
 206:	be 01       	movw	r22, r28
 208:	6e 5e       	subi	r22, 0xEE	; 238
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	74 d1       	rcall	.+744    	; 0x4fa <_ZN4UART14transmitStringEPKc>
		
		float_number = sdc30.getHumidity();
 212:	ce 01       	movw	r24, r28
 214:	02 96       	adiw	r24, 0x02	; 2
 216:	b1 d0       	rcall	.+354    	; 0x37a <_ZN5SDC3011getHumidityEv>
 218:	6b 01       	movw	r12, r22
 21a:	7c 01       	movw	r14, r24
		uart.transmitString("\r\nHU:    ");
 21c:	6c e1       	ldi	r22, 0x1C	; 28
 21e:	72 e0       	ldi	r23, 0x02	; 2
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	6a d1       	rcall	.+724    	; 0x4fa <_ZN4UART14transmitStringEPKc>
		float_to_string(buffer_string, float_number);
 226:	b7 01       	movw	r22, r14
 228:	a6 01       	movw	r20, r12
 22a:	ce 01       	movw	r24, r28
 22c:	42 96       	adiw	r24, 0x12	; 18
 22e:	72 df       	rcall	.-284    	; 0x114 <_Z15float_to_stringPcf>
		uart.transmitString(buffer_string);
 230:	be 01       	movw	r22, r28
 232:	6e 5e       	subi	r22, 0xEE	; 238
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	5f d1       	rcall	.+702    	; 0x4fa <_ZN4UART14transmitStringEPKc>
 23c:	ce 01       	movw	r24, r28
		
		// _delay_ms(1000);
		while(uart.recieve() != 'v') {}
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	6e d1       	rcall	.+732    	; 0x51e <_ZN4UART7recieveEv>
 242:	86 37       	cpi	r24, 0x76	; 118
 244:	d9 f7       	brne	.-10     	; 0x23c <main+0xa6>
 246:	b8 cf       	rjmp	.-144    	; 0x1b8 <main+0x22>

00000248 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	// Set prescaler to 1
	TWSR = 0;
 248:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>

	// Set bit rate register (Baud rate)
	TWBR = ((F_CPU / 100000) - 16) / 2;
 24c:	88 e4       	ldi	r24, 0x48	; 72
 24e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 252:	08 95       	ret

00000254 <_ZN3I2C5startEv>:
} //I2C

void I2C::start()
{
	// Send start condition
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 254:	84 ea       	ldi	r24, 0xA4	; 164
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1 << TWINT)));
 25a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 25e:	88 23       	and	r24, r24
 260:	e4 f7       	brge	.-8      	; 0x25a <_ZN3I2C5startEv+0x6>
}
 262:	08 95       	ret

00000264 <_ZN3I2C4stopEv>:

void I2C::stop()
{
	// Send stop condition
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 264:	84 e9       	ldi	r24, 0x94	; 148
 266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 26a:	08 95       	ret

0000026c <_ZN3I2C5writeEh>:
}

void I2C::write(uint8_t data)
{
	// Load data into TWI data register
	TWDR = data;
 26c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>

	// Enable TWI and clear interrupt flag
	TWCR = (1 << TWEN) | (1 << TWINT);
 270:	84 e8       	ldi	r24, 0x84	; 132
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// Wait until TWI finish its current job (Write operation)
	while (!(TWCR & (1 << TWINT)));
 276:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 27a:	88 23       	and	r24, r24
 27c:	e4 f7       	brge	.-8      	; 0x276 <_ZN3I2C5writeEh+0xa>
}
 27e:	08 95       	ret

00000280 <_ZN3I2C8read_ackEv>:

uint8_t I2C::read_ack()
{
	// Enable TWI, generation of ack and clear interrupt flag
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 280:	84 ec       	ldi	r24, 0xC4	; 196
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// Wait until TWI finish its current job (read operation)
	while (!(TWCR & (1 << TWINT)));
 286:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 28a:	88 23       	and	r24, r24
 28c:	e4 f7       	brge	.-8      	; 0x286 <_ZN3I2C8read_ackEv+0x6>

	return TWDR;
 28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
}
 292:	08 95       	ret

00000294 <_ZN3I2C9read_nackEv>:

uint8_t I2C::read_nack()
{
	// Enable TWI and clear interrupt flag
	TWCR = (1 << TWEN) | (1 << TWINT);
 294:	84 e8       	ldi	r24, 0x84	; 132
 296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// Wait until TWI finish its current job (read operation)
	while (!(TWCR & (1 << TWINT)));
 29a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 29e:	88 23       	and	r24, r24
 2a0:	e4 f7       	brge	.-8      	; 0x29a <_ZN3I2C9read_nackEv+0x6>

	return TWDR;
 2a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 2a6:	08 95       	ret

000002a8 <_ZN5SDC30C1Eh>:
#include <avr/io.h>
#include <util/delay.h>
#include "SDC30.h"


SDC30::SDC30(uint8_t address)
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	1f 92       	push	r1
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	8c 01       	movw	r16, r24
 2ba:	f6 2e       	mov	r15, r22
 2bc:	0f 96       	adiw	r24, 0x0f	; 15
 2be:	c4 df       	rcall	.-120    	; 0x248 <_ZN3I2CC1Ev>
{
	address_ = address;
 2c0:	f8 01       	movw	r30, r16
 2c2:	f4 86       	std	Z+12, r15	; 0x0c
	I2C i2c;
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	bf df       	rcall	.-130    	; 0x248 <_ZN3I2CC1Ev>
	i2c_ = i2c;
	
	writeAddress_ = address_ << 1; // 0 i LSB for at skrive til sensor.
 2ca:	f8 01       	movw	r30, r16
 2cc:	84 85       	ldd	r24, Z+12	; 0x0c
 2ce:	98 2f       	mov	r25, r24
 2d0:	99 0f       	add	r25, r25
 2d2:	95 87       	std	Z+13, r25	; 0x0d
	readAddress_ = (address_ << 1) | 0x01; // 1 i LSB for at læse;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	86 87       	std	Z+14, r24	; 0x0e
	
} //SDC30
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	08 95       	ret

000002ec <_ZN5SDC305readyEv>:

bool SDC30::ready()
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	8c 01       	movw	r16, r24
	uint8_t dataReadyMSB;
	uint8_t dataReadyLSB;
	uint16_t dataReady;
	
	i2c_.start();
 2f6:	ec 01       	movw	r28, r24
 2f8:	2f 96       	adiw	r28, 0x0f	; 15
 2fa:	ce 01       	movw	r24, r28
 2fc:	ab df       	rcall	.-170    	; 0x254 <_ZN3I2C5startEv>
	i2c_.write(writeAddress_);
 2fe:	f8 01       	movw	r30, r16
 300:	65 85       	ldd	r22, Z+13	; 0x0d
 302:	ce 01       	movw	r24, r28
 304:	b3 df       	rcall	.-154    	; 0x26c <_ZN3I2C5writeEh>
	i2c_.write(0x02); // Get data ready adresse er 0x0202. Interface datablad.
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	ce 01       	movw	r24, r28
 30a:	b0 df       	rcall	.-160    	; 0x26c <_ZN3I2C5writeEh>
	i2c_.write(0x02);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	ce 01       	movw	r24, r28
 310:	ad df       	rcall	.-166    	; 0x26c <_ZN3I2C5writeEh>
	i2c_.stop();
 312:	ce 01       	movw	r24, r28
 314:	a7 df       	rcall	.-178    	; 0x264 <_ZN3I2C4stopEv>
 316:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	21 ee       	ldi	r18, 0xE1	; 225
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	f1 50       	subi	r31, 0x01	; 1
 31e:	20 40       	sbci	r18, 0x00	; 0
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <_ZN5SDC305readyEv+0x30>
 324:	00 c0       	rjmp	.+0      	; 0x326 <_ZN5SDC305readyEv+0x3a>
 326:	00 00       	nop
	
	_delay_ms(100); // afventer sensor i 100ms. Fundet i kode eksempel fra producenten.
	// https://github.com/Sensirion/arduino-i2c-scd30/blob/master/src/SensirionI2cScd30.cpp#L52
	
	i2c_.start();
 328:	ce 01       	movw	r24, r28
 32a:	94 df       	rcall	.-216    	; 0x254 <_ZN3I2C5startEv>
	i2c_.write(readAddress_);
 32c:	f8 01       	movw	r30, r16
 32e:	66 85       	ldd	r22, Z+14	; 0x0e
 330:	ce 01       	movw	r24, r28
 332:	9c df       	rcall	.-200    	; 0x26c <_ZN3I2C5writeEh>
	dataReadyMSB = i2c_.read_ack(); // aflæser data bytes.
 334:	ce 01       	movw	r24, r28
 336:	a4 df       	rcall	.-184    	; 0x280 <_ZN3I2C8read_ackEv>
 338:	18 2f       	mov	r17, r24
	dataReadyLSB = i2c_.read_nack();
 33a:	ce 01       	movw	r24, r28
 33c:	ab df       	rcall	.-170    	; 0x294 <_ZN3I2C9read_nackEv>
 33e:	08 2f       	mov	r16, r24
 340:	ce 01       	movw	r24, r28
	i2c_.stop();
 342:	90 df       	rcall	.-224    	; 0x264 <_ZN3I2C4stopEv>
 344:	21 2f       	mov	r18, r17
 346:	30 e0       	ldi	r19, 0x00	; 0
	
	// sammesætter bytes til én 16 bit.
	dataReady = ((uint16_t)dataReadyMSB << 8) | (uint16_t)dataReadyLSB;
 348:	32 2f       	mov	r19, r18
 34a:	22 27       	eor	r18, r18
 34c:	20 2b       	or	r18, r16
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	21 30       	cpi	r18, 0x01	; 1
	
	return dataReady == 1; // Hvis dataReady er 1, returner true.
 352:	31 05       	cpc	r19, r1
 354:	09 f0       	breq	.+2      	; 0x358 <_ZN5SDC305readyEv+0x6c>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
}
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <_ZN5SDC306getCo2Ev>:
 362:	fc 01       	movw	r30, r24
 364:	60 81       	ld	r22, Z

float SDC30::getCo2()
{
	return data_.co2;
 366:	71 81       	ldd	r23, Z+1	; 0x01
 368:	82 81       	ldd	r24, Z+2	; 0x02
 36a:	93 81       	ldd	r25, Z+3	; 0x03
}
 36c:	08 95       	ret

0000036e <_ZN5SDC3014getTemperatureEv>:

float SDC30::getTemperature()
{
	return data_.temperature;
 36e:	fc 01       	movw	r30, r24
 370:	64 81       	ldd	r22, Z+4	; 0x04
 372:	75 81       	ldd	r23, Z+5	; 0x05
 374:	86 81       	ldd	r24, Z+6	; 0x06
 376:	97 81       	ldd	r25, Z+7	; 0x07
}
 378:	08 95       	ret

0000037a <_ZN5SDC3011getHumidityEv>:

float SDC30::getHumidity()
{
	return data_.humidity;
 37a:	fc 01       	movw	r30, r24
 37c:	60 85       	ldd	r22, Z+8	; 0x08
 37e:	71 85       	ldd	r23, Z+9	; 0x09
 380:	82 85       	ldd	r24, Z+10	; 0x0a
 382:	93 85       	ldd	r25, Z+11	; 0x0b
}
 384:	08 95       	ret

00000386 <_ZN5SDC307MeasureEv>:

void SDC30::Measure()
{
 386:	2f 92       	push	r2
 388:	3f 92       	push	r3
 38a:	4f 92       	push	r4
 38c:	5f 92       	push	r5
 38e:	6f 92       	push	r6
 390:	7f 92       	push	r7
 392:	8f 92       	push	r8
 394:	9f 92       	push	r9
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	2c 97       	sbiw	r28, 0x0c	; 12
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	7c 01       	movw	r14, r24
	
	uint8_t co2_mmsb, co2_mlsb, co2_lmsb, co2_llsb;
	uint8_t t_mmsb, t_mlsb, t_lmsb, t_llsb;
	uint8_t h_mmsb, h_mlsb, h_lmsb, h_llsb;
		
	while(!this->ready()) {}
 3bc:	c7 01       	movw	r24, r14
 3be:	96 df       	rcall	.-212    	; 0x2ec <_ZN5SDC305readyEv>
 3c0:	88 23       	and	r24, r24
 3c2:	e1 f3       	breq	.-8      	; 0x3bc <_ZN5SDC307MeasureEv+0x36>
	
	i2c_.start();
 3c4:	87 01       	movw	r16, r14
 3c6:	01 5f       	subi	r16, 0xF1	; 241
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	c8 01       	movw	r24, r16
 3cc:	43 df       	rcall	.-378    	; 0x254 <_ZN3I2C5startEv>
	i2c_.write(writeAddress_);
 3ce:	f7 01       	movw	r30, r14
 3d0:	65 85       	ldd	r22, Z+13	; 0x0d
 3d2:	c8 01       	movw	r24, r16
 3d4:	4b df       	rcall	.-362    	; 0x26c <_ZN3I2C5writeEh>
	
	i2c_.write(0x03); // Read measurement adresse er 0x0300;
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	c8 01       	movw	r24, r16
 3da:	48 df       	rcall	.-368    	; 0x26c <_ZN3I2C5writeEh>
	i2c_.write(0x00);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	c8 01       	movw	r24, r16
 3e0:	45 df       	rcall	.-374    	; 0x26c <_ZN3I2C5writeEh>

	i2c_.stop();
 3e2:	c8 01       	movw	r24, r16
 3e4:	3f df       	rcall	.-386    	; 0x264 <_ZN3I2C4stopEv>
 3e6:	ff ef       	ldi	r31, 0xFF	; 255
 3e8:	20 e7       	ldi	r18, 0x70	; 112
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	f1 50       	subi	r31, 0x01	; 1
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <_ZN5SDC307MeasureEv+0x66>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <_ZN5SDC307MeasureEv+0x70>
 3f6:	00 00       	nop
	
	_delay_ms(50); // Afventer sensor i 50ms.
	
	i2c_.start();
 3f8:	c8 01       	movw	r24, r16
 3fa:	2c df       	rcall	.-424    	; 0x254 <_ZN3I2C5startEv>
	i2c_.write(readAddress_);
 3fc:	f7 01       	movw	r30, r14
 3fe:	66 85       	ldd	r22, Z+14	; 0x0e
 400:	c8 01       	movw	r24, r16
 402:	34 df       	rcall	.-408    	; 0x26c <_ZN3I2C5writeEh>

	// Læser data ifølge databladet.
	co2_mmsb = i2c_.read_ack();
 404:	c8 01       	movw	r24, r16
 406:	3c df       	rcall	.-392    	; 0x280 <_ZN3I2C8read_ackEv>
 408:	58 2e       	mov	r5, r24
	co2_mlsb = i2c_.read_ack();
 40a:	c8 01       	movw	r24, r16
 40c:	39 df       	rcall	.-398    	; 0x280 <_ZN3I2C8read_ackEv>
 40e:	48 2e       	mov	r4, r24
	i2c_.read_ack(); // CRC
 410:	c8 01       	movw	r24, r16
 412:	36 df       	rcall	.-404    	; 0x280 <_ZN3I2C8read_ackEv>
	co2_lmsb = i2c_.read_ack();
 414:	c8 01       	movw	r24, r16
 416:	34 df       	rcall	.-408    	; 0x280 <_ZN3I2C8read_ackEv>
 418:	38 2e       	mov	r3, r24
	co2_llsb = i2c_.read_ack();
 41a:	c8 01       	movw	r24, r16
 41c:	31 df       	rcall	.-414    	; 0x280 <_ZN3I2C8read_ackEv>
	i2c_.read_ack(); // CRC
 41e:	28 2e       	mov	r2, r24
 420:	c8 01       	movw	r24, r16
	t_mmsb = i2c_.read_ack();
 422:	2e df       	rcall	.-420    	; 0x280 <_ZN3I2C8read_ackEv>
 424:	c8 01       	movw	r24, r16
 426:	2c df       	rcall	.-424    	; 0x280 <_ZN3I2C8read_ackEv>
	t_mlsb = i2c_.read_ack();
 428:	98 2e       	mov	r9, r24
 42a:	c8 01       	movw	r24, r16
 42c:	29 df       	rcall	.-430    	; 0x280 <_ZN3I2C8read_ackEv>
	i2c_.read_ack(); // CRC
 42e:	88 2e       	mov	r8, r24
 430:	c8 01       	movw	r24, r16
	t_lmsb = i2c_.read_ack();
 432:	26 df       	rcall	.-436    	; 0x280 <_ZN3I2C8read_ackEv>
 434:	c8 01       	movw	r24, r16
 436:	24 df       	rcall	.-440    	; 0x280 <_ZN3I2C8read_ackEv>
	t_llsb = i2c_.read_ack();
 438:	78 2e       	mov	r7, r24
 43a:	c8 01       	movw	r24, r16
 43c:	21 df       	rcall	.-446    	; 0x280 <_ZN3I2C8read_ackEv>
	i2c_.read_ack(); // CRC
 43e:	68 2e       	mov	r6, r24
 440:	c8 01       	movw	r24, r16
	h_mmsb = i2c_.read_ack();
 442:	1e df       	rcall	.-452    	; 0x280 <_ZN3I2C8read_ackEv>
 444:	c8 01       	movw	r24, r16
 446:	1c df       	rcall	.-456    	; 0x280 <_ZN3I2C8read_ackEv>
 448:	d8 2e       	mov	r13, r24
	h_mlsb = i2c_.read_ack();
 44a:	c8 01       	movw	r24, r16
 44c:	19 df       	rcall	.-462    	; 0x280 <_ZN3I2C8read_ackEv>
 44e:	c8 2e       	mov	r12, r24
 450:	c8 01       	movw	r24, r16
	i2c_.read_ack(); // CRC
 452:	16 df       	rcall	.-468    	; 0x280 <_ZN3I2C8read_ackEv>
 454:	c8 01       	movw	r24, r16
 456:	14 df       	rcall	.-472    	; 0x280 <_ZN3I2C8read_ackEv>
	h_lmsb = i2c_.read_ack();
 458:	b8 2e       	mov	r11, r24
 45a:	c8 01       	movw	r24, r16
 45c:	11 df       	rcall	.-478    	; 0x280 <_ZN3I2C8read_ackEv>
 45e:	a8 2e       	mov	r10, r24
	h_llsb = i2c_.read_ack();
 460:	c8 01       	movw	r24, r16
 462:	18 df       	rcall	.-464    	; 0x294 <_ZN3I2C9read_nackEv>
 464:	c8 01       	movw	r24, r16
 466:	fe de       	rcall	.-516    	; 0x264 <_ZN3I2C4stopEv>
	i2c_.read_nack(); // CRC
 468:	82 2d       	mov	r24, r2
 46a:	93 2d       	mov	r25, r3
 46c:	a4 2d       	mov	r26, r4

	// Send stop condition
	i2c_.stop();
 46e:	b5 2d       	mov	r27, r5
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	9a 83       	std	Y+2, r25	; 0x02
	mData.bytes[3] = co2_mmsb;
	mData.bytes[2] = co2_mlsb;
	mData.bytes[1] = co2_lmsb;
	mData.bytes[0] = co2_llsb;
	
	data.co2 = mData.value;
 474:	ab 83       	std	Y+3, r26	; 0x03
 476:	bc 83       	std	Y+4, r27	; 0x04
 478:	86 2d       	mov	r24, r6
 47a:	97 2d       	mov	r25, r7
 47c:	a8 2d       	mov	r26, r8
 47e:	b9 2d       	mov	r27, r9
 480:	8d 83       	std	Y+5, r24	; 0x05
 482:	9e 83       	std	Y+6, r25	; 0x06
	mData.bytes[3] = t_mmsb;
	mData.bytes[2] = t_mlsb;
	mData.bytes[1] = t_lmsb;
	mData.bytes[0] = t_llsb;
	
	data.temperature = mData.value;
 484:	af 83       	std	Y+7, r26	; 0x07
 486:	b8 87       	std	Y+8, r27	; 0x08
 488:	8a 2d       	mov	r24, r10
 48a:	9b 2d       	mov	r25, r11
 48c:	ac 2d       	mov	r26, r12
 48e:	bd 2d       	mov	r27, r13
 490:	89 87       	std	Y+9, r24	; 0x09
 492:	9a 87       	std	Y+10, r25	; 0x0a
	mData.bytes[3] = h_mmsb;
	mData.bytes[2] = h_mlsb;
	mData.bytes[1] = h_lmsb;
	mData.bytes[0] = h_llsb;
	
	data.humidity = mData.value;
 494:	ab 87       	std	Y+11, r26	; 0x0b
 496:	bc 87       	std	Y+12, r27	; 0x0c
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	fe 01       	movw	r30, r28
 49c:	31 96       	adiw	r30, 0x01	; 1
 49e:	d7 01       	movw	r26, r14
 4a0:	01 90       	ld	r0, Z+
 4a2:	0d 92       	st	X+, r0
	
	data_ = data; // Gemmer i privat klasse variable.
 4a4:	8a 95       	dec	r24
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a8:	2c 96       	adiw	r28, 0x0c	; 12
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
	// return data;
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	af 90       	pop	r10
 4c8:	9f 90       	pop	r9
 4ca:	8f 90       	pop	r8
 4cc:	7f 90       	pop	r7
 4ce:	6f 90       	pop	r6
 4d0:	5f 90       	pop	r5
 4d2:	4f 90       	pop	r4
 4d4:	3f 90       	pop	r3
 4d6:	2f 90       	pop	r2
 4d8:	08 95       	ret

000004da <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 4da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 4de:	87 e6       	ldi	r24, 0x67	; 103
 4e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 4e4:	88 e1       	ldi	r24, 0x18	; 24
 4e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 4ea:	08 95       	ret

000004ec <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 4ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 4f0:	85 ff       	sbrs	r24, 5
 4f2:	fc cf       	rjmp	.-8      	; 0x4ec <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 4f4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4f8:	08 95       	ret

000004fa <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	8c 01       	movw	r16, r24
 504:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 506:	68 81       	ld	r22, Y
 508:	66 23       	and	r22, r22
 50a:	21 f0       	breq	.+8      	; 0x514 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 50c:	c8 01       	movw	r24, r16
 50e:	ee df       	rcall	.-36     	; 0x4ec <_ZN4UART8transmitEh>
		str++;
 510:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 512:	f9 cf       	rjmp	.-14     	; 0x506 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <_ZN4UART7recieveEv>:

unsigned char UART::recieve() 
{
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 51e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 522:	88 23       	and	r24, r24
 524:	e4 f7       	brge	.-8      	; 0x51e <_ZN4UART7recieveEv>
	
	// Get and return received data from buffer
	return UDR0;
 526:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 52a:	08 95       	ret

0000052c <__subsf3>:
 52c:	50 58       	subi	r21, 0x80	; 128

0000052e <__addsf3>:
 52e:	bb 27       	eor	r27, r27
 530:	aa 27       	eor	r26, r26
 532:	0e d0       	rcall	.+28     	; 0x550 <__addsf3x>
 534:	e5 c0       	rjmp	.+458    	; 0x700 <__fp_round>
 536:	d6 d0       	rcall	.+428    	; 0x6e4 <__fp_pscA>
 538:	30 f0       	brcs	.+12     	; 0x546 <__addsf3+0x18>
 53a:	db d0       	rcall	.+438    	; 0x6f2 <__fp_pscB>
 53c:	20 f0       	brcs	.+8      	; 0x546 <__addsf3+0x18>
 53e:	31 f4       	brne	.+12     	; 0x54c <__addsf3+0x1e>
 540:	9f 3f       	cpi	r25, 0xFF	; 255
 542:	11 f4       	brne	.+4      	; 0x548 <__addsf3+0x1a>
 544:	1e f4       	brtc	.+6      	; 0x54c <__addsf3+0x1e>
 546:	cb c0       	rjmp	.+406    	; 0x6de <__fp_nan>
 548:	0e f4       	brtc	.+2      	; 0x54c <__addsf3+0x1e>
 54a:	e0 95       	com	r30
 54c:	e7 fb       	bst	r30, 7
 54e:	c1 c0       	rjmp	.+386    	; 0x6d2 <__fp_inf>

00000550 <__addsf3x>:
 550:	e9 2f       	mov	r30, r25
 552:	e7 d0       	rcall	.+462    	; 0x722 <__fp_split3>
 554:	80 f3       	brcs	.-32     	; 0x536 <__addsf3+0x8>
 556:	ba 17       	cp	r27, r26
 558:	62 07       	cpc	r22, r18
 55a:	73 07       	cpc	r23, r19
 55c:	84 07       	cpc	r24, r20
 55e:	95 07       	cpc	r25, r21
 560:	18 f0       	brcs	.+6      	; 0x568 <__addsf3x+0x18>
 562:	71 f4       	brne	.+28     	; 0x580 <__addsf3x+0x30>
 564:	9e f5       	brtc	.+102    	; 0x5cc <__addsf3x+0x7c>
 566:	ff c0       	rjmp	.+510    	; 0x766 <__fp_zero>
 568:	0e f4       	brtc	.+2      	; 0x56c <__addsf3x+0x1c>
 56a:	e0 95       	com	r30
 56c:	0b 2e       	mov	r0, r27
 56e:	ba 2f       	mov	r27, r26
 570:	a0 2d       	mov	r26, r0
 572:	0b 01       	movw	r0, r22
 574:	b9 01       	movw	r22, r18
 576:	90 01       	movw	r18, r0
 578:	0c 01       	movw	r0, r24
 57a:	ca 01       	movw	r24, r20
 57c:	a0 01       	movw	r20, r0
 57e:	11 24       	eor	r1, r1
 580:	ff 27       	eor	r31, r31
 582:	59 1b       	sub	r21, r25
 584:	99 f0       	breq	.+38     	; 0x5ac <__addsf3x+0x5c>
 586:	59 3f       	cpi	r21, 0xF9	; 249
 588:	50 f4       	brcc	.+20     	; 0x59e <__addsf3x+0x4e>
 58a:	50 3e       	cpi	r21, 0xE0	; 224
 58c:	68 f1       	brcs	.+90     	; 0x5e8 <__addsf3x+0x98>
 58e:	1a 16       	cp	r1, r26
 590:	f0 40       	sbci	r31, 0x00	; 0
 592:	a2 2f       	mov	r26, r18
 594:	23 2f       	mov	r18, r19
 596:	34 2f       	mov	r19, r20
 598:	44 27       	eor	r20, r20
 59a:	58 5f       	subi	r21, 0xF8	; 248
 59c:	f3 cf       	rjmp	.-26     	; 0x584 <__addsf3x+0x34>
 59e:	46 95       	lsr	r20
 5a0:	37 95       	ror	r19
 5a2:	27 95       	ror	r18
 5a4:	a7 95       	ror	r26
 5a6:	f0 40       	sbci	r31, 0x00	; 0
 5a8:	53 95       	inc	r21
 5aa:	c9 f7       	brne	.-14     	; 0x59e <__addsf3x+0x4e>
 5ac:	7e f4       	brtc	.+30     	; 0x5cc <__addsf3x+0x7c>
 5ae:	1f 16       	cp	r1, r31
 5b0:	ba 0b       	sbc	r27, r26
 5b2:	62 0b       	sbc	r22, r18
 5b4:	73 0b       	sbc	r23, r19
 5b6:	84 0b       	sbc	r24, r20
 5b8:	ba f0       	brmi	.+46     	; 0x5e8 <__addsf3x+0x98>
 5ba:	91 50       	subi	r25, 0x01	; 1
 5bc:	a1 f0       	breq	.+40     	; 0x5e6 <__addsf3x+0x96>
 5be:	ff 0f       	add	r31, r31
 5c0:	bb 1f       	adc	r27, r27
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	c2 f7       	brpl	.-16     	; 0x5ba <__addsf3x+0x6a>
 5ca:	0e c0       	rjmp	.+28     	; 0x5e8 <__addsf3x+0x98>
 5cc:	ba 0f       	add	r27, r26
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 1f       	adc	r23, r19
 5d2:	84 1f       	adc	r24, r20
 5d4:	48 f4       	brcc	.+18     	; 0x5e8 <__addsf3x+0x98>
 5d6:	87 95       	ror	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b7 95       	ror	r27
 5de:	f7 95       	ror	r31
 5e0:	9e 3f       	cpi	r25, 0xFE	; 254
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <__addsf3x+0x96>
 5e4:	b3 cf       	rjmp	.-154    	; 0x54c <__addsf3+0x1e>
 5e6:	93 95       	inc	r25
 5e8:	88 0f       	add	r24, r24
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <__addsf3x+0x9e>
 5ec:	99 27       	eor	r25, r25
 5ee:	ee 0f       	add	r30, r30
 5f0:	97 95       	ror	r25
 5f2:	87 95       	ror	r24
 5f4:	08 95       	ret

000005f6 <__fixsfsi>:
 5f6:	04 d0       	rcall	.+8      	; 0x600 <__fixunssfsi>
 5f8:	68 94       	set
 5fa:	b1 11       	cpse	r27, r1
 5fc:	b5 c0       	rjmp	.+362    	; 0x768 <__fp_szero>
 5fe:	08 95       	ret

00000600 <__fixunssfsi>:
 600:	98 d0       	rcall	.+304    	; 0x732 <__fp_splitA>
 602:	88 f0       	brcs	.+34     	; 0x626 <__fixunssfsi+0x26>
 604:	9f 57       	subi	r25, 0x7F	; 127
 606:	90 f0       	brcs	.+36     	; 0x62c <__fixunssfsi+0x2c>
 608:	b9 2f       	mov	r27, r25
 60a:	99 27       	eor	r25, r25
 60c:	b7 51       	subi	r27, 0x17	; 23
 60e:	a0 f0       	brcs	.+40     	; 0x638 <__fixunssfsi+0x38>
 610:	d1 f0       	breq	.+52     	; 0x646 <__fixunssfsi+0x46>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	1a f0       	brmi	.+6      	; 0x622 <__fixunssfsi+0x22>
 61c:	ba 95       	dec	r27
 61e:	c9 f7       	brne	.-14     	; 0x612 <__fixunssfsi+0x12>
 620:	12 c0       	rjmp	.+36     	; 0x646 <__fixunssfsi+0x46>
 622:	b1 30       	cpi	r27, 0x01	; 1
 624:	81 f0       	breq	.+32     	; 0x646 <__fixunssfsi+0x46>
 626:	9f d0       	rcall	.+318    	; 0x766 <__fp_zero>
 628:	b1 e0       	ldi	r27, 0x01	; 1
 62a:	08 95       	ret
 62c:	9c c0       	rjmp	.+312    	; 0x766 <__fp_zero>
 62e:	67 2f       	mov	r22, r23
 630:	78 2f       	mov	r23, r24
 632:	88 27       	eor	r24, r24
 634:	b8 5f       	subi	r27, 0xF8	; 248
 636:	39 f0       	breq	.+14     	; 0x646 <__fixunssfsi+0x46>
 638:	b9 3f       	cpi	r27, 0xF9	; 249
 63a:	cc f3       	brlt	.-14     	; 0x62e <__fixunssfsi+0x2e>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b3 95       	inc	r27
 644:	d9 f7       	brne	.-10     	; 0x63c <__fixunssfsi+0x3c>
 646:	3e f4       	brtc	.+14     	; 0x656 <__fixunssfsi+0x56>
 648:	90 95       	com	r25
 64a:	80 95       	com	r24
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <__floatunsisf>:
 658:	e8 94       	clt
 65a:	09 c0       	rjmp	.+18     	; 0x66e <__floatsisf+0x12>

0000065c <__floatsisf>:
 65c:	97 fb       	bst	r25, 7
 65e:	3e f4       	brtc	.+14     	; 0x66e <__floatsisf+0x12>
 660:	90 95       	com	r25
 662:	80 95       	com	r24
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	99 23       	and	r25, r25
 670:	a9 f0       	breq	.+42     	; 0x69c <__floatsisf+0x40>
 672:	f9 2f       	mov	r31, r25
 674:	96 e9       	ldi	r25, 0x96	; 150
 676:	bb 27       	eor	r27, r27
 678:	93 95       	inc	r25
 67a:	f6 95       	lsr	r31
 67c:	87 95       	ror	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f1 11       	cpse	r31, r1
 686:	f8 cf       	rjmp	.-16     	; 0x678 <__floatsisf+0x1c>
 688:	fa f4       	brpl	.+62     	; 0x6c8 <__floatsisf+0x6c>
 68a:	bb 0f       	add	r27, r27
 68c:	11 f4       	brne	.+4      	; 0x692 <__floatsisf+0x36>
 68e:	60 ff       	sbrs	r22, 0
 690:	1b c0       	rjmp	.+54     	; 0x6c8 <__floatsisf+0x6c>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	16 c0       	rjmp	.+44     	; 0x6c8 <__floatsisf+0x6c>
 69c:	88 23       	and	r24, r24
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__floatsisf+0x48>
 6a0:	96 e9       	ldi	r25, 0x96	; 150
 6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <__floatsisf+0x6a>
 6a4:	77 23       	and	r23, r23
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <__floatsisf+0x54>
 6a8:	9e e8       	ldi	r25, 0x8E	; 142
 6aa:	87 2f       	mov	r24, r23
 6ac:	76 2f       	mov	r23, r22
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__floatsisf+0x5e>
 6b0:	66 23       	and	r22, r22
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__floatsisf+0x74>
 6b4:	96 e8       	ldi	r25, 0x86	; 134
 6b6:	86 2f       	mov	r24, r22
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	2a f0       	brmi	.+10     	; 0x6c8 <__floatsisf+0x6c>
 6be:	9a 95       	dec	r25
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	da f7       	brpl	.-10     	; 0x6be <__floatsisf+0x62>
 6c8:	88 0f       	add	r24, r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__fp_inf>:
 6d2:	97 f9       	bld	r25, 7
 6d4:	9f 67       	ori	r25, 0x7F	; 127
 6d6:	80 e8       	ldi	r24, 0x80	; 128
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	08 95       	ret

000006de <__fp_nan>:
 6de:	9f ef       	ldi	r25, 0xFF	; 255
 6e0:	80 ec       	ldi	r24, 0xC0	; 192
 6e2:	08 95       	ret

000006e4 <__fp_pscA>:
 6e4:	00 24       	eor	r0, r0
 6e6:	0a 94       	dec	r0
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	18 06       	cpc	r1, r24
 6ee:	09 06       	cpc	r0, r25
 6f0:	08 95       	ret

000006f2 <__fp_pscB>:
 6f2:	00 24       	eor	r0, r0
 6f4:	0a 94       	dec	r0
 6f6:	12 16       	cp	r1, r18
 6f8:	13 06       	cpc	r1, r19
 6fa:	14 06       	cpc	r1, r20
 6fc:	05 06       	cpc	r0, r21
 6fe:	08 95       	ret

00000700 <__fp_round>:
 700:	09 2e       	mov	r0, r25
 702:	03 94       	inc	r0
 704:	00 0c       	add	r0, r0
 706:	11 f4       	brne	.+4      	; 0x70c <__fp_round+0xc>
 708:	88 23       	and	r24, r24
 70a:	52 f0       	brmi	.+20     	; 0x720 <__fp_round+0x20>
 70c:	bb 0f       	add	r27, r27
 70e:	40 f4       	brcc	.+16     	; 0x720 <__fp_round+0x20>
 710:	bf 2b       	or	r27, r31
 712:	11 f4       	brne	.+4      	; 0x718 <__fp_round+0x18>
 714:	60 ff       	sbrs	r22, 0
 716:	04 c0       	rjmp	.+8      	; 0x720 <__fp_round+0x20>
 718:	6f 5f       	subi	r22, 0xFF	; 255
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	08 95       	ret

00000722 <__fp_split3>:
 722:	57 fd       	sbrc	r21, 7
 724:	90 58       	subi	r25, 0x80	; 128
 726:	44 0f       	add	r20, r20
 728:	55 1f       	adc	r21, r21
 72a:	59 f0       	breq	.+22     	; 0x742 <__fp_splitA+0x10>
 72c:	5f 3f       	cpi	r21, 0xFF	; 255
 72e:	71 f0       	breq	.+28     	; 0x74c <__fp_splitA+0x1a>
 730:	47 95       	ror	r20

00000732 <__fp_splitA>:
 732:	88 0f       	add	r24, r24
 734:	97 fb       	bst	r25, 7
 736:	99 1f       	adc	r25, r25
 738:	61 f0       	breq	.+24     	; 0x752 <__fp_splitA+0x20>
 73a:	9f 3f       	cpi	r25, 0xFF	; 255
 73c:	79 f0       	breq	.+30     	; 0x75c <__fp_splitA+0x2a>
 73e:	87 95       	ror	r24
 740:	08 95       	ret
 742:	12 16       	cp	r1, r18
 744:	13 06       	cpc	r1, r19
 746:	14 06       	cpc	r1, r20
 748:	55 1f       	adc	r21, r21
 74a:	f2 cf       	rjmp	.-28     	; 0x730 <__fp_split3+0xe>
 74c:	46 95       	lsr	r20
 74e:	f1 df       	rcall	.-30     	; 0x732 <__fp_splitA>
 750:	08 c0       	rjmp	.+16     	; 0x762 <__fp_splitA+0x30>
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	99 1f       	adc	r25, r25
 75a:	f1 cf       	rjmp	.-30     	; 0x73e <__fp_splitA+0xc>
 75c:	86 95       	lsr	r24
 75e:	71 05       	cpc	r23, r1
 760:	61 05       	cpc	r22, r1
 762:	08 94       	sec
 764:	08 95       	ret

00000766 <__fp_zero>:
 766:	e8 94       	clt

00000768 <__fp_szero>:
 768:	bb 27       	eor	r27, r27
 76a:	66 27       	eor	r22, r22
 76c:	77 27       	eor	r23, r23
 76e:	cb 01       	movw	r24, r22
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <__mulsf3>:
 774:	0b d0       	rcall	.+22     	; 0x78c <__mulsf3x>
 776:	c4 cf       	rjmp	.-120    	; 0x700 <__fp_round>
 778:	b5 df       	rcall	.-150    	; 0x6e4 <__fp_pscA>
 77a:	28 f0       	brcs	.+10     	; 0x786 <__mulsf3+0x12>
 77c:	ba df       	rcall	.-140    	; 0x6f2 <__fp_pscB>
 77e:	18 f0       	brcs	.+6      	; 0x786 <__mulsf3+0x12>
 780:	95 23       	and	r25, r21
 782:	09 f0       	breq	.+2      	; 0x786 <__mulsf3+0x12>
 784:	a6 cf       	rjmp	.-180    	; 0x6d2 <__fp_inf>
 786:	ab cf       	rjmp	.-170    	; 0x6de <__fp_nan>
 788:	11 24       	eor	r1, r1
 78a:	ee cf       	rjmp	.-36     	; 0x768 <__fp_szero>

0000078c <__mulsf3x>:
 78c:	ca df       	rcall	.-108    	; 0x722 <__fp_split3>
 78e:	a0 f3       	brcs	.-24     	; 0x778 <__mulsf3+0x4>

00000790 <__mulsf3_pse>:
 790:	95 9f       	mul	r25, r21
 792:	d1 f3       	breq	.-12     	; 0x788 <__mulsf3+0x14>
 794:	95 0f       	add	r25, r21
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	55 1f       	adc	r21, r21
 79a:	62 9f       	mul	r22, r18
 79c:	f0 01       	movw	r30, r0
 79e:	72 9f       	mul	r23, r18
 7a0:	bb 27       	eor	r27, r27
 7a2:	f0 0d       	add	r31, r0
 7a4:	b1 1d       	adc	r27, r1
 7a6:	63 9f       	mul	r22, r19
 7a8:	aa 27       	eor	r26, r26
 7aa:	f0 0d       	add	r31, r0
 7ac:	b1 1d       	adc	r27, r1
 7ae:	aa 1f       	adc	r26, r26
 7b0:	64 9f       	mul	r22, r20
 7b2:	66 27       	eor	r22, r22
 7b4:	b0 0d       	add	r27, r0
 7b6:	a1 1d       	adc	r26, r1
 7b8:	66 1f       	adc	r22, r22
 7ba:	82 9f       	mul	r24, r18
 7bc:	22 27       	eor	r18, r18
 7be:	b0 0d       	add	r27, r0
 7c0:	a1 1d       	adc	r26, r1
 7c2:	62 1f       	adc	r22, r18
 7c4:	73 9f       	mul	r23, r19
 7c6:	b0 0d       	add	r27, r0
 7c8:	a1 1d       	adc	r26, r1
 7ca:	62 1f       	adc	r22, r18
 7cc:	83 9f       	mul	r24, r19
 7ce:	a0 0d       	add	r26, r0
 7d0:	61 1d       	adc	r22, r1
 7d2:	22 1f       	adc	r18, r18
 7d4:	74 9f       	mul	r23, r20
 7d6:	33 27       	eor	r19, r19
 7d8:	a0 0d       	add	r26, r0
 7da:	61 1d       	adc	r22, r1
 7dc:	23 1f       	adc	r18, r19
 7de:	84 9f       	mul	r24, r20
 7e0:	60 0d       	add	r22, r0
 7e2:	21 1d       	adc	r18, r1
 7e4:	82 2f       	mov	r24, r18
 7e6:	76 2f       	mov	r23, r22
 7e8:	6a 2f       	mov	r22, r26
 7ea:	11 24       	eor	r1, r1
 7ec:	9f 57       	subi	r25, 0x7F	; 127
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	8a f0       	brmi	.+34     	; 0x814 <__mulsf3_pse+0x84>
 7f2:	e1 f0       	breq	.+56     	; 0x82c <__mulsf3_pse+0x9c>
 7f4:	88 23       	and	r24, r24
 7f6:	4a f0       	brmi	.+18     	; 0x80a <__mulsf3_pse+0x7a>
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	bb 1f       	adc	r27, r27
 7fe:	66 1f       	adc	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	91 50       	subi	r25, 0x01	; 1
 806:	50 40       	sbci	r21, 0x00	; 0
 808:	a9 f7       	brne	.-22     	; 0x7f4 <__mulsf3_pse+0x64>
 80a:	9e 3f       	cpi	r25, 0xFE	; 254
 80c:	51 05       	cpc	r21, r1
 80e:	70 f0       	brcs	.+28     	; 0x82c <__mulsf3_pse+0x9c>
 810:	60 cf       	rjmp	.-320    	; 0x6d2 <__fp_inf>
 812:	aa cf       	rjmp	.-172    	; 0x768 <__fp_szero>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	ec f3       	brlt	.-6      	; 0x812 <__mulsf3_pse+0x82>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	dc f3       	brlt	.-10     	; 0x812 <__mulsf3_pse+0x82>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f7 95       	ror	r31
 826:	e7 95       	ror	r30
 828:	9f 5f       	subi	r25, 0xFF	; 255
 82a:	c1 f7       	brne	.-16     	; 0x81c <__mulsf3_pse+0x8c>
 82c:	fe 2b       	or	r31, r30
 82e:	88 0f       	add	r24, r24
 830:	91 1d       	adc	r25, r1
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <sprintf>:
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
 846:	2e 97       	sbiw	r28, 0x0e	; 14
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	0e 89       	ldd	r16, Y+22	; 0x16
 854:	1f 89       	ldd	r17, Y+23	; 0x17
 856:	86 e0       	ldi	r24, 0x06	; 6
 858:	8c 83       	std	Y+4, r24	; 0x04
 85a:	1a 83       	std	Y+2, r17	; 0x02
 85c:	09 83       	std	Y+1, r16	; 0x01
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	9f e7       	ldi	r25, 0x7F	; 127
 862:	9e 83       	std	Y+6, r25	; 0x06
 864:	8d 83       	std	Y+5, r24	; 0x05
 866:	ae 01       	movw	r20, r28
 868:	46 5e       	subi	r20, 0xE6	; 230
 86a:	5f 4f       	sbci	r21, 0xFF	; 255
 86c:	68 8d       	ldd	r22, Y+24	; 0x18
 86e:	79 8d       	ldd	r23, Y+25	; 0x19
 870:	ce 01       	movw	r24, r28
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	10 d0       	rcall	.+32     	; 0x896 <vfprintf>
 876:	ef 81       	ldd	r30, Y+7	; 0x07
 878:	f8 85       	ldd	r31, Y+8	; 0x08
 87a:	e0 0f       	add	r30, r16
 87c:	f1 1f       	adc	r31, r17
 87e:	10 82       	st	Z, r1
 880:	2e 96       	adiw	r28, 0x0e	; 14
 882:	0f b6       	in	r0, 0x3f	; 63
 884:	f8 94       	cli
 886:	de bf       	out	0x3e, r29	; 62
 888:	0f be       	out	0x3f, r0	; 63
 88a:	cd bf       	out	0x3d, r28	; 61
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	08 95       	ret

00000896 <vfprintf>:
 896:	2f 92       	push	r2
 898:	3f 92       	push	r3
 89a:	4f 92       	push	r4
 89c:	5f 92       	push	r5
 89e:	6f 92       	push	r6
 8a0:	7f 92       	push	r7
 8a2:	8f 92       	push	r8
 8a4:	9f 92       	push	r9
 8a6:	af 92       	push	r10
 8a8:	bf 92       	push	r11
 8aa:	cf 92       	push	r12
 8ac:	df 92       	push	r13
 8ae:	ef 92       	push	r14
 8b0:	ff 92       	push	r15
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	2b 97       	sbiw	r28, 0x0b	; 11
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	f8 94       	cli
 8c4:	de bf       	out	0x3e, r29	; 62
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	cd bf       	out	0x3d, r28	; 61
 8ca:	6c 01       	movw	r12, r24
 8cc:	7b 01       	movw	r14, r22
 8ce:	8a 01       	movw	r16, r20
 8d0:	fc 01       	movw	r30, r24
 8d2:	17 82       	std	Z+7, r1	; 0x07
 8d4:	16 82       	std	Z+6, r1	; 0x06
 8d6:	83 81       	ldd	r24, Z+3	; 0x03
 8d8:	81 ff       	sbrs	r24, 1
 8da:	bf c1       	rjmp	.+894    	; 0xc5a <vfprintf+0x3c4>
 8dc:	ce 01       	movw	r24, r28
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	3c 01       	movw	r6, r24
 8e2:	f6 01       	movw	r30, r12
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	f7 01       	movw	r30, r14
 8e8:	93 fd       	sbrc	r25, 3
 8ea:	85 91       	lpm	r24, Z+
 8ec:	93 ff       	sbrs	r25, 3
 8ee:	81 91       	ld	r24, Z+
 8f0:	7f 01       	movw	r14, r30
 8f2:	88 23       	and	r24, r24
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <vfprintf+0x62>
 8f6:	ad c1       	rjmp	.+858    	; 0xc52 <vfprintf+0x3bc>
 8f8:	85 32       	cpi	r24, 0x25	; 37
 8fa:	39 f4       	brne	.+14     	; 0x90a <vfprintf+0x74>
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	85 32       	cpi	r24, 0x25	; 37
 908:	21 f4       	brne	.+8      	; 0x912 <vfprintf+0x7c>
 90a:	b6 01       	movw	r22, r12
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	d6 d1       	rcall	.+940    	; 0xcbc <fputc>
 910:	e8 cf       	rjmp	.-48     	; 0x8e2 <vfprintf+0x4c>
 912:	91 2c       	mov	r9, r1
 914:	21 2c       	mov	r2, r1
 916:	31 2c       	mov	r3, r1
 918:	ff e1       	ldi	r31, 0x1F	; 31
 91a:	f3 15       	cp	r31, r3
 91c:	d8 f0       	brcs	.+54     	; 0x954 <vfprintf+0xbe>
 91e:	8b 32       	cpi	r24, 0x2B	; 43
 920:	79 f0       	breq	.+30     	; 0x940 <vfprintf+0xaa>
 922:	38 f4       	brcc	.+14     	; 0x932 <vfprintf+0x9c>
 924:	80 32       	cpi	r24, 0x20	; 32
 926:	79 f0       	breq	.+30     	; 0x946 <vfprintf+0xb0>
 928:	83 32       	cpi	r24, 0x23	; 35
 92a:	a1 f4       	brne	.+40     	; 0x954 <vfprintf+0xbe>
 92c:	23 2d       	mov	r18, r3
 92e:	20 61       	ori	r18, 0x10	; 16
 930:	1d c0       	rjmp	.+58     	; 0x96c <vfprintf+0xd6>
 932:	8d 32       	cpi	r24, 0x2D	; 45
 934:	61 f0       	breq	.+24     	; 0x94e <vfprintf+0xb8>
 936:	80 33       	cpi	r24, 0x30	; 48
 938:	69 f4       	brne	.+26     	; 0x954 <vfprintf+0xbe>
 93a:	23 2d       	mov	r18, r3
 93c:	21 60       	ori	r18, 0x01	; 1
 93e:	16 c0       	rjmp	.+44     	; 0x96c <vfprintf+0xd6>
 940:	83 2d       	mov	r24, r3
 942:	82 60       	ori	r24, 0x02	; 2
 944:	38 2e       	mov	r3, r24
 946:	e3 2d       	mov	r30, r3
 948:	e4 60       	ori	r30, 0x04	; 4
 94a:	3e 2e       	mov	r3, r30
 94c:	2a c0       	rjmp	.+84     	; 0x9a2 <vfprintf+0x10c>
 94e:	f3 2d       	mov	r31, r3
 950:	f8 60       	ori	r31, 0x08	; 8
 952:	1d c0       	rjmp	.+58     	; 0x98e <vfprintf+0xf8>
 954:	37 fc       	sbrc	r3, 7
 956:	2d c0       	rjmp	.+90     	; 0x9b2 <vfprintf+0x11c>
 958:	20 ed       	ldi	r18, 0xD0	; 208
 95a:	28 0f       	add	r18, r24
 95c:	2a 30       	cpi	r18, 0x0A	; 10
 95e:	40 f0       	brcs	.+16     	; 0x970 <vfprintf+0xda>
 960:	8e 32       	cpi	r24, 0x2E	; 46
 962:	b9 f4       	brne	.+46     	; 0x992 <vfprintf+0xfc>
 964:	36 fc       	sbrc	r3, 6
 966:	75 c1       	rjmp	.+746    	; 0xc52 <vfprintf+0x3bc>
 968:	23 2d       	mov	r18, r3
 96a:	20 64       	ori	r18, 0x40	; 64
 96c:	32 2e       	mov	r3, r18
 96e:	19 c0       	rjmp	.+50     	; 0x9a2 <vfprintf+0x10c>
 970:	36 fe       	sbrs	r3, 6
 972:	06 c0       	rjmp	.+12     	; 0x980 <vfprintf+0xea>
 974:	8a e0       	ldi	r24, 0x0A	; 10
 976:	98 9e       	mul	r9, r24
 978:	20 0d       	add	r18, r0
 97a:	11 24       	eor	r1, r1
 97c:	92 2e       	mov	r9, r18
 97e:	11 c0       	rjmp	.+34     	; 0x9a2 <vfprintf+0x10c>
 980:	ea e0       	ldi	r30, 0x0A	; 10
 982:	2e 9e       	mul	r2, r30
 984:	20 0d       	add	r18, r0
 986:	11 24       	eor	r1, r1
 988:	22 2e       	mov	r2, r18
 98a:	f3 2d       	mov	r31, r3
 98c:	f0 62       	ori	r31, 0x20	; 32
 98e:	3f 2e       	mov	r3, r31
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <vfprintf+0x10c>
 992:	8c 36       	cpi	r24, 0x6C	; 108
 994:	21 f4       	brne	.+8      	; 0x99e <vfprintf+0x108>
 996:	83 2d       	mov	r24, r3
 998:	80 68       	ori	r24, 0x80	; 128
 99a:	38 2e       	mov	r3, r24
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0x10c>
 99e:	88 36       	cpi	r24, 0x68	; 104
 9a0:	41 f4       	brne	.+16     	; 0x9b2 <vfprintf+0x11c>
 9a2:	f7 01       	movw	r30, r14
 9a4:	93 fd       	sbrc	r25, 3
 9a6:	85 91       	lpm	r24, Z+
 9a8:	93 ff       	sbrs	r25, 3
 9aa:	81 91       	ld	r24, Z+
 9ac:	7f 01       	movw	r14, r30
 9ae:	81 11       	cpse	r24, r1
 9b0:	b3 cf       	rjmp	.-154    	; 0x918 <vfprintf+0x82>
 9b2:	98 2f       	mov	r25, r24
 9b4:	9f 7d       	andi	r25, 0xDF	; 223
 9b6:	95 54       	subi	r25, 0x45	; 69
 9b8:	93 30       	cpi	r25, 0x03	; 3
 9ba:	28 f4       	brcc	.+10     	; 0x9c6 <vfprintf+0x130>
 9bc:	0c 5f       	subi	r16, 0xFC	; 252
 9be:	1f 4f       	sbci	r17, 0xFF	; 255
 9c0:	9f e3       	ldi	r25, 0x3F	; 63
 9c2:	99 83       	std	Y+1, r25	; 0x01
 9c4:	0d c0       	rjmp	.+26     	; 0x9e0 <vfprintf+0x14a>
 9c6:	83 36       	cpi	r24, 0x63	; 99
 9c8:	31 f0       	breq	.+12     	; 0x9d6 <vfprintf+0x140>
 9ca:	83 37       	cpi	r24, 0x73	; 115
 9cc:	71 f0       	breq	.+28     	; 0x9ea <vfprintf+0x154>
 9ce:	83 35       	cpi	r24, 0x53	; 83
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <vfprintf+0x13e>
 9d2:	55 c0       	rjmp	.+170    	; 0xa7e <vfprintf+0x1e8>
 9d4:	20 c0       	rjmp	.+64     	; 0xa16 <vfprintf+0x180>
 9d6:	f8 01       	movw	r30, r16
 9d8:	80 81       	ld	r24, Z
 9da:	89 83       	std	Y+1, r24	; 0x01
 9dc:	0e 5f       	subi	r16, 0xFE	; 254
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	88 24       	eor	r8, r8
 9e2:	83 94       	inc	r8
 9e4:	91 2c       	mov	r9, r1
 9e6:	53 01       	movw	r10, r6
 9e8:	12 c0       	rjmp	.+36     	; 0xa0e <vfprintf+0x178>
 9ea:	28 01       	movw	r4, r16
 9ec:	f2 e0       	ldi	r31, 0x02	; 2
 9ee:	4f 0e       	add	r4, r31
 9f0:	51 1c       	adc	r5, r1
 9f2:	f8 01       	movw	r30, r16
 9f4:	a0 80       	ld	r10, Z
 9f6:	b1 80       	ldd	r11, Z+1	; 0x01
 9f8:	36 fe       	sbrs	r3, 6
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <vfprintf+0x16c>
 9fc:	69 2d       	mov	r22, r9
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <vfprintf+0x170>
 a02:	6f ef       	ldi	r22, 0xFF	; 255
 a04:	7f ef       	ldi	r23, 0xFF	; 255
 a06:	c5 01       	movw	r24, r10
 a08:	4e d1       	rcall	.+668    	; 0xca6 <strnlen>
 a0a:	4c 01       	movw	r8, r24
 a0c:	82 01       	movw	r16, r4
 a0e:	f3 2d       	mov	r31, r3
 a10:	ff 77       	andi	r31, 0x7F	; 127
 a12:	3f 2e       	mov	r3, r31
 a14:	15 c0       	rjmp	.+42     	; 0xa40 <vfprintf+0x1aa>
 a16:	28 01       	movw	r4, r16
 a18:	22 e0       	ldi	r18, 0x02	; 2
 a1a:	42 0e       	add	r4, r18
 a1c:	51 1c       	adc	r5, r1
 a1e:	f8 01       	movw	r30, r16
 a20:	a0 80       	ld	r10, Z
 a22:	b1 80       	ldd	r11, Z+1	; 0x01
 a24:	36 fe       	sbrs	r3, 6
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x198>
 a28:	69 2d       	mov	r22, r9
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <vfprintf+0x19c>
 a2e:	6f ef       	ldi	r22, 0xFF	; 255
 a30:	7f ef       	ldi	r23, 0xFF	; 255
 a32:	c5 01       	movw	r24, r10
 a34:	2d d1       	rcall	.+602    	; 0xc90 <strnlen_P>
 a36:	4c 01       	movw	r8, r24
 a38:	f3 2d       	mov	r31, r3
 a3a:	f0 68       	ori	r31, 0x80	; 128
 a3c:	3f 2e       	mov	r3, r31
 a3e:	82 01       	movw	r16, r4
 a40:	33 fc       	sbrc	r3, 3
 a42:	19 c0       	rjmp	.+50     	; 0xa76 <vfprintf+0x1e0>
 a44:	82 2d       	mov	r24, r2
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	88 16       	cp	r8, r24
 a4a:	99 06       	cpc	r9, r25
 a4c:	a0 f4       	brcc	.+40     	; 0xa76 <vfprintf+0x1e0>
 a4e:	b6 01       	movw	r22, r12
 a50:	80 e2       	ldi	r24, 0x20	; 32
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	33 d1       	rcall	.+614    	; 0xcbc <fputc>
 a56:	2a 94       	dec	r2
 a58:	f5 cf       	rjmp	.-22     	; 0xa44 <vfprintf+0x1ae>
 a5a:	f5 01       	movw	r30, r10
 a5c:	37 fc       	sbrc	r3, 7
 a5e:	85 91       	lpm	r24, Z+
 a60:	37 fe       	sbrs	r3, 7
 a62:	81 91       	ld	r24, Z+
 a64:	5f 01       	movw	r10, r30
 a66:	b6 01       	movw	r22, r12
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	28 d1       	rcall	.+592    	; 0xcbc <fputc>
 a6c:	21 10       	cpse	r2, r1
 a6e:	2a 94       	dec	r2
 a70:	21 e0       	ldi	r18, 0x01	; 1
 a72:	82 1a       	sub	r8, r18
 a74:	91 08       	sbc	r9, r1
 a76:	81 14       	cp	r8, r1
 a78:	91 04       	cpc	r9, r1
 a7a:	79 f7       	brne	.-34     	; 0xa5a <vfprintf+0x1c4>
 a7c:	e1 c0       	rjmp	.+450    	; 0xc40 <vfprintf+0x3aa>
 a7e:	84 36       	cpi	r24, 0x64	; 100
 a80:	11 f0       	breq	.+4      	; 0xa86 <vfprintf+0x1f0>
 a82:	89 36       	cpi	r24, 0x69	; 105
 a84:	39 f5       	brne	.+78     	; 0xad4 <vfprintf+0x23e>
 a86:	f8 01       	movw	r30, r16
 a88:	37 fe       	sbrs	r3, 7
 a8a:	07 c0       	rjmp	.+14     	; 0xa9a <vfprintf+0x204>
 a8c:	60 81       	ld	r22, Z
 a8e:	71 81       	ldd	r23, Z+1	; 0x01
 a90:	82 81       	ldd	r24, Z+2	; 0x02
 a92:	93 81       	ldd	r25, Z+3	; 0x03
 a94:	0c 5f       	subi	r16, 0xFC	; 252
 a96:	1f 4f       	sbci	r17, 0xFF	; 255
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <vfprintf+0x214>
 a9a:	60 81       	ld	r22, Z
 a9c:	71 81       	ldd	r23, Z+1	; 0x01
 a9e:	07 2e       	mov	r0, r23
 aa0:	00 0c       	add	r0, r0
 aa2:	88 0b       	sbc	r24, r24
 aa4:	99 0b       	sbc	r25, r25
 aa6:	0e 5f       	subi	r16, 0xFE	; 254
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	f3 2d       	mov	r31, r3
 aac:	ff 76       	andi	r31, 0x6F	; 111
 aae:	3f 2e       	mov	r3, r31
 ab0:	97 ff       	sbrs	r25, 7
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <vfprintf+0x230>
 ab4:	90 95       	com	r25
 ab6:	80 95       	com	r24
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	f0 68       	ori	r31, 0x80	; 128
 ac4:	3f 2e       	mov	r3, r31
 ac6:	2a e0       	ldi	r18, 0x0A	; 10
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	a3 01       	movw	r20, r6
 acc:	33 d1       	rcall	.+614    	; 0xd34 <__ultoa_invert>
 ace:	88 2e       	mov	r8, r24
 ad0:	86 18       	sub	r8, r6
 ad2:	44 c0       	rjmp	.+136    	; 0xb5c <vfprintf+0x2c6>
 ad4:	85 37       	cpi	r24, 0x75	; 117
 ad6:	31 f4       	brne	.+12     	; 0xae4 <vfprintf+0x24e>
 ad8:	23 2d       	mov	r18, r3
 ada:	2f 7e       	andi	r18, 0xEF	; 239
 adc:	b2 2e       	mov	r11, r18
 ade:	2a e0       	ldi	r18, 0x0A	; 10
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	25 c0       	rjmp	.+74     	; 0xb2e <vfprintf+0x298>
 ae4:	93 2d       	mov	r25, r3
 ae6:	99 7f       	andi	r25, 0xF9	; 249
 ae8:	b9 2e       	mov	r11, r25
 aea:	8f 36       	cpi	r24, 0x6F	; 111
 aec:	c1 f0       	breq	.+48     	; 0xb1e <vfprintf+0x288>
 aee:	18 f4       	brcc	.+6      	; 0xaf6 <vfprintf+0x260>
 af0:	88 35       	cpi	r24, 0x58	; 88
 af2:	79 f0       	breq	.+30     	; 0xb12 <vfprintf+0x27c>
 af4:	ae c0       	rjmp	.+348    	; 0xc52 <vfprintf+0x3bc>
 af6:	80 37       	cpi	r24, 0x70	; 112
 af8:	19 f0       	breq	.+6      	; 0xb00 <vfprintf+0x26a>
 afa:	88 37       	cpi	r24, 0x78	; 120
 afc:	21 f0       	breq	.+8      	; 0xb06 <vfprintf+0x270>
 afe:	a9 c0       	rjmp	.+338    	; 0xc52 <vfprintf+0x3bc>
 b00:	e9 2f       	mov	r30, r25
 b02:	e0 61       	ori	r30, 0x10	; 16
 b04:	be 2e       	mov	r11, r30
 b06:	b4 fe       	sbrs	r11, 4
 b08:	0d c0       	rjmp	.+26     	; 0xb24 <vfprintf+0x28e>
 b0a:	fb 2d       	mov	r31, r11
 b0c:	f4 60       	ori	r31, 0x04	; 4
 b0e:	bf 2e       	mov	r11, r31
 b10:	09 c0       	rjmp	.+18     	; 0xb24 <vfprintf+0x28e>
 b12:	34 fe       	sbrs	r3, 4
 b14:	0a c0       	rjmp	.+20     	; 0xb2a <vfprintf+0x294>
 b16:	29 2f       	mov	r18, r25
 b18:	26 60       	ori	r18, 0x06	; 6
 b1a:	b2 2e       	mov	r11, r18
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <vfprintf+0x294>
 b1e:	28 e0       	ldi	r18, 0x08	; 8
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	05 c0       	rjmp	.+10     	; 0xb2e <vfprintf+0x298>
 b24:	20 e1       	ldi	r18, 0x10	; 16
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <vfprintf+0x298>
 b2a:	20 e1       	ldi	r18, 0x10	; 16
 b2c:	32 e0       	ldi	r19, 0x02	; 2
 b2e:	f8 01       	movw	r30, r16
 b30:	b7 fe       	sbrs	r11, 7
 b32:	07 c0       	rjmp	.+14     	; 0xb42 <vfprintf+0x2ac>
 b34:	60 81       	ld	r22, Z
 b36:	71 81       	ldd	r23, Z+1	; 0x01
 b38:	82 81       	ldd	r24, Z+2	; 0x02
 b3a:	93 81       	ldd	r25, Z+3	; 0x03
 b3c:	0c 5f       	subi	r16, 0xFC	; 252
 b3e:	1f 4f       	sbci	r17, 0xFF	; 255
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <vfprintf+0x2b8>
 b42:	60 81       	ld	r22, Z
 b44:	71 81       	ldd	r23, Z+1	; 0x01
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 5f       	subi	r16, 0xFE	; 254
 b4c:	1f 4f       	sbci	r17, 0xFF	; 255
 b4e:	a3 01       	movw	r20, r6
 b50:	f1 d0       	rcall	.+482    	; 0xd34 <__ultoa_invert>
 b52:	88 2e       	mov	r8, r24
 b54:	86 18       	sub	r8, r6
 b56:	fb 2d       	mov	r31, r11
 b58:	ff 77       	andi	r31, 0x7F	; 127
 b5a:	3f 2e       	mov	r3, r31
 b5c:	36 fe       	sbrs	r3, 6
 b5e:	0d c0       	rjmp	.+26     	; 0xb7a <vfprintf+0x2e4>
 b60:	23 2d       	mov	r18, r3
 b62:	2e 7f       	andi	r18, 0xFE	; 254
 b64:	a2 2e       	mov	r10, r18
 b66:	89 14       	cp	r8, r9
 b68:	58 f4       	brcc	.+22     	; 0xb80 <vfprintf+0x2ea>
 b6a:	34 fe       	sbrs	r3, 4
 b6c:	0b c0       	rjmp	.+22     	; 0xb84 <vfprintf+0x2ee>
 b6e:	32 fc       	sbrc	r3, 2
 b70:	09 c0       	rjmp	.+18     	; 0xb84 <vfprintf+0x2ee>
 b72:	83 2d       	mov	r24, r3
 b74:	8e 7e       	andi	r24, 0xEE	; 238
 b76:	a8 2e       	mov	r10, r24
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <vfprintf+0x2ee>
 b7a:	b8 2c       	mov	r11, r8
 b7c:	a3 2c       	mov	r10, r3
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <vfprintf+0x2f0>
 b80:	b8 2c       	mov	r11, r8
 b82:	01 c0       	rjmp	.+2      	; 0xb86 <vfprintf+0x2f0>
 b84:	b9 2c       	mov	r11, r9
 b86:	a4 fe       	sbrs	r10, 4
 b88:	0f c0       	rjmp	.+30     	; 0xba8 <vfprintf+0x312>
 b8a:	fe 01       	movw	r30, r28
 b8c:	e8 0d       	add	r30, r8
 b8e:	f1 1d       	adc	r31, r1
 b90:	80 81       	ld	r24, Z
 b92:	80 33       	cpi	r24, 0x30	; 48
 b94:	21 f4       	brne	.+8      	; 0xb9e <vfprintf+0x308>
 b96:	9a 2d       	mov	r25, r10
 b98:	99 7e       	andi	r25, 0xE9	; 233
 b9a:	a9 2e       	mov	r10, r25
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x31a>
 b9e:	a2 fe       	sbrs	r10, 2
 ba0:	06 c0       	rjmp	.+12     	; 0xbae <vfprintf+0x318>
 ba2:	b3 94       	inc	r11
 ba4:	b3 94       	inc	r11
 ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <vfprintf+0x31a>
 ba8:	8a 2d       	mov	r24, r10
 baa:	86 78       	andi	r24, 0x86	; 134
 bac:	09 f0       	breq	.+2      	; 0xbb0 <vfprintf+0x31a>
 bae:	b3 94       	inc	r11
 bb0:	a3 fc       	sbrc	r10, 3
 bb2:	10 c0       	rjmp	.+32     	; 0xbd4 <vfprintf+0x33e>
 bb4:	a0 fe       	sbrs	r10, 0
 bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <vfprintf+0x32e>
 bb8:	b2 14       	cp	r11, r2
 bba:	80 f4       	brcc	.+32     	; 0xbdc <vfprintf+0x346>
 bbc:	28 0c       	add	r2, r8
 bbe:	92 2c       	mov	r9, r2
 bc0:	9b 18       	sub	r9, r11
 bc2:	0d c0       	rjmp	.+26     	; 0xbde <vfprintf+0x348>
 bc4:	b2 14       	cp	r11, r2
 bc6:	58 f4       	brcc	.+22     	; 0xbde <vfprintf+0x348>
 bc8:	b6 01       	movw	r22, r12
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	76 d0       	rcall	.+236    	; 0xcbc <fputc>
 bd0:	b3 94       	inc	r11
 bd2:	f8 cf       	rjmp	.-16     	; 0xbc4 <vfprintf+0x32e>
 bd4:	b2 14       	cp	r11, r2
 bd6:	18 f4       	brcc	.+6      	; 0xbde <vfprintf+0x348>
 bd8:	2b 18       	sub	r2, r11
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x34a>
 bdc:	98 2c       	mov	r9, r8
 bde:	21 2c       	mov	r2, r1
 be0:	a4 fe       	sbrs	r10, 4
 be2:	0f c0       	rjmp	.+30     	; 0xc02 <vfprintf+0x36c>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e3       	ldi	r24, 0x30	; 48
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	68 d0       	rcall	.+208    	; 0xcbc <fputc>
 bec:	a2 fe       	sbrs	r10, 2
 bee:	16 c0       	rjmp	.+44     	; 0xc1c <vfprintf+0x386>
 bf0:	a1 fc       	sbrc	r10, 1
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <vfprintf+0x364>
 bf4:	88 e7       	ldi	r24, 0x78	; 120
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <vfprintf+0x368>
 bfa:	88 e5       	ldi	r24, 0x58	; 88
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	b6 01       	movw	r22, r12
 c00:	0c c0       	rjmp	.+24     	; 0xc1a <vfprintf+0x384>
 c02:	8a 2d       	mov	r24, r10
 c04:	86 78       	andi	r24, 0x86	; 134
 c06:	51 f0       	breq	.+20     	; 0xc1c <vfprintf+0x386>
 c08:	a1 fe       	sbrs	r10, 1
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <vfprintf+0x37a>
 c0c:	8b e2       	ldi	r24, 0x2B	; 43
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <vfprintf+0x37c>
 c10:	80 e2       	ldi	r24, 0x20	; 32
 c12:	a7 fc       	sbrc	r10, 7
 c14:	8d e2       	ldi	r24, 0x2D	; 45
 c16:	b6 01       	movw	r22, r12
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	50 d0       	rcall	.+160    	; 0xcbc <fputc>
 c1c:	89 14       	cp	r8, r9
 c1e:	30 f4       	brcc	.+12     	; 0xc2c <vfprintf+0x396>
 c20:	b6 01       	movw	r22, r12
 c22:	80 e3       	ldi	r24, 0x30	; 48
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	4a d0       	rcall	.+148    	; 0xcbc <fputc>
 c28:	9a 94       	dec	r9
 c2a:	f8 cf       	rjmp	.-16     	; 0xc1c <vfprintf+0x386>
 c2c:	8a 94       	dec	r8
 c2e:	f3 01       	movw	r30, r6
 c30:	e8 0d       	add	r30, r8
 c32:	f1 1d       	adc	r31, r1
 c34:	80 81       	ld	r24, Z
 c36:	b6 01       	movw	r22, r12
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	40 d0       	rcall	.+128    	; 0xcbc <fputc>
 c3c:	81 10       	cpse	r8, r1
 c3e:	f6 cf       	rjmp	.-20     	; 0xc2c <vfprintf+0x396>
 c40:	22 20       	and	r2, r2
 c42:	09 f4       	brne	.+2      	; 0xc46 <vfprintf+0x3b0>
 c44:	4e ce       	rjmp	.-868    	; 0x8e2 <vfprintf+0x4c>
 c46:	b6 01       	movw	r22, r12
 c48:	80 e2       	ldi	r24, 0x20	; 32
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	37 d0       	rcall	.+110    	; 0xcbc <fputc>
 c4e:	2a 94       	dec	r2
 c50:	f7 cf       	rjmp	.-18     	; 0xc40 <vfprintf+0x3aa>
 c52:	f6 01       	movw	r30, r12
 c54:	86 81       	ldd	r24, Z+6	; 0x06
 c56:	97 81       	ldd	r25, Z+7	; 0x07
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <vfprintf+0x3c8>
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	2b 96       	adiw	r28, 0x0b	; 11
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	de bf       	out	0x3e, r29	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	cd bf       	out	0x3d, r28	; 61
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	1f 91       	pop	r17
 c70:	0f 91       	pop	r16
 c72:	ff 90       	pop	r15
 c74:	ef 90       	pop	r14
 c76:	df 90       	pop	r13
 c78:	cf 90       	pop	r12
 c7a:	bf 90       	pop	r11
 c7c:	af 90       	pop	r10
 c7e:	9f 90       	pop	r9
 c80:	8f 90       	pop	r8
 c82:	7f 90       	pop	r7
 c84:	6f 90       	pop	r6
 c86:	5f 90       	pop	r5
 c88:	4f 90       	pop	r4
 c8a:	3f 90       	pop	r3
 c8c:	2f 90       	pop	r2
 c8e:	08 95       	ret

00000c90 <strnlen_P>:
 c90:	fc 01       	movw	r30, r24
 c92:	05 90       	lpm	r0, Z+
 c94:	61 50       	subi	r22, 0x01	; 1
 c96:	70 40       	sbci	r23, 0x00	; 0
 c98:	01 10       	cpse	r0, r1
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <strnlen_P+0x2>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	8e 0f       	add	r24, r30
 ca2:	9f 1f       	adc	r25, r31
 ca4:	08 95       	ret

00000ca6 <strnlen>:
 ca6:	fc 01       	movw	r30, r24
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 90       	ld	r0, Z+
 cae:	01 10       	cpse	r0, r1
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <strnlen+0x2>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	8e 0f       	add	r24, r30
 cb8:	9f 1f       	adc	r25, r31
 cba:	08 95       	ret

00000cbc <fputc>:
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	fb 01       	movw	r30, r22
 cc6:	23 81       	ldd	r18, Z+3	; 0x03
 cc8:	21 fd       	sbrc	r18, 1
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <fputc+0x16>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	9f ef       	ldi	r25, 0xFF	; 255
 cd0:	2c c0       	rjmp	.+88     	; 0xd2a <fputc+0x6e>
 cd2:	22 ff       	sbrs	r18, 2
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <fputc+0x46>
 cd6:	46 81       	ldd	r20, Z+6	; 0x06
 cd8:	57 81       	ldd	r21, Z+7	; 0x07
 cda:	24 81       	ldd	r18, Z+4	; 0x04
 cdc:	35 81       	ldd	r19, Z+5	; 0x05
 cde:	42 17       	cp	r20, r18
 ce0:	53 07       	cpc	r21, r19
 ce2:	44 f4       	brge	.+16     	; 0xcf4 <fputc+0x38>
 ce4:	a0 81       	ld	r26, Z
 ce6:	b1 81       	ldd	r27, Z+1	; 0x01
 ce8:	9d 01       	movw	r18, r26
 cea:	2f 5f       	subi	r18, 0xFF	; 255
 cec:	3f 4f       	sbci	r19, 0xFF	; 255
 cee:	31 83       	std	Z+1, r19	; 0x01
 cf0:	20 83       	st	Z, r18
 cf2:	8c 93       	st	X, r24
 cf4:	26 81       	ldd	r18, Z+6	; 0x06
 cf6:	37 81       	ldd	r19, Z+7	; 0x07
 cf8:	2f 5f       	subi	r18, 0xFF	; 255
 cfa:	3f 4f       	sbci	r19, 0xFF	; 255
 cfc:	37 83       	std	Z+7, r19	; 0x07
 cfe:	26 83       	std	Z+6, r18	; 0x06
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <fputc+0x6e>
 d02:	8b 01       	movw	r16, r22
 d04:	ec 01       	movw	r28, r24
 d06:	fb 01       	movw	r30, r22
 d08:	00 84       	ldd	r0, Z+8	; 0x08
 d0a:	f1 85       	ldd	r31, Z+9	; 0x09
 d0c:	e0 2d       	mov	r30, r0
 d0e:	19 95       	eicall
 d10:	89 2b       	or	r24, r25
 d12:	e1 f6       	brne	.-72     	; 0xccc <fputc+0x10>
 d14:	d8 01       	movw	r26, r16
 d16:	16 96       	adiw	r26, 0x06	; 6
 d18:	8d 91       	ld	r24, X+
 d1a:	9c 91       	ld	r25, X
 d1c:	17 97       	sbiw	r26, 0x07	; 7
 d1e:	01 96       	adiw	r24, 0x01	; 1
 d20:	17 96       	adiw	r26, 0x07	; 7
 d22:	9c 93       	st	X, r25
 d24:	8e 93       	st	-X, r24
 d26:	16 97       	sbiw	r26, 0x06	; 6
 d28:	ce 01       	movw	r24, r28
 d2a:	df 91       	pop	r29
 d2c:	cf 91       	pop	r28
 d2e:	1f 91       	pop	r17
 d30:	0f 91       	pop	r16
 d32:	08 95       	ret

00000d34 <__ultoa_invert>:
 d34:	fa 01       	movw	r30, r20
 d36:	aa 27       	eor	r26, r26
 d38:	28 30       	cpi	r18, 0x08	; 8
 d3a:	51 f1       	breq	.+84     	; 0xd90 <__ultoa_invert+0x5c>
 d3c:	20 31       	cpi	r18, 0x10	; 16
 d3e:	81 f1       	breq	.+96     	; 0xda0 <__ultoa_invert+0x6c>
 d40:	e8 94       	clt
 d42:	6f 93       	push	r22
 d44:	6e 7f       	andi	r22, 0xFE	; 254
 d46:	6e 5f       	subi	r22, 0xFE	; 254
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	af 4f       	sbci	r26, 0xFF	; 255
 d50:	b1 e0       	ldi	r27, 0x01	; 1
 d52:	3e d0       	rcall	.+124    	; 0xdd0 <__ultoa_invert+0x9c>
 d54:	b4 e0       	ldi	r27, 0x04	; 4
 d56:	3c d0       	rcall	.+120    	; 0xdd0 <__ultoa_invert+0x9c>
 d58:	67 0f       	add	r22, r23
 d5a:	78 1f       	adc	r23, r24
 d5c:	89 1f       	adc	r24, r25
 d5e:	9a 1f       	adc	r25, r26
 d60:	a1 1d       	adc	r26, r1
 d62:	68 0f       	add	r22, r24
 d64:	79 1f       	adc	r23, r25
 d66:	8a 1f       	adc	r24, r26
 d68:	91 1d       	adc	r25, r1
 d6a:	a1 1d       	adc	r26, r1
 d6c:	6a 0f       	add	r22, r26
 d6e:	71 1d       	adc	r23, r1
 d70:	81 1d       	adc	r24, r1
 d72:	91 1d       	adc	r25, r1
 d74:	a1 1d       	adc	r26, r1
 d76:	20 d0       	rcall	.+64     	; 0xdb8 <__ultoa_invert+0x84>
 d78:	09 f4       	brne	.+2      	; 0xd7c <__ultoa_invert+0x48>
 d7a:	68 94       	set
 d7c:	3f 91       	pop	r19
 d7e:	2a e0       	ldi	r18, 0x0A	; 10
 d80:	26 9f       	mul	r18, r22
 d82:	11 24       	eor	r1, r1
 d84:	30 19       	sub	r19, r0
 d86:	30 5d       	subi	r19, 0xD0	; 208
 d88:	31 93       	st	Z+, r19
 d8a:	de f6       	brtc	.-74     	; 0xd42 <__ultoa_invert+0xe>
 d8c:	cf 01       	movw	r24, r30
 d8e:	08 95       	ret
 d90:	46 2f       	mov	r20, r22
 d92:	47 70       	andi	r20, 0x07	; 7
 d94:	40 5d       	subi	r20, 0xD0	; 208
 d96:	41 93       	st	Z+, r20
 d98:	b3 e0       	ldi	r27, 0x03	; 3
 d9a:	0f d0       	rcall	.+30     	; 0xdba <__ultoa_invert+0x86>
 d9c:	c9 f7       	brne	.-14     	; 0xd90 <__ultoa_invert+0x5c>
 d9e:	f6 cf       	rjmp	.-20     	; 0xd8c <__ultoa_invert+0x58>
 da0:	46 2f       	mov	r20, r22
 da2:	4f 70       	andi	r20, 0x0F	; 15
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	4a 33       	cpi	r20, 0x3A	; 58
 da8:	18 f0       	brcs	.+6      	; 0xdb0 <__ultoa_invert+0x7c>
 daa:	49 5d       	subi	r20, 0xD9	; 217
 dac:	31 fd       	sbrc	r19, 1
 dae:	40 52       	subi	r20, 0x20	; 32
 db0:	41 93       	st	Z+, r20
 db2:	02 d0       	rcall	.+4      	; 0xdb8 <__ultoa_invert+0x84>
 db4:	a9 f7       	brne	.-22     	; 0xda0 <__ultoa_invert+0x6c>
 db6:	ea cf       	rjmp	.-44     	; 0xd8c <__ultoa_invert+0x58>
 db8:	b4 e0       	ldi	r27, 0x04	; 4
 dba:	a6 95       	lsr	r26
 dbc:	97 95       	ror	r25
 dbe:	87 95       	ror	r24
 dc0:	77 95       	ror	r23
 dc2:	67 95       	ror	r22
 dc4:	ba 95       	dec	r27
 dc6:	c9 f7       	brne	.-14     	; 0xdba <__ultoa_invert+0x86>
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	61 05       	cpc	r22, r1
 dcc:	71 05       	cpc	r23, r1
 dce:	08 95       	ret
 dd0:	9b 01       	movw	r18, r22
 dd2:	ac 01       	movw	r20, r24
 dd4:	0a 2e       	mov	r0, r26
 dd6:	06 94       	lsr	r0
 dd8:	57 95       	ror	r21
 dda:	47 95       	ror	r20
 ddc:	37 95       	ror	r19
 dde:	27 95       	ror	r18
 de0:	ba 95       	dec	r27
 de2:	c9 f7       	brne	.-14     	; 0xdd6 <__ultoa_invert+0xa2>
 de4:	62 0f       	add	r22, r18
 de6:	73 1f       	adc	r23, r19
 de8:	84 1f       	adc	r24, r20
 dea:	95 1f       	adc	r25, r21
 dec:	a0 1d       	adc	r26, r0
 dee:	08 95       	ret

00000df0 <_exit>:
 df0:	f8 94       	cli

00000df2 <__stop_program>:
 df2:	ff cf       	rjmp	.-2      	; 0xdf2 <__stop_program>
