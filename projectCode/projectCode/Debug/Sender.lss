
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800200  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800454  00800454  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6e  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001139  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079d  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000917  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064a  00000000  00000000  000047ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c1       	rjmp	.+648    	; 0x29e <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e8       	ldi	r30, 0x8E	; 142
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 35       	cpi	r26, 0x56	; 86
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	b4 c1       	rjmp	.+872    	; 0x48a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

#define INTERRUPT_PIN INT4_vect
volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	68 97       	sbiw	r28, 0x18	; 24
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 138:	ea e6       	ldi	r30, 0x6A	; 106
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 142:	8d b3       	in	r24, 0x1d	; 29
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8d bb       	out	0x1d, r24	; 29

	sei();
 148:	78 94       	sei
	
	// SODA dataCollector;
	// dataCollector.setInterval(1);
	// dataCollector.start();
	UART uart;
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	bc d0       	rcall	.+376    	; 0x2c8 <_ZN4UARTC1Ev>
	uart.transmitString("Menu:\r\n");
 150:	62 ec       	ldi	r22, 0xC2	; 194
 152:	73 e0       	ldi	r23, 0x03	; 3
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	c7 d0       	rcall	.+398    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("o - Aaben vindue\r\n");
 15a:	6a ec       	ldi	r22, 0xCA	; 202
 15c:	73 e0       	ldi	r23, 0x03	; 3
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	c2 d0       	rcall	.+388    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("c - Luk vindue\r\n");
 164:	6d ed       	ldi	r22, 0xDD	; 221
 166:	73 e0       	ldi	r23, 0x03	; 3
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	bd d0       	rcall	.+378    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("h - Halvt aabent\r\n");
 16e:	6e ee       	ldi	r22, 0xEE	; 238
 170:	73 e0       	ldi	r23, 0x03	; 3
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	b8 d0       	rcall	.+368    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("m - Denne menu\r\n");
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	74 e0       	ldi	r23, 0x04	; 4
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	b3 d0       	rcall	.+358    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
	
	X10Sender sender;
 182:	ce 01       	movw	r24, r28
 184:	02 96       	adiw	r24, 0x02	; 2
 186:	c9 d0       	rcall	.+402    	; 0x31a <_ZN9X10SenderC1Ev>
 188:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t windowAddress[4] = {0,0,0,1};
 18a:	1e 8a       	std	Y+22, r1	; 0x16
 18c:	1f 8a       	std	Y+23, r1	; 0x17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	88 8f       	std	Y+24, r24	; 0x18
	
	char recievedChar;
	while(true)
	{
		if (!sender.dataReady()) {
 192:	ce 01       	movw	r24, r28
 194:	02 96       	adiw	r24, 0x02	; 2
 196:	de d0       	rcall	.+444    	; 0x354 <_ZN9X10Sender9dataReadyEv>
 198:	81 11       	cpse	r24, r1
 19a:	53 c0       	rjmp	.+166    	; 0x242 <main+0x11e>
			uart.transmitString("\r\n\nKlar til næste kommando");
 19c:	62 e1       	ldi	r22, 0x12	; 18
 19e:	74 e0       	ldi	r23, 0x04	; 4
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 d0       	rcall	.+322    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
 1a6:	ce 01       	movw	r24, r28
			recievedChar = uart.recieve();
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	b0 d0       	rcall	.+352    	; 0x30c <_ZN4UART7recieveEv>
 1ac:	88 36       	cpi	r24, 0x68	; 104
 1ae:	19 f1       	breq	.+70     	; 0x1f6 <main+0xd2>
			switch (recievedChar)
 1b0:	18 f4       	brcc	.+6      	; 0x1b8 <main+0x94>
 1b2:	83 36       	cpi	r24, 0x63	; 99
 1b4:	99 f0       	breq	.+38     	; 0x1dc <main+0xb8>
 1b6:	45 c0       	rjmp	.+138    	; 0x242 <main+0x11e>
 1b8:	8d 36       	cpi	r24, 0x6D	; 109
 1ba:	51 f1       	breq	.+84     	; 0x210 <main+0xec>
 1bc:	8f 36       	cpi	r24, 0x6F	; 111
 1be:	09 f0       	breq	.+2      	; 0x1c2 <main+0x9e>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <main+0x11e>
 1c2:	6d e2       	ldi	r22, 0x2D	; 45
			{
				case 'o':
				{
					uart.transmitString("Sender O\r\n");
 1c4:	74 e0       	ldi	r23, 0x04	; 4
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	8e d0       	rcall	.+284    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
 1cc:	ae 01       	movw	r20, r28
					sender.sendData('O', windowAddress);
 1ce:	4b 5e       	subi	r20, 0xEB	; 235
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	6f e4       	ldi	r22, 0x4F	; 79
 1d4:	ce 01       	movw	r24, r28
 1d6:	02 96       	adiw	r24, 0x02	; 2
 1d8:	13 d1       	rcall	.+550    	; 0x400 <_ZN9X10Sender8sendDataEcPh>
 1da:	33 c0       	rjmp	.+102    	; 0x242 <main+0x11e>
				}
				break;
				case 'c':
				{
					uart.transmitString("Sender C\r\n");
 1dc:	68 e3       	ldi	r22, 0x38	; 56
 1de:	74 e0       	ldi	r23, 0x04	; 4
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	81 d0       	rcall	.+258    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
					sender.sendData('C', windowAddress);
 1e6:	ae 01       	movw	r20, r28
 1e8:	4b 5e       	subi	r20, 0xEB	; 235
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	63 e4       	ldi	r22, 0x43	; 67
 1ee:	ce 01       	movw	r24, r28
 1f0:	02 96       	adiw	r24, 0x02	; 2
 1f2:	06 d1       	rcall	.+524    	; 0x400 <_ZN9X10Sender8sendDataEcPh>
				}
				break;
 1f4:	26 c0       	rjmp	.+76     	; 0x242 <main+0x11e>
				case 'h':
				{
					uart.transmitString("Sender H\r\n");
 1f6:	63 e4       	ldi	r22, 0x43	; 67
 1f8:	74 e0       	ldi	r23, 0x04	; 4
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	74 d0       	rcall	.+232    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
					sender.sendData('H', windowAddress);
 200:	ae 01       	movw	r20, r28
 202:	4b 5e       	subi	r20, 0xEB	; 235
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	68 e4       	ldi	r22, 0x48	; 72
 208:	ce 01       	movw	r24, r28
 20a:	02 96       	adiw	r24, 0x02	; 2
 20c:	f9 d0       	rcall	.+498    	; 0x400 <_ZN9X10Sender8sendDataEcPh>
				}
				break;
 20e:	19 c0       	rjmp	.+50     	; 0x242 <main+0x11e>
				case 'm':
				{
					uart.transmitString("Menu:\r\n");
 210:	62 ec       	ldi	r22, 0xC2	; 194
 212:	73 e0       	ldi	r23, 0x03	; 3
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	67 d0       	rcall	.+206    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
					uart.transmitString("o - Aaben vindue\r\n");
 21a:	6a ec       	ldi	r22, 0xCA	; 202
 21c:	73 e0       	ldi	r23, 0x03	; 3
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	62 d0       	rcall	.+196    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
					uart.transmitString("c - Luk vindue\r\n");
 224:	6d ed       	ldi	r22, 0xDD	; 221
 226:	73 e0       	ldi	r23, 0x03	; 3
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	5d d0       	rcall	.+186    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
 22e:	6e ee       	ldi	r22, 0xEE	; 238
					uart.transmitString("h - Halvt aabent\r\n");
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	58 d0       	rcall	.+176    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
 238:	61 e0       	ldi	r22, 0x01	; 1
					uart.transmitString("m - Denne menu\r\n");
 23a:	74 e0       	ldi	r23, 0x04	; 4
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	53 d0       	rcall	.+166    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
				}
				break;
			}	
		}
		
		if (interruptFlag == 1) {
 242:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__data_end>
 246:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__data_end+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <main+0x12c>
 24e:	a1 cf       	rjmp	.-190    	; 0x192 <main+0x6e>
			uint8_t nextBit = sender.getNextBit();
 250:	ce 01       	movw	r24, r28
 252:	02 96       	adiw	r24, 0x02	; 2
 254:	82 d0       	rcall	.+260    	; 0x35a <_ZN9X10Sender10getNextBitEv>
			
			if (nextBit == 1) {
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 f4       	brne	.+36     	; 0x27e <main+0x15a>
				uart.transmitString("1 ");
 25a:	6e e4       	ldi	r22, 0x4E	; 78
 25c:	74 e0       	ldi	r23, 0x04	; 4
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	42 d0       	rcall	.+132    	; 0x2e8 <_ZN4UART14transmitStringEPKc>
				sender.enableTransmitter();
 264:	ce 01       	movw	r24, r28
 266:	02 96       	adiw	r24, 0x02	; 2
 268:	87 d0       	rcall	.+270    	; 0x378 <_ZN9X10Sender17enableTransmitterEv>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x14a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x150>
 274:	00 00       	nop
 276:	ce 01       	movw	r24, r28
				_delay_ms(1);
				sender.disableTransmitter();
 278:	02 96       	adiw	r24, 0x02	; 2
 27a:	88 d0       	rcall	.+272    	; 0x38c <_ZN9X10Sender18disableTransmitterEv>
 27c:	0b c0       	rjmp	.+22     	; 0x294 <main+0x170>
 27e:	61 e5       	ldi	r22, 0x51	; 81
 280:	74 e0       	ldi	r23, 0x04	; 4
				} else {
				uart.transmitString("0 ");
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	30 d0       	rcall	.+96     	; 0x2e8 <_ZN4UART14transmitStringEPKc>
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x168>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x16e>
 292:	00 00       	nop
 294:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__data_end+0x1>
 298:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <__data_end>
				_delay_ms(1);
			}
			
			interruptFlag = 0;
 29c:	7a cf       	rjmp	.-268    	; 0x192 <main+0x6e>

0000029e <__vector_5>:
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
		}
		
	}
}

ISR(INTERRUPT_PIN) {
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
	interruptFlag = 1;	
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__data_end+0x1>
 2b4:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__data_end>
	EIFR = 0x00;
 2b8:	1c ba       	out	0x1c, r1	; 28
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 2c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 2cc:	87 e6       	ldi	r24, 0x67	; 103
 2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2d8:	08 95       	ret

000002da <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 2da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2de:	85 ff       	sbrs	r24, 5
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 2e2:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2e6:	08 95       	ret

000002e8 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
 2f2:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 2f4:	68 81       	ld	r22, Y
 2f6:	66 23       	and	r22, r22
 2f8:	21 f0       	breq	.+8      	; 0x302 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 2fa:	c8 01       	movw	r24, r16
 2fc:	ee df       	rcall	.-36     	; 0x2da <_ZN4UART8transmitEh>
		str++;
 2fe:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 300:	f9 cf       	rjmp	.-14     	; 0x2f4 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <_ZN4UART7recieveEv>:

unsigned char UART::recieve() 
{
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 30c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 310:	88 23       	and	r24, r24
 312:	e4 f7       	brge	.-8      	; 0x30c <_ZN4UART7recieveEv>
	
	// Get and return received data from buffer
	return UDR0;
 314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 318:	08 95       	ret

0000031a <_ZN9X10SenderC1Ev>:
	// Pin som der bliver sendt 120kHz på.
	txPin_ = DDRB;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 31a:	dc 01       	movw	r26, r24
 31c:	51 96       	adiw	r26, 0x11	; 17
 31e:	1c 92       	st	X, r1
 320:	51 97       	sbiw	r26, 0x11	; 17
 322:	1c 92       	st	X, r1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	98 30       	cpi	r25, 0x08	; 8
 328:	30 f4       	brcc	.+12     	; 0x336 <_ZN9X10SenderC1Ev+0x1c>
 32a:	fd 01       	movw	r30, r26
 32c:	e9 0f       	add	r30, r25
 32e:	f1 1d       	adc	r31, r1
 330:	11 82       	std	Z+1, r1	; 0x01
 332:	9f 5f       	subi	r25, 0xFF	; 255
 334:	f8 cf       	rjmp	.-16     	; 0x326 <_ZN9X10SenderC1Ev+0xc>
 336:	14 b8       	out	0x04, r1	; 4
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 344:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 348:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 34c:	84 b1       	in	r24, 0x04	; 4
 34e:	52 96       	adiw	r26, 0x12	; 18
 350:	8c 93       	st	X, r24
 352:	08 95       	ret

00000354 <_ZN9X10Sender9dataReadyEv>:
}

bool X10Sender::dataReady()
{
  	return dataReady_;
}
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	08 95       	ret

0000035a <_ZN9X10Sender10getNextBitEv>:

uint8_t X10Sender::getNextBit()
{
 35a:	fc 01       	movw	r30, r24
	// Hvis vi er nået til enden af vores dataArray_ så sender vi bare 0'ere for resten.
	if (currentBit_ >= 16) {
 35c:	91 89       	ldd	r25, Z+17	; 0x11
 35e:	90 31       	cpi	r25, 0x10	; 16
 360:	18 f0       	brcs	.+6      	; 0x368 <_ZN9X10Sender10getNextBitEv+0xe>
		dataReady_ = false;
 362:	10 82       	st	Z, r1
		return 0;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
	}
	
	uint8_t nextBit = dataArray_[currentBit_];
 368:	df 01       	movw	r26, r30
 36a:	a9 0f       	add	r26, r25
 36c:	b1 1d       	adc	r27, r1
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	8c 91       	ld	r24, X
	currentBit_++;
 372:	9f 5f       	subi	r25, 0xFF	; 255
 374:	91 8b       	std	Z+17, r25	; 0x11
	return nextBit;
}
 376:	08 95       	ret

00000378 <_ZN9X10Sender17enableTransmitterEv>:

void X10Sender::enableTransmitter() {
	txPin_ = 0b00100000; // Sætter PORTB (OC1A el. PB5) til output.
 378:	20 e2       	ldi	r18, 0x20	; 32
 37a:	fc 01       	movw	r30, r24
 37c:	22 8b       	std	Z+18, r18	; 0x12
	TRANSMITTER_TIMER = 66; // 120Khz
 37e:	82 e4       	ldi	r24, 0x42	; 66
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 386:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 38a:	08 95       	ret

0000038c <_ZN9X10Sender18disableTransmitterEv>:
}

void X10Sender::disableTransmitter() {
	txPin_ = 0b00000000; // Slukker PORTB.
 38c:	fc 01       	movw	r30, r24
 38e:	12 8a       	std	Z+18, r1	; 0x12
	TRANSMITTER_TIMER = 0;
 390:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 394:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 398:	08 95       	ret

0000039a <_ZN9X10Sender10encodeDataEc>:
}

void X10Sender::encodeData(char command)
{	
 39a:	dc 01       	movw	r26, r24
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 28; i++)
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	9c 31       	cpi	r25, 0x1C	; 28
 3a0:	70 f5       	brcc	.+92     	; 0x3fe <_ZN9X10Sender10encodeDataEc+0x64>
	{
		if (asciiLookup_[i].character == command) {
 3a2:	29 2f       	mov	r18, r25
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	41 e1       	ldi	r20, 0x11	; 17
 3a8:	42 9f       	mul	r20, r18
 3aa:	f0 01       	movw	r30, r0
 3ac:	43 9f       	mul	r20, r19
 3ae:	f0 0d       	add	r31, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	e0 50       	subi	r30, 0x00	; 0
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	40 81       	ld	r20, Z
 3b8:	46 13       	cpse	r20, r22
 3ba:	1f c0       	rjmp	.+62     	; 0x3fa <_ZN9X10Sender10encodeDataEc+0x60>
 3bc:	88 e0       	ldi	r24, 0x08	; 8
			
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 3be:	80 31       	cpi	r24, 0x10	; 16
 3c0:	b8 f4       	brcc	.+46     	; 0x3f0 <_ZN9X10Sender10encodeDataEc+0x56>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
 3c2:	68 2f       	mov	r22, r24
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	fb 01       	movw	r30, r22
 3c8:	38 97       	sbiw	r30, 0x08	; 8
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	91 e1       	ldi	r25, 0x11	; 17
 3d0:	92 9f       	mul	r25, r18
 3d2:	a0 01       	movw	r20, r0
 3d4:	93 9f       	mul	r25, r19
 3d6:	50 0d       	add	r21, r0
 3d8:	11 24       	eor	r1, r1
 3da:	e4 0f       	add	r30, r20
 3dc:	f5 1f       	adc	r31, r21
 3de:	e0 50       	subi	r30, 0x00	; 0
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	fd 01       	movw	r30, r26
 3e6:	e6 0f       	add	r30, r22
 3e8:	f7 1f       	adc	r31, r23
 3ea:	91 83       	std	Z+1, r25	; 0x01
	for (uint8_t i = 0; i < 28; i++)
	{
		if (asciiLookup_[i].character == command) {
			
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	e7 cf       	rjmp	.-50     	; 0x3be <_ZN9X10Sender10encodeDataEc+0x24>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
			}
			
			// sætter dataReady og currentbit til standard værdier.
			dataReady_ = true;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	8c 93       	st	X, r24
			currentBit_ = 0;
 3f4:	51 96       	adiw	r26, 0x11	; 17
 3f6:	1c 92       	st	X, r1
			
			return;
 3f8:	08 95       	ret
void X10Sender::encodeData(char command)
{	
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 28; i++)
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	d0 cf       	rjmp	.-96     	; 0x39e <_ZN9X10Sender10encodeDataEc+0x4>
 3fe:	08 95       	ret

00000400 <_ZN9X10Sender8sendDataEcPh>:
// 	delete[] dataArray_;
// 	delete[] asciiLookup_;
} //~X10Sender

void X10Sender::sendData(char command, uint8_t address[4])
{
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	28 97       	sbiw	r28, 0x08	; 8
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	8c 01       	movw	r16, r24
	if (dataReady_) return; // Hvis der allerede er data, skal der ikke sendes en kommando.
 41a:	dc 01       	movw	r26, r24
 41c:	8c 91       	ld	r24, X
 41e:	81 11       	cpse	r24, r1
 420:	29 c0       	rjmp	.+82     	; 0x474 <_ZN9X10Sender8sendDataEcPh+0x74>
	const int PROTOCOL_START = 0;
	// de efterfølgende 4 bits er adressen på enheden vi vil snakke til.
	const int ADDRESS_START = 4;
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	ea eb       	ldi	r30, 0xBA	; 186
 426:	f3 e0       	ldi	r31, 0x03	; 3
 428:	de 01       	movw	r26, r28
 42a:	11 96       	adiw	r26, 0x01	; 1
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <_ZN9X10Sender8sendDataEcPh+0x2c>
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	94 30       	cpi	r25, 0x04	; 4
 438:	d8 f4       	brcc	.+54     	; 0x470 <_ZN9X10Sender8sendDataEcPh+0x70>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
 43a:	29 2f       	mov	r18, r25
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	a1 e0       	ldi	r26, 0x01	; 1
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	ac 0f       	add	r26, r28
 44a:	bd 1f       	adc	r27, r29
 44c:	ea 0f       	add	r30, r26
 44e:	fb 1f       	adc	r31, r27
 450:	80 81       	ld	r24, Z
 452:	f8 01       	movw	r30, r16
 454:	e2 0f       	add	r30, r18
 456:	f3 1f       	adc	r31, r19
 458:	81 83       	std	Z+1, r24	; 0x01
		dataArray_[i + ADDRESS_START] = address[i];
 45a:	f9 01       	movw	r30, r18
 45c:	34 96       	adiw	r30, 0x04	; 4
 45e:	da 01       	movw	r26, r20
 460:	a2 0f       	add	r26, r18
 462:	b3 1f       	adc	r27, r19
 464:	8c 91       	ld	r24, X
 466:	e0 0f       	add	r30, r16
 468:	f1 1f       	adc	r31, r17
 46a:	81 83       	std	Z+1, r24	; 0x01
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 46c:	9f 5f       	subi	r25, 0xFF	; 255
 46e:	e3 cf       	rjmp	.-58     	; 0x436 <_ZN9X10Sender8sendDataEcPh+0x36>
 470:	c8 01       	movw	r24, r16
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
		dataArray_[i + ADDRESS_START] = address[i];
	}
	
	this->encodeData(command);
 472:	93 df       	rcall	.-218    	; 0x39a <_ZN9X10Sender10encodeDataEc>
}
 474:	28 96       	adiw	r28, 0x08	; 8
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	cd bf       	out	0x3d, r28	; 61
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
