
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800200  00000b34  00000bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080045a  0080045a  00000e22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f9f  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001360  00000000  00000000  00002f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  000042cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00004c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9e  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d7  00000000  00000000  00005946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c1       	rjmp	.+706    	; 0x2d8 <__vector_5>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
  2e:	00 00       	nop
  30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
  66:	00 00       	nop
  68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
  76:	00 00       	nop
  78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
  7e:	00 00       	nop
  80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
  82:	00 00       	nop
  84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
  8e:	00 00       	nop
  90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
  92:	00 00       	nop
  94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
  96:	00 00       	nop
  98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
  be:	00 00       	nop
  c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
  da:	00 00       	nop
  dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
  de:	00 00       	nop
  e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	81 01       	movw	r16, r2

000000e6 <__ctors_end>:
  e6:	87 01       	movw	r16, r14

000000e8 <__dtors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d1 e2       	ldi	r29, 0x21	; 33
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
  f8:	14 e0       	ldi	r17, 0x04	; 4
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	e4 e3       	ldi	r30, 0x34	; 52
 100:	fb e0       	ldi	r31, 0x0B	; 11
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	aa 35       	cpi	r26, 0x5A	; 90
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	aa e5       	ldi	r26, 0x5A	; 90
 116:	b4 e0       	ldi	r27, 0x04	; 4
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	af 38       	cpi	r26, 0x8F	; 143
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c3 e7       	ldi	r28, 0x73	; 115
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__do_global_ctors+0x14>
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	01 09       	sbc	r16, r1
 130:	80 2f       	mov	r24, r16
 132:	fe 01       	movw	r30, r28
 134:	0b d2       	rcall	.+1046   	; 0x54c <__tablejump2__>
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	d1 07       	cpc	r29, r17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 07       	cpc	r16, r24
 13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xa>
 140:	36 d0       	rcall	.+108    	; 0x1ae <main>
 142:	e7 c4       	rjmp	.+2510   	; 0xb12 <__do_global_dtors>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <_ZN10ControllerC1Ev>:

// default constructor
Controller::Controller()
{
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 146:	ea e6       	ldi	r30, 0x6A	; 106
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	83 60       	ori	r24, 0x03	; 3
 14e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 150:	8d b3       	in	r24, 0x1d	; 29
 152:	80 61       	ori	r24, 0x10	; 16
 154:	8d bb       	out	0x1d, r24	; 29
	sei();
 156:	78 94       	sei
	
	DDRB |= (1 << PB5);
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	84 b9       	out	0x04, r24	; 4
 15e:	08 95       	ret

00000160 <_Z41__static_initialization_and_destruction_0ii>:
}

ISR(INT4_vect) {
	interruptFlag = 1;
	EIFR = 0x00;
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	8b 01       	movw	r16, r22
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	79 f4       	brne	.+30     	; 0x18e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 170:	6f 3f       	cpi	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	61 f4       	brne	.+24     	; 0x18e <_Z41__static_initialization_and_destruction_0ii+0x2e>

// #include "Utils/SODA.h"

#include "Controller.h"

X10Sender sender;
 176:	8c e5       	ldi	r24, 0x5C	; 92
 178:	94 e0       	ldi	r25, 0x04	; 4
 17a:	f1 d0       	rcall	.+482    	; 0x35e <_ZN9X10SenderC1Ev>
reciever window = {sender, {0,0,0,1}};
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	ec e5       	ldi	r30, 0x5C	; 92
 180:	f4 e0       	ldi	r31, 0x04	; 4
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b2 e0       	ldi	r27, 0x02	; 2
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <_Z41__static_initialization_and_destruction_0ii+0x26>
 18e:	cd 2b       	or	r28, r29
 190:	49 f4       	brne	.+18     	; 0x1a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 192:	0f 3f       	cpi	r16, 0xFF	; 255
 194:	1f 4f       	sbci	r17, 0xFF	; 255
 196:	31 f4       	brne	.+12     	; 0x1a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
#include "Utils/I2C.h"
#include "Utils/SDC30.h"
#include "Utils/UART.h"
#include "Utils/X10Sender.h"

struct reciever {
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	f7 d0       	rcall	.+494    	; 0x38c <_ZN9X10SenderD1Ev>

// #include "Utils/SODA.h"

#include "Controller.h"

X10Sender sender;
 19e:	8c e5       	ldi	r24, 0x5C	; 92
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	f4 d0       	rcall	.+488    	; 0x38c <_ZN9X10SenderD1Ev>
}

ISR(INT4_vect) {
	interruptFlag = 1;
	EIFR = 0x00;
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <main>:


volatile int interruptFlag = 0;

int main(void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	c3 54       	subi	r28, 0x43	; 67
 1b8:	d1 09       	sbc	r29, r1
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	
	Controller controller;
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	be df       	rcall	.-132    	; 0x146 <_ZN10ControllerC1Ev>
	
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 1ca:	ea e6       	ldi	r30, 0x6A	; 106
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	83 60       	ori	r24, 0x03	; 3
 1d2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 1d4:	8d b3       	in	r24, 0x1d	; 29
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	8d bb       	out	0x1d, r24	; 29

	sei();
 1da:	78 94       	sei
	
	DDRB |= (1 << PB5);
 1dc:	84 b1       	in	r24, 0x04	; 4
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 1e2:	ce 01       	movw	r24, r28
 1e4:	02 96       	adiw	r24, 0x02	; 2
 1e6:	99 d0       	rcall	.+306    	; 0x31a <_ZN4UARTC1Ev>
	uart.transmitString("Menu:\r\n");
 1e8:	69 ef       	ldi	r22, 0xF9	; 249
 1ea:	73 e0       	ldi	r23, 0x03	; 3
 1ec:	ce 01       	movw	r24, r28
 1ee:	02 96       	adiw	r24, 0x02	; 2
 1f0:	a4 d0       	rcall	.+328    	; 0x33a <_ZN4UART14transmitStringEPKc>
	uart.transmitString("o - Aaben vindue\r\n");
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	74 e0       	ldi	r23, 0x04	; 4
 1f6:	ce 01       	movw	r24, r28
 1f8:	02 96       	adiw	r24, 0x02	; 2
 1fa:	9f d0       	rcall	.+318    	; 0x33a <_ZN4UART14transmitStringEPKc>
	uart.transmitString("c - Luk vindue\r\n");
 1fc:	64 e1       	ldi	r22, 0x14	; 20
 1fe:	74 e0       	ldi	r23, 0x04	; 4
 200:	ce 01       	movw	r24, r28
 202:	02 96       	adiw	r24, 0x02	; 2
 204:	9a d0       	rcall	.+308    	; 0x33a <_ZN4UART14transmitStringEPKc>
	uart.transmitString("h - Halvt aabent\r\n");
 206:	65 e2       	ldi	r22, 0x25	; 37
 208:	74 e0       	ldi	r23, 0x04	; 4
 20a:	ce 01       	movw	r24, r28
 20c:	02 96       	adiw	r24, 0x02	; 2
 20e:	95 d0       	rcall	.+298    	; 0x33a <_ZN4UART14transmitStringEPKc>
	uart.transmitString("m - Denne menu\r\n");
 210:	68 e3       	ldi	r22, 0x38	; 56
 212:	74 e0       	ldi	r23, 0x04	; 4
 214:	ce 01       	movw	r24, r28
 216:	02 96       	adiw	r24, 0x02	; 2
 218:	90 d0       	rcall	.+288    	; 0x33a <_ZN4UART14transmitStringEPKc>
	
	X10Sender sender;
 21a:	ce 01       	movw	r24, r28
 21c:	03 96       	adiw	r24, 0x03	; 3
 21e:	9f d0       	rcall	.+318    	; 0x35e <_ZN9X10SenderC1Ev>
 220:	1e aa       	std	Y+54, r1	; 0x36
	uint8_t windowAddress[4] = {0,0,0,1};
 222:	1f aa       	std	Y+55, r1	; 0x37
 224:	18 ae       	std	Y+56, r1	; 0x38
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	89 af       	std	Y+57, r24	; 0x39
 22a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	83 e2       	ldi	r24, 0x23	; 35
 22e:	94 ef       	ldi	r25, 0xF4	; 244
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x82>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x8c>
 23a:	00 00       	nop
	
	char recievedChar;
	char buffer[10];
	uint8_t sendtNum = 0;
 23c:	f1 2c       	mov	r15, r1
	
	_delay_ms(5000);
	
	while(true)
	{
		if (!sender.dataReady()) {
 23e:	ce 01       	movw	r24, r28
 240:	03 96       	adiw	r24, 0x03	; 3
 242:	a5 d0       	rcall	.+330    	; 0x38e <_ZN9X10Sender9dataReadyEv>
 244:	81 11       	cpse	r24, r1
 246:	28 c0       	rjmp	.+80     	; 0x298 <main+0xea>
			sender.sendData('O', windowAddress);
 248:	ae 01       	movw	r20, r28
 24a:	4a 5c       	subi	r20, 0xCA	; 202
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	6f e4       	ldi	r22, 0x4F	; 79
 250:	ce 01       	movw	r24, r28
 252:	03 96       	adiw	r24, 0x03	; 3
 254:	34 d1       	rcall	.+616    	; 0x4be <_ZN9X10Sender8sendDataEcPh>
 256:	f3 94       	inc	r15
			sendtNum++;
 258:	1f 92       	push	r1
			
			sprintf(buffer, "%i", sendtNum);
 25a:	ff 92       	push	r15
 25c:	89 e4       	ldi	r24, 0x49	; 73
 25e:	94 e0       	ldi	r25, 0x04	; 4
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	8e 01       	movw	r16, r28
 266:	06 5c       	subi	r16, 0xC6	; 198
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	1f 93       	push	r17
 26c:	0f 93       	push	r16
			uart.transmitString("Sendt: ");
 26e:	76 d1       	rcall	.+748    	; 0x55c <sprintf>
 270:	6c e4       	ldi	r22, 0x4C	; 76
 272:	74 e0       	ldi	r23, 0x04	; 4
 274:	ce 01       	movw	r24, r28
 276:	02 96       	adiw	r24, 0x02	; 2
			uart.transmitString(buffer);
 278:	60 d0       	rcall	.+192    	; 0x33a <_ZN4UART14transmitStringEPKc>
 27a:	b8 01       	movw	r22, r16
 27c:	ce 01       	movw	r24, r28
 27e:	02 96       	adiw	r24, 0x02	; 2
 280:	5c d0       	rcall	.+184    	; 0x33a <_ZN4UART14transmitStringEPKc>
			uart.transmitString("\r\n");
 282:	6e ef       	ldi	r22, 0xFE	; 254
 284:	73 e0       	ldi	r23, 0x03	; 3
 286:	ce 01       	movw	r24, r28
 288:	02 96       	adiw	r24, 0x02	; 2
 28a:	57 d0       	rcall	.+174    	; 0x33a <_ZN4UART14transmitStringEPKc>
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
				}
				break;
			}*/
		}
		
		if (interruptFlag == 1) {
 298:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <__data_end>
 29c:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <__data_end+0x1>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	69 f6       	brne	.-102    	; 0x23e <main+0x90>
			uint8_t nextBit = sender.getNextBit();
 2a4:	ce 01       	movw	r24, r28
 2a6:	03 96       	adiw	r24, 0x03	; 3
 2a8:	75 d0       	rcall	.+234    	; 0x394 <_ZN9X10Sender10getNextBitEv>
 2aa:	18 2f       	mov	r17, r24

			sender.transmit(nextBit);
 2ac:	68 2f       	mov	r22, r24
 2ae:	ce 01       	movw	r24, r28
 2b0:	03 96       	adiw	r24, 0x03	; 3
 2b2:	91 d0       	rcall	.+290    	; 0x3d6 <_ZN9X10Sender8transmitEh>
			
			if (nextBit == 1) {
 2b4:	11 30       	cpi	r17, 0x01	; 1
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <main+0x116>
				uart.transmitString("1 ");
 2b8:	64 e5       	ldi	r22, 0x54	; 84
 2ba:	74 e0       	ldi	r23, 0x04	; 4
 2bc:	ce 01       	movw	r24, r28
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	3c d0       	rcall	.+120    	; 0x33a <_ZN4UART14transmitStringEPKc>
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <main+0x120>
 2c4:	67 e5       	ldi	r22, 0x57	; 87
				} else {
				uart.transmitString("0 ");
 2c6:	74 e0       	ldi	r23, 0x04	; 4
 2c8:	ce 01       	movw	r24, r28
 2ca:	02 96       	adiw	r24, 0x02	; 2
 2cc:	36 d0       	rcall	.+108    	; 0x33a <_ZN4UART14transmitStringEPKc>
 2ce:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <__data_end+0x1>
			}
			
			interruptFlag = 0;
 2d2:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <__data_end>
 2d6:	b3 cf       	rjmp	.-154    	; 0x23e <main+0x90>

000002d8 <__vector_5>:
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
		}
		
	}
}

ISR(INT4_vect) {
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
	interruptFlag = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <__data_end+0x1>
 2ee:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <__data_end>
	EIFR = 0x00;
 2f2:	1c ba       	out	0x1c, r1	; 28
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <_GLOBAL__sub_I_sender>:
 302:	6f ef       	ldi	r22, 0xFF	; 255
 304:	7f ef       	ldi	r23, 0xFF	; 255
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2a cf       	rjmp	.-428    	; 0x160 <_Z41__static_initialization_and_destruction_0ii>
 30c:	08 95       	ret

0000030e <_GLOBAL__sub_D_sender>:
 30e:	6f ef       	ldi	r22, 0xFF	; 255
 310:	7f ef       	ldi	r23, 0xFF	; 255
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	24 cf       	rjmp	.-440    	; 0x160 <_Z41__static_initialization_and_destruction_0ii>
 318:	08 95       	ret

0000031a <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 31a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 31e:	87 e6       	ldi	r24, 0x67	; 103
 320:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 324:	88 e1       	ldi	r24, 0x18	; 24
 326:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 32a:	08 95       	ret

0000032c <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 32c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 330:	85 ff       	sbrs	r24, 5
 332:	fc cf       	rjmp	.-8      	; 0x32c <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 334:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 338:	08 95       	ret

0000033a <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	8c 01       	movw	r16, r24
 344:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 346:	68 81       	ld	r22, Y
 348:	66 23       	and	r22, r22
 34a:	21 f0       	breq	.+8      	; 0x354 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 34c:	c8 01       	movw	r24, r16
 34e:	ee df       	rcall	.-36     	; 0x32c <_ZN4UART8transmitEh>
		str++;
 350:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 352:	f9 cf       	rjmp	.-14     	; 0x346 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <_ZN9X10SenderC1Ev>:
#define F_CPU 16000000
#include <util/delay.h>
#include "X10Sender.h"

// default constructor
X10Sender::X10Sender()
 35e:	fc 01       	movw	r30, r24
{
	currentBit_ = 0;
 360:	11 aa       	std	Z+49, r1	; 0x31
	dataReady_ = false;
 362:	10 82       	st	Z, r1
	dataArray_[0] = 0;
 364:	11 82       	std	Z+1, r1	; 0x01
	dataArray_[1] = 0;
 366:	12 82       	std	Z+2, r1	; 0x02
	dataArray_[2] = 0;
 368:	13 82       	std	Z+3, r1	; 0x03
	dataArray_[3] = 0;
 36a:	14 82       	std	Z+4, r1	; 0x04
	dataArray_[4] = 0;
 36c:	15 82       	std	Z+5, r1	; 0x05
	dataArray_[5] = 0;
 36e:	16 82       	std	Z+6, r1	; 0x06
	dataArray_[6] = 0;
 370:	17 82       	std	Z+7, r1	; 0x07
	dataArray_[7] = 0;
 372:	10 86       	std	Z+8, r1	; 0x08
	
	// PORTB er output.
	DDRB = 0b00000000;
 374:	14 b8       	out	0x04, r1	; 4
	
	// Timer 1 til CTC mode.
	// Prescaler = 1
	// Toggle compare match.
	TRANSMITTER_TIMER_A = 0b01000000;
 376:	80 e4       	ldi	r24, 0x40	; 64
 378:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TRANSMITTER_TIMER_B = 0b00001001;
 37c:	89 e0       	ldi	r24, 0x09	; 9
 37e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	TRANSMITTER_TIMER = 0;
 382:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 386:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 38a:	08 95       	ret

0000038c <_ZN9X10SenderD1Ev>:
	// txPin_ = DDRB;
	// txPin_ = 0xFF;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 38c:	08 95       	ret

0000038e <_ZN9X10Sender9dataReadyEv>:
}

bool X10Sender::dataReady()
{
  	return dataReady_;
}
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z
 392:	08 95       	ret

00000394 <_ZN9X10Sender10getNextBitEv>:

uint8_t X10Sender::getNextBit()
{
 394:	fc 01       	movw	r30, r24
	// Hvis vi er nået til enden af vores dataArray_ så sender vi bare 0'ere for resten.
	if (currentBit_ >= 32 || dataReady_ == false) 
 396:	91 a9       	ldd	r25, Z+49	; 0x31
 398:	90 32       	cpi	r25, 0x20	; 32
 39a:	18 f4       	brcc	.+6      	; 0x3a2 <_ZN9X10Sender10getNextBitEv+0xe>
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <_ZN9X10Sender10getNextBitEv+0x14>
	{
		dataReady_ = false;
 3a2:	10 82       	st	Z, r1
		return 0;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
	}
	
	uint8_t nextBit = manchesterArray_[currentBit_];
 3a8:	df 01       	movw	r26, r30
 3aa:	a9 0f       	add	r26, r25
 3ac:	b1 1d       	adc	r27, r1
 3ae:	51 96       	adiw	r26, 0x11	; 17
 3b0:	8c 91       	ld	r24, X
	currentBit_++;
 3b2:	9f 5f       	subi	r25, 0xFF	; 255
 3b4:	91 ab       	std	Z+49, r25	; 0x31
	return nextBit;
}
 3b6:	08 95       	ret

000003b8 <_ZN9X10Sender17enableTransmitterEv>:

void X10Sender::enableTransmitter() 
{
	DDRB = 0b00100000; // Sætter PORTB (OC1A el. PB5) til output.
 3b8:	80 e2       	ldi	r24, 0x20	; 32
 3ba:	84 b9       	out	0x04, r24	; 4
	TRANSMITTER_TIMER = 66; // 120Khz
 3bc:	82 e4       	ldi	r24, 0x42	; 66
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3c8:	08 95       	ret

000003ca <_ZN9X10Sender18disableTransmitterEv>:
}

void X10Sender::disableTransmitter() 
{
	DDRB = 0b00000000; // Slukker PORTB.
 3ca:	14 b8       	out	0x04, r1	; 4
	TRANSMITTER_TIMER = 0;
 3cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3d4:	08 95       	ret

000003d6 <_ZN9X10Sender8transmitEh>:
}

void X10Sender::transmit(uint8_t bit)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
	if (bit == 1) {
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	51 f4       	brne	.+20     	; 0x3f4 <_ZN9X10Sender8transmitEh+0x1e>
		this->enableTransmitter();
 3e0:	eb df       	rcall	.-42     	; 0x3b8 <_ZN9X10Sender17enableTransmitterEv>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <_ZN9X10Sender8transmitEh+0x10>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <_ZN9X10Sender8transmitEh+0x16>
 3ec:	00 00       	nop
		_delay_ms(1);
		this->disableTransmitter();
 3ee:	ce 01       	movw	r24, r28
 3f0:	ec df       	rcall	.-40     	; 0x3ca <_ZN9X10Sender18disableTransmitterEv>
	} else {
		this->disableTransmitter();
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	ea df       	rcall	.-44     	; 0x3ca <_ZN9X10Sender18disableTransmitterEv>
 3f6:	8f e9       	ldi	r24, 0x9F	; 159
 3f8:	9f e0       	ldi	r25, 0x0F	; 15
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <_ZN9X10Sender8transmitEh+0x24>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
		_delay_ms(1);
	}
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <_ZN9X10Sender10encodeDataEc>:

void X10Sender::encodeData(char command)
{	
 408:	dc 01       	movw	r26, r24
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	9b 31       	cpi	r25, 0x1B	; 27
 40e:	70 f5       	brcc	.+92     	; 0x46c <_ZN9X10Sender10encodeDataEc+0x64>
	{
		if (asciiLookup_[i].character == command) 
 410:	29 2f       	mov	r18, r25
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	41 e1       	ldi	r20, 0x11	; 17
 416:	42 9f       	mul	r20, r18
 418:	f0 01       	movw	r30, r0
 41a:	43 9f       	mul	r20, r19
 41c:	f0 0d       	add	r31, r0
 41e:	11 24       	eor	r1, r1
 420:	e9 5c       	subi	r30, 0xC9	; 201
 422:	fd 4f       	sbci	r31, 0xFD	; 253
 424:	40 81       	ld	r20, Z
 426:	46 13       	cpse	r20, r22
 428:	1f c0       	rjmp	.+62     	; 0x468 <_ZN9X10Sender10encodeDataEc+0x60>
 42a:	88 e0       	ldi	r24, 0x08	; 8
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 42c:	80 31       	cpi	r24, 0x10	; 16
 42e:	b8 f4       	brcc	.+46     	; 0x45e <_ZN9X10Sender10encodeDataEc+0x56>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
 430:	68 2f       	mov	r22, r24
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	fb 01       	movw	r30, r22
 436:	38 97       	sbiw	r30, 0x08	; 8
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	91 e1       	ldi	r25, 0x11	; 17
 43e:	92 9f       	mul	r25, r18
 440:	a0 01       	movw	r20, r0
 442:	93 9f       	mul	r25, r19
 444:	50 0d       	add	r21, r0
 446:	11 24       	eor	r1, r1
 448:	e4 0f       	add	r30, r20
 44a:	f5 1f       	adc	r31, r21
 44c:	e9 5c       	subi	r30, 0xC9	; 201
 44e:	fd 4f       	sbci	r31, 0xFD	; 253
 450:	91 81       	ldd	r25, Z+1	; 0x01
 452:	fd 01       	movw	r30, r26
 454:	e6 0f       	add	r30, r22
 456:	f7 1f       	adc	r31, r23
 458:	91 83       	std	Z+1, r25	; 0x01
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
	{
		if (asciiLookup_[i].character == command) 
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 45a:	8f 5f       	subi	r24, 0xFF	; 255
 45c:	e7 cf       	rjmp	.-50     	; 0x42c <_ZN9X10Sender10encodeDataEc+0x24>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
			}
			
			// sætter dataReady og currentbit til standard værdier.
			dataReady_ = true;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	8c 93       	st	X, r24
			currentBit_ = 0;
 462:	d1 96       	adiw	r26, 0x31	; 49
 464:	1c 92       	st	X, r1
			
			return;
 466:	08 95       	ret
void X10Sender::encodeData(char command)
{	
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 468:	9f 5f       	subi	r25, 0xFF	; 255
 46a:	d0 cf       	rjmp	.-96     	; 0x40c <_ZN9X10Sender10encodeDataEc+0x4>
 46c:	08 95       	ret

0000046e <_ZN9X10Sender25translateToManchesterCodeEv>:
		}
	}
}

void X10Sender::translateToManchesterCode()
{
 46e:	bc 01       	movw	r22, r24
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 470:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
 472:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i< 16; i++)
 474:	90 31       	cpi	r25, 0x10	; 16
 476:	10 f5       	brcc	.+68     	; 0x4bc <_ZN9X10Sender25translateToManchesterCodeEv+0x4e>
	{
		manchesterArray_[manchesterI] = dataArray_[i] == 0 ? 1 : 0;
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	49 2f       	mov	r20, r25
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	fb 01       	movw	r30, r22
 482:	e4 0f       	add	r30, r20
 484:	f5 1f       	adc	r31, r21
 486:	e1 81       	ldd	r30, Z+1	; 0x01
 488:	e1 11       	cpse	r30, r1
 48a:	02 c0       	rjmp	.+4      	; 0x490 <_ZN9X10Sender25translateToManchesterCodeEv+0x22>
 48c:	a1 e0       	ldi	r26, 0x01	; 1
 48e:	01 c0       	rjmp	.+2      	; 0x492 <_ZN9X10Sender25translateToManchesterCodeEv+0x24>
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	fb 01       	movw	r30, r22
 494:	e2 0f       	add	r30, r18
 496:	f3 1f       	adc	r31, r19
 498:	a1 8b       	std	Z+17, r26	; 0x11
		manchesterArray_[manchesterI + 1] = dataArray_[i] == 0 ? 0 : 1;
 49a:	2f 5f       	subi	r18, 0xFF	; 255
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	fb 01       	movw	r30, r22
 4a0:	e4 0f       	add	r30, r20
 4a2:	f5 1f       	adc	r31, r21
 4a4:	41 81       	ldd	r20, Z+1	; 0x01
 4a6:	fb 01       	movw	r30, r22
 4a8:	e2 0f       	add	r30, r18
 4aa:	f3 1f       	adc	r31, r19
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	41 11       	cpse	r20, r1
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <_ZN9X10Sender25translateToManchesterCodeEv+0x46>
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	21 8b       	std	Z+17, r18	; 0x11
		
		manchesterI += 2;
 4b6:	8e 5f       	subi	r24, 0xFE	; 254
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 4b8:	9f 5f       	subi	r25, 0xFF	; 255
 4ba:	dc cf       	rjmp	.-72     	; 0x474 <_ZN9X10Sender25translateToManchesterCodeEv+0x6>
 4bc:	08 95       	ret

000004be <_ZN9X10Sender8sendDataEcPh>:
// 	delete[] dataArray_;
// 	delete[] asciiLookup_;
} //~X10Sender

void X10Sender::sendData(char command, uint8_t address[4])
{
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	28 97       	sbiw	r28, 0x08	; 8
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	8c 01       	movw	r16, r24
	if (dataReady_) return; // Hvis der allerede er data, skal der ikke sendes en kommando.
 4d8:	dc 01       	movw	r26, r24
 4da:	8c 91       	ld	r24, X
 4dc:	81 11       	cpse	r24, r1
 4de:	2b c0       	rjmp	.+86     	; 0x536 <_ZN9X10Sender8sendDataEcPh+0x78>
	const int PROTOCOL_START = 0;
	// de efterfølgende 4 bits er adressen på enheden vi vil snakke til.
	const int ADDRESS_START = 4;
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	e1 ef       	ldi	r30, 0xF1	; 241
 4e4:	f3 e0       	ldi	r31, 0x03	; 3
 4e6:	de 01       	movw	r26, r28
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	01 90       	ld	r0, Z+
 4ec:	0d 92       	st	X+, r0
 4ee:	8a 95       	dec	r24
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <_ZN9X10Sender8sendDataEcPh+0x2c>
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	94 30       	cpi	r25, 0x04	; 4
 4f6:	d8 f4       	brcc	.+54     	; 0x52e <_ZN9X10Sender8sendDataEcPh+0x70>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
 4f8:	29 2f       	mov	r18, r25
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	a1 e0       	ldi	r26, 0x01	; 1
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	ac 0f       	add	r26, r28
 508:	bd 1f       	adc	r27, r29
 50a:	ea 0f       	add	r30, r26
 50c:	fb 1f       	adc	r31, r27
 50e:	80 81       	ld	r24, Z
 510:	f8 01       	movw	r30, r16
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	81 83       	std	Z+1, r24	; 0x01
		dataArray_[i + ADDRESS_START] = address[i];
 518:	f9 01       	movw	r30, r18
 51a:	34 96       	adiw	r30, 0x04	; 4
 51c:	da 01       	movw	r26, r20
 51e:	a2 0f       	add	r26, r18
 520:	b3 1f       	adc	r27, r19
 522:	8c 91       	ld	r24, X
 524:	e0 0f       	add	r30, r16
 526:	f1 1f       	adc	r31, r17
 528:	81 83       	std	Z+1, r24	; 0x01
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	e3 cf       	rjmp	.-58     	; 0x4f4 <_ZN9X10Sender8sendDataEcPh+0x36>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
		dataArray_[i + ADDRESS_START] = address[i];
	}
	
	this->encodeData(command);
 52e:	c8 01       	movw	r24, r16
 530:	6b df       	rcall	.-298    	; 0x408 <_ZN9X10Sender10encodeDataEc>
	this->translateToManchesterCode();
 532:	c8 01       	movw	r24, r16
 534:	9c df       	rcall	.-200    	; 0x46e <_ZN9X10Sender25translateToManchesterCodeEv>
}
 536:	28 96       	adiw	r28, 0x08	; 8
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	08 95       	ret

0000054c <__tablejump2__>:
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	88 1f       	adc	r24, r24
 552:	8b bf       	out	0x3b, r24	; 59
 554:	07 90       	elpm	r0, Z+
 556:	f6 91       	elpm	r31, Z
 558:	e0 2d       	mov	r30, r0
 55a:	19 94       	eijmp

0000055c <sprintf>:
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	2e 97       	sbiw	r28, 0x0e	; 14
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	0e 89       	ldd	r16, Y+22	; 0x16
 576:	1f 89       	ldd	r17, Y+23	; 0x17
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	8c 83       	std	Y+4, r24	; 0x04
 57c:	1a 83       	std	Y+2, r17	; 0x02
 57e:	09 83       	std	Y+1, r16	; 0x01
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	9f e7       	ldi	r25, 0x7F	; 127
 584:	9e 83       	std	Y+6, r25	; 0x06
 586:	8d 83       	std	Y+5, r24	; 0x05
 588:	ae 01       	movw	r20, r28
 58a:	46 5e       	subi	r20, 0xE6	; 230
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	68 8d       	ldd	r22, Y+24	; 0x18
 590:	79 8d       	ldd	r23, Y+25	; 0x19
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	10 d0       	rcall	.+32     	; 0x5b8 <vfprintf>
 598:	ef 81       	ldd	r30, Y+7	; 0x07
 59a:	f8 85       	ldd	r31, Y+8	; 0x08
 59c:	e0 0f       	add	r30, r16
 59e:	f1 1f       	adc	r31, r17
 5a0:	10 82       	st	Z, r1
 5a2:	2e 96       	adiw	r28, 0x0e	; 14
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <vfprintf>:
 5b8:	2f 92       	push	r2
 5ba:	3f 92       	push	r3
 5bc:	4f 92       	push	r4
 5be:	5f 92       	push	r5
 5c0:	6f 92       	push	r6
 5c2:	7f 92       	push	r7
 5c4:	8f 92       	push	r8
 5c6:	9f 92       	push	r9
 5c8:	af 92       	push	r10
 5ca:	bf 92       	push	r11
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2b 97       	sbiw	r28, 0x0b	; 11
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	6c 01       	movw	r12, r24
 5ee:	7b 01       	movw	r14, r22
 5f0:	8a 01       	movw	r16, r20
 5f2:	fc 01       	movw	r30, r24
 5f4:	17 82       	std	Z+7, r1	; 0x07
 5f6:	16 82       	std	Z+6, r1	; 0x06
 5f8:	83 81       	ldd	r24, Z+3	; 0x03
 5fa:	81 ff       	sbrs	r24, 1
 5fc:	bf c1       	rjmp	.+894    	; 0x97c <vfprintf+0x3c4>
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	3c 01       	movw	r6, r24
 604:	f6 01       	movw	r30, r12
 606:	93 81       	ldd	r25, Z+3	; 0x03
 608:	f7 01       	movw	r30, r14
 60a:	93 fd       	sbrc	r25, 3
 60c:	85 91       	lpm	r24, Z+
 60e:	93 ff       	sbrs	r25, 3
 610:	81 91       	ld	r24, Z+
 612:	7f 01       	movw	r14, r30
 614:	88 23       	and	r24, r24
 616:	09 f4       	brne	.+2      	; 0x61a <vfprintf+0x62>
 618:	ad c1       	rjmp	.+858    	; 0x974 <vfprintf+0x3bc>
 61a:	85 32       	cpi	r24, 0x25	; 37
 61c:	39 f4       	brne	.+14     	; 0x62c <vfprintf+0x74>
 61e:	93 fd       	sbrc	r25, 3
 620:	85 91       	lpm	r24, Z+
 622:	93 ff       	sbrs	r25, 3
 624:	81 91       	ld	r24, Z+
 626:	7f 01       	movw	r14, r30
 628:	85 32       	cpi	r24, 0x25	; 37
 62a:	21 f4       	brne	.+8      	; 0x634 <vfprintf+0x7c>
 62c:	b6 01       	movw	r22, r12
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	d6 d1       	rcall	.+940    	; 0x9de <fputc>
 632:	e8 cf       	rjmp	.-48     	; 0x604 <vfprintf+0x4c>
 634:	91 2c       	mov	r9, r1
 636:	21 2c       	mov	r2, r1
 638:	31 2c       	mov	r3, r1
 63a:	ff e1       	ldi	r31, 0x1F	; 31
 63c:	f3 15       	cp	r31, r3
 63e:	d8 f0       	brcs	.+54     	; 0x676 <vfprintf+0xbe>
 640:	8b 32       	cpi	r24, 0x2B	; 43
 642:	79 f0       	breq	.+30     	; 0x662 <vfprintf+0xaa>
 644:	38 f4       	brcc	.+14     	; 0x654 <vfprintf+0x9c>
 646:	80 32       	cpi	r24, 0x20	; 32
 648:	79 f0       	breq	.+30     	; 0x668 <vfprintf+0xb0>
 64a:	83 32       	cpi	r24, 0x23	; 35
 64c:	a1 f4       	brne	.+40     	; 0x676 <vfprintf+0xbe>
 64e:	23 2d       	mov	r18, r3
 650:	20 61       	ori	r18, 0x10	; 16
 652:	1d c0       	rjmp	.+58     	; 0x68e <vfprintf+0xd6>
 654:	8d 32       	cpi	r24, 0x2D	; 45
 656:	61 f0       	breq	.+24     	; 0x670 <vfprintf+0xb8>
 658:	80 33       	cpi	r24, 0x30	; 48
 65a:	69 f4       	brne	.+26     	; 0x676 <vfprintf+0xbe>
 65c:	23 2d       	mov	r18, r3
 65e:	21 60       	ori	r18, 0x01	; 1
 660:	16 c0       	rjmp	.+44     	; 0x68e <vfprintf+0xd6>
 662:	83 2d       	mov	r24, r3
 664:	82 60       	ori	r24, 0x02	; 2
 666:	38 2e       	mov	r3, r24
 668:	e3 2d       	mov	r30, r3
 66a:	e4 60       	ori	r30, 0x04	; 4
 66c:	3e 2e       	mov	r3, r30
 66e:	2a c0       	rjmp	.+84     	; 0x6c4 <vfprintf+0x10c>
 670:	f3 2d       	mov	r31, r3
 672:	f8 60       	ori	r31, 0x08	; 8
 674:	1d c0       	rjmp	.+58     	; 0x6b0 <vfprintf+0xf8>
 676:	37 fc       	sbrc	r3, 7
 678:	2d c0       	rjmp	.+90     	; 0x6d4 <vfprintf+0x11c>
 67a:	20 ed       	ldi	r18, 0xD0	; 208
 67c:	28 0f       	add	r18, r24
 67e:	2a 30       	cpi	r18, 0x0A	; 10
 680:	40 f0       	brcs	.+16     	; 0x692 <vfprintf+0xda>
 682:	8e 32       	cpi	r24, 0x2E	; 46
 684:	b9 f4       	brne	.+46     	; 0x6b4 <vfprintf+0xfc>
 686:	36 fc       	sbrc	r3, 6
 688:	75 c1       	rjmp	.+746    	; 0x974 <vfprintf+0x3bc>
 68a:	23 2d       	mov	r18, r3
 68c:	20 64       	ori	r18, 0x40	; 64
 68e:	32 2e       	mov	r3, r18
 690:	19 c0       	rjmp	.+50     	; 0x6c4 <vfprintf+0x10c>
 692:	36 fe       	sbrs	r3, 6
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <vfprintf+0xea>
 696:	8a e0       	ldi	r24, 0x0A	; 10
 698:	98 9e       	mul	r9, r24
 69a:	20 0d       	add	r18, r0
 69c:	11 24       	eor	r1, r1
 69e:	92 2e       	mov	r9, r18
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <vfprintf+0x10c>
 6a2:	ea e0       	ldi	r30, 0x0A	; 10
 6a4:	2e 9e       	mul	r2, r30
 6a6:	20 0d       	add	r18, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	22 2e       	mov	r2, r18
 6ac:	f3 2d       	mov	r31, r3
 6ae:	f0 62       	ori	r31, 0x20	; 32
 6b0:	3f 2e       	mov	r3, r31
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <vfprintf+0x10c>
 6b4:	8c 36       	cpi	r24, 0x6C	; 108
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <vfprintf+0x108>
 6b8:	83 2d       	mov	r24, r3
 6ba:	80 68       	ori	r24, 0x80	; 128
 6bc:	38 2e       	mov	r3, r24
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <vfprintf+0x10c>
 6c0:	88 36       	cpi	r24, 0x68	; 104
 6c2:	41 f4       	brne	.+16     	; 0x6d4 <vfprintf+0x11c>
 6c4:	f7 01       	movw	r30, r14
 6c6:	93 fd       	sbrc	r25, 3
 6c8:	85 91       	lpm	r24, Z+
 6ca:	93 ff       	sbrs	r25, 3
 6cc:	81 91       	ld	r24, Z+
 6ce:	7f 01       	movw	r14, r30
 6d0:	81 11       	cpse	r24, r1
 6d2:	b3 cf       	rjmp	.-154    	; 0x63a <vfprintf+0x82>
 6d4:	98 2f       	mov	r25, r24
 6d6:	9f 7d       	andi	r25, 0xDF	; 223
 6d8:	95 54       	subi	r25, 0x45	; 69
 6da:	93 30       	cpi	r25, 0x03	; 3
 6dc:	28 f4       	brcc	.+10     	; 0x6e8 <vfprintf+0x130>
 6de:	0c 5f       	subi	r16, 0xFC	; 252
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	9f e3       	ldi	r25, 0x3F	; 63
 6e4:	99 83       	std	Y+1, r25	; 0x01
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <vfprintf+0x14a>
 6e8:	83 36       	cpi	r24, 0x63	; 99
 6ea:	31 f0       	breq	.+12     	; 0x6f8 <vfprintf+0x140>
 6ec:	83 37       	cpi	r24, 0x73	; 115
 6ee:	71 f0       	breq	.+28     	; 0x70c <vfprintf+0x154>
 6f0:	83 35       	cpi	r24, 0x53	; 83
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <vfprintf+0x13e>
 6f4:	55 c0       	rjmp	.+170    	; 0x7a0 <vfprintf+0x1e8>
 6f6:	20 c0       	rjmp	.+64     	; 0x738 <vfprintf+0x180>
 6f8:	f8 01       	movw	r30, r16
 6fa:	80 81       	ld	r24, Z
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	0e 5f       	subi	r16, 0xFE	; 254
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	88 24       	eor	r8, r8
 704:	83 94       	inc	r8
 706:	91 2c       	mov	r9, r1
 708:	53 01       	movw	r10, r6
 70a:	12 c0       	rjmp	.+36     	; 0x730 <vfprintf+0x178>
 70c:	28 01       	movw	r4, r16
 70e:	f2 e0       	ldi	r31, 0x02	; 2
 710:	4f 0e       	add	r4, r31
 712:	51 1c       	adc	r5, r1
 714:	f8 01       	movw	r30, r16
 716:	a0 80       	ld	r10, Z
 718:	b1 80       	ldd	r11, Z+1	; 0x01
 71a:	36 fe       	sbrs	r3, 6
 71c:	03 c0       	rjmp	.+6      	; 0x724 <vfprintf+0x16c>
 71e:	69 2d       	mov	r22, r9
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <vfprintf+0x170>
 724:	6f ef       	ldi	r22, 0xFF	; 255
 726:	7f ef       	ldi	r23, 0xFF	; 255
 728:	c5 01       	movw	r24, r10
 72a:	4e d1       	rcall	.+668    	; 0x9c8 <strnlen>
 72c:	4c 01       	movw	r8, r24
 72e:	82 01       	movw	r16, r4
 730:	f3 2d       	mov	r31, r3
 732:	ff 77       	andi	r31, 0x7F	; 127
 734:	3f 2e       	mov	r3, r31
 736:	15 c0       	rjmp	.+42     	; 0x762 <vfprintf+0x1aa>
 738:	28 01       	movw	r4, r16
 73a:	22 e0       	ldi	r18, 0x02	; 2
 73c:	42 0e       	add	r4, r18
 73e:	51 1c       	adc	r5, r1
 740:	f8 01       	movw	r30, r16
 742:	a0 80       	ld	r10, Z
 744:	b1 80       	ldd	r11, Z+1	; 0x01
 746:	36 fe       	sbrs	r3, 6
 748:	03 c0       	rjmp	.+6      	; 0x750 <vfprintf+0x198>
 74a:	69 2d       	mov	r22, r9
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x19c>
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	7f ef       	ldi	r23, 0xFF	; 255
 754:	c5 01       	movw	r24, r10
 756:	2d d1       	rcall	.+602    	; 0x9b2 <strnlen_P>
 758:	4c 01       	movw	r8, r24
 75a:	f3 2d       	mov	r31, r3
 75c:	f0 68       	ori	r31, 0x80	; 128
 75e:	3f 2e       	mov	r3, r31
 760:	82 01       	movw	r16, r4
 762:	33 fc       	sbrc	r3, 3
 764:	19 c0       	rjmp	.+50     	; 0x798 <vfprintf+0x1e0>
 766:	82 2d       	mov	r24, r2
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	88 16       	cp	r8, r24
 76c:	99 06       	cpc	r9, r25
 76e:	a0 f4       	brcc	.+40     	; 0x798 <vfprintf+0x1e0>
 770:	b6 01       	movw	r22, r12
 772:	80 e2       	ldi	r24, 0x20	; 32
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	33 d1       	rcall	.+614    	; 0x9de <fputc>
 778:	2a 94       	dec	r2
 77a:	f5 cf       	rjmp	.-22     	; 0x766 <vfprintf+0x1ae>
 77c:	f5 01       	movw	r30, r10
 77e:	37 fc       	sbrc	r3, 7
 780:	85 91       	lpm	r24, Z+
 782:	37 fe       	sbrs	r3, 7
 784:	81 91       	ld	r24, Z+
 786:	5f 01       	movw	r10, r30
 788:	b6 01       	movw	r22, r12
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	28 d1       	rcall	.+592    	; 0x9de <fputc>
 78e:	21 10       	cpse	r2, r1
 790:	2a 94       	dec	r2
 792:	21 e0       	ldi	r18, 0x01	; 1
 794:	82 1a       	sub	r8, r18
 796:	91 08       	sbc	r9, r1
 798:	81 14       	cp	r8, r1
 79a:	91 04       	cpc	r9, r1
 79c:	79 f7       	brne	.-34     	; 0x77c <vfprintf+0x1c4>
 79e:	e1 c0       	rjmp	.+450    	; 0x962 <vfprintf+0x3aa>
 7a0:	84 36       	cpi	r24, 0x64	; 100
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <vfprintf+0x1f0>
 7a4:	89 36       	cpi	r24, 0x69	; 105
 7a6:	39 f5       	brne	.+78     	; 0x7f6 <vfprintf+0x23e>
 7a8:	f8 01       	movw	r30, r16
 7aa:	37 fe       	sbrs	r3, 7
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <vfprintf+0x204>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	82 81       	ldd	r24, Z+2	; 0x02
 7b4:	93 81       	ldd	r25, Z+3	; 0x03
 7b6:	0c 5f       	subi	r16, 0xFC	; 252
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <vfprintf+0x214>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	07 2e       	mov	r0, r23
 7c2:	00 0c       	add	r0, r0
 7c4:	88 0b       	sbc	r24, r24
 7c6:	99 0b       	sbc	r25, r25
 7c8:	0e 5f       	subi	r16, 0xFE	; 254
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	f3 2d       	mov	r31, r3
 7ce:	ff 76       	andi	r31, 0x6F	; 111
 7d0:	3f 2e       	mov	r3, r31
 7d2:	97 ff       	sbrs	r25, 7
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x230>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	f0 68       	ori	r31, 0x80	; 128
 7e6:	3f 2e       	mov	r3, r31
 7e8:	2a e0       	ldi	r18, 0x0A	; 10
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	a3 01       	movw	r20, r6
 7ee:	33 d1       	rcall	.+614    	; 0xa56 <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	44 c0       	rjmp	.+136    	; 0x87e <vfprintf+0x2c6>
 7f6:	85 37       	cpi	r24, 0x75	; 117
 7f8:	31 f4       	brne	.+12     	; 0x806 <vfprintf+0x24e>
 7fa:	23 2d       	mov	r18, r3
 7fc:	2f 7e       	andi	r18, 0xEF	; 239
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	25 c0       	rjmp	.+74     	; 0x850 <vfprintf+0x298>
 806:	93 2d       	mov	r25, r3
 808:	99 7f       	andi	r25, 0xF9	; 249
 80a:	b9 2e       	mov	r11, r25
 80c:	8f 36       	cpi	r24, 0x6F	; 111
 80e:	c1 f0       	breq	.+48     	; 0x840 <vfprintf+0x288>
 810:	18 f4       	brcc	.+6      	; 0x818 <vfprintf+0x260>
 812:	88 35       	cpi	r24, 0x58	; 88
 814:	79 f0       	breq	.+30     	; 0x834 <vfprintf+0x27c>
 816:	ae c0       	rjmp	.+348    	; 0x974 <vfprintf+0x3bc>
 818:	80 37       	cpi	r24, 0x70	; 112
 81a:	19 f0       	breq	.+6      	; 0x822 <vfprintf+0x26a>
 81c:	88 37       	cpi	r24, 0x78	; 120
 81e:	21 f0       	breq	.+8      	; 0x828 <vfprintf+0x270>
 820:	a9 c0       	rjmp	.+338    	; 0x974 <vfprintf+0x3bc>
 822:	e9 2f       	mov	r30, r25
 824:	e0 61       	ori	r30, 0x10	; 16
 826:	be 2e       	mov	r11, r30
 828:	b4 fe       	sbrs	r11, 4
 82a:	0d c0       	rjmp	.+26     	; 0x846 <vfprintf+0x28e>
 82c:	fb 2d       	mov	r31, r11
 82e:	f4 60       	ori	r31, 0x04	; 4
 830:	bf 2e       	mov	r11, r31
 832:	09 c0       	rjmp	.+18     	; 0x846 <vfprintf+0x28e>
 834:	34 fe       	sbrs	r3, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <vfprintf+0x294>
 838:	29 2f       	mov	r18, r25
 83a:	26 60       	ori	r18, 0x06	; 6
 83c:	b2 2e       	mov	r11, r18
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0x294>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <vfprintf+0x298>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x298>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x2ac>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <vfprintf+0x2b8>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a3 01       	movw	r20, r6
 872:	f1 d0       	rcall	.+482    	; 0xa56 <__ultoa_invert>
 874:	88 2e       	mov	r8, r24
 876:	86 18       	sub	r8, r6
 878:	fb 2d       	mov	r31, r11
 87a:	ff 77       	andi	r31, 0x7F	; 127
 87c:	3f 2e       	mov	r3, r31
 87e:	36 fe       	sbrs	r3, 6
 880:	0d c0       	rjmp	.+26     	; 0x89c <vfprintf+0x2e4>
 882:	23 2d       	mov	r18, r3
 884:	2e 7f       	andi	r18, 0xFE	; 254
 886:	a2 2e       	mov	r10, r18
 888:	89 14       	cp	r8, r9
 88a:	58 f4       	brcc	.+22     	; 0x8a2 <vfprintf+0x2ea>
 88c:	34 fe       	sbrs	r3, 4
 88e:	0b c0       	rjmp	.+22     	; 0x8a6 <vfprintf+0x2ee>
 890:	32 fc       	sbrc	r3, 2
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <vfprintf+0x2ee>
 894:	83 2d       	mov	r24, r3
 896:	8e 7e       	andi	r24, 0xEE	; 238
 898:	a8 2e       	mov	r10, r24
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <vfprintf+0x2ee>
 89c:	b8 2c       	mov	r11, r8
 89e:	a3 2c       	mov	r10, r3
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <vfprintf+0x2f0>
 8a2:	b8 2c       	mov	r11, r8
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <vfprintf+0x2f0>
 8a6:	b9 2c       	mov	r11, r9
 8a8:	a4 fe       	sbrs	r10, 4
 8aa:	0f c0       	rjmp	.+30     	; 0x8ca <vfprintf+0x312>
 8ac:	fe 01       	movw	r30, r28
 8ae:	e8 0d       	add	r30, r8
 8b0:	f1 1d       	adc	r31, r1
 8b2:	80 81       	ld	r24, Z
 8b4:	80 33       	cpi	r24, 0x30	; 48
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <vfprintf+0x308>
 8b8:	9a 2d       	mov	r25, r10
 8ba:	99 7e       	andi	r25, 0xE9	; 233
 8bc:	a9 2e       	mov	r10, r25
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <vfprintf+0x31a>
 8c0:	a2 fe       	sbrs	r10, 2
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0x318>
 8c4:	b3 94       	inc	r11
 8c6:	b3 94       	inc	r11
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <vfprintf+0x31a>
 8ca:	8a 2d       	mov	r24, r10
 8cc:	86 78       	andi	r24, 0x86	; 134
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <vfprintf+0x31a>
 8d0:	b3 94       	inc	r11
 8d2:	a3 fc       	sbrc	r10, 3
 8d4:	10 c0       	rjmp	.+32     	; 0x8f6 <vfprintf+0x33e>
 8d6:	a0 fe       	sbrs	r10, 0
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0x32e>
 8da:	b2 14       	cp	r11, r2
 8dc:	80 f4       	brcc	.+32     	; 0x8fe <vfprintf+0x346>
 8de:	28 0c       	add	r2, r8
 8e0:	92 2c       	mov	r9, r2
 8e2:	9b 18       	sub	r9, r11
 8e4:	0d c0       	rjmp	.+26     	; 0x900 <vfprintf+0x348>
 8e6:	b2 14       	cp	r11, r2
 8e8:	58 f4       	brcc	.+22     	; 0x900 <vfprintf+0x348>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	76 d0       	rcall	.+236    	; 0x9de <fputc>
 8f2:	b3 94       	inc	r11
 8f4:	f8 cf       	rjmp	.-16     	; 0x8e6 <vfprintf+0x32e>
 8f6:	b2 14       	cp	r11, r2
 8f8:	18 f4       	brcc	.+6      	; 0x900 <vfprintf+0x348>
 8fa:	2b 18       	sub	r2, r11
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x34a>
 8fe:	98 2c       	mov	r9, r8
 900:	21 2c       	mov	r2, r1
 902:	a4 fe       	sbrs	r10, 4
 904:	0f c0       	rjmp	.+30     	; 0x924 <vfprintf+0x36c>
 906:	b6 01       	movw	r22, r12
 908:	80 e3       	ldi	r24, 0x30	; 48
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	68 d0       	rcall	.+208    	; 0x9de <fputc>
 90e:	a2 fe       	sbrs	r10, 2
 910:	16 c0       	rjmp	.+44     	; 0x93e <vfprintf+0x386>
 912:	a1 fc       	sbrc	r10, 1
 914:	03 c0       	rjmp	.+6      	; 0x91c <vfprintf+0x364>
 916:	88 e7       	ldi	r24, 0x78	; 120
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <vfprintf+0x368>
 91c:	88 e5       	ldi	r24, 0x58	; 88
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	b6 01       	movw	r22, r12
 922:	0c c0       	rjmp	.+24     	; 0x93c <vfprintf+0x384>
 924:	8a 2d       	mov	r24, r10
 926:	86 78       	andi	r24, 0x86	; 134
 928:	51 f0       	breq	.+20     	; 0x93e <vfprintf+0x386>
 92a:	a1 fe       	sbrs	r10, 1
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x37a>
 92e:	8b e2       	ldi	r24, 0x2B	; 43
 930:	01 c0       	rjmp	.+2      	; 0x934 <vfprintf+0x37c>
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	a7 fc       	sbrc	r10, 7
 936:	8d e2       	ldi	r24, 0x2D	; 45
 938:	b6 01       	movw	r22, r12
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	50 d0       	rcall	.+160    	; 0x9de <fputc>
 93e:	89 14       	cp	r8, r9
 940:	30 f4       	brcc	.+12     	; 0x94e <vfprintf+0x396>
 942:	b6 01       	movw	r22, r12
 944:	80 e3       	ldi	r24, 0x30	; 48
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	4a d0       	rcall	.+148    	; 0x9de <fputc>
 94a:	9a 94       	dec	r9
 94c:	f8 cf       	rjmp	.-16     	; 0x93e <vfprintf+0x386>
 94e:	8a 94       	dec	r8
 950:	f3 01       	movw	r30, r6
 952:	e8 0d       	add	r30, r8
 954:	f1 1d       	adc	r31, r1
 956:	80 81       	ld	r24, Z
 958:	b6 01       	movw	r22, r12
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	40 d0       	rcall	.+128    	; 0x9de <fputc>
 95e:	81 10       	cpse	r8, r1
 960:	f6 cf       	rjmp	.-20     	; 0x94e <vfprintf+0x396>
 962:	22 20       	and	r2, r2
 964:	09 f4       	brne	.+2      	; 0x968 <vfprintf+0x3b0>
 966:	4e ce       	rjmp	.-868    	; 0x604 <vfprintf+0x4c>
 968:	b6 01       	movw	r22, r12
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	37 d0       	rcall	.+110    	; 0x9de <fputc>
 970:	2a 94       	dec	r2
 972:	f7 cf       	rjmp	.-18     	; 0x962 <vfprintf+0x3aa>
 974:	f6 01       	movw	r30, r12
 976:	86 81       	ldd	r24, Z+6	; 0x06
 978:	97 81       	ldd	r25, Z+7	; 0x07
 97a:	02 c0       	rjmp	.+4      	; 0x980 <vfprintf+0x3c8>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	2b 96       	adiw	r28, 0x0b	; 11
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	ff 90       	pop	r15
 996:	ef 90       	pop	r14
 998:	df 90       	pop	r13
 99a:	cf 90       	pop	r12
 99c:	bf 90       	pop	r11
 99e:	af 90       	pop	r10
 9a0:	9f 90       	pop	r9
 9a2:	8f 90       	pop	r8
 9a4:	7f 90       	pop	r7
 9a6:	6f 90       	pop	r6
 9a8:	5f 90       	pop	r5
 9aa:	4f 90       	pop	r4
 9ac:	3f 90       	pop	r3
 9ae:	2f 90       	pop	r2
 9b0:	08 95       	ret

000009b2 <strnlen_P>:
 9b2:	fc 01       	movw	r30, r24
 9b4:	05 90       	lpm	r0, Z+
 9b6:	61 50       	subi	r22, 0x01	; 1
 9b8:	70 40       	sbci	r23, 0x00	; 0
 9ba:	01 10       	cpse	r0, r1
 9bc:	d8 f7       	brcc	.-10     	; 0x9b4 <strnlen_P+0x2>
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	8e 0f       	add	r24, r30
 9c4:	9f 1f       	adc	r25, r31
 9c6:	08 95       	ret

000009c8 <strnlen>:
 9c8:	fc 01       	movw	r30, r24
 9ca:	61 50       	subi	r22, 0x01	; 1
 9cc:	70 40       	sbci	r23, 0x00	; 0
 9ce:	01 90       	ld	r0, Z+
 9d0:	01 10       	cpse	r0, r1
 9d2:	d8 f7       	brcc	.-10     	; 0x9ca <strnlen+0x2>
 9d4:	80 95       	com	r24
 9d6:	90 95       	com	r25
 9d8:	8e 0f       	add	r24, r30
 9da:	9f 1f       	adc	r25, r31
 9dc:	08 95       	ret

000009de <fputc>:
 9de:	0f 93       	push	r16
 9e0:	1f 93       	push	r17
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	fb 01       	movw	r30, r22
 9e8:	23 81       	ldd	r18, Z+3	; 0x03
 9ea:	21 fd       	sbrc	r18, 1
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <fputc+0x16>
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	2c c0       	rjmp	.+88     	; 0xa4c <fputc+0x6e>
 9f4:	22 ff       	sbrs	r18, 2
 9f6:	16 c0       	rjmp	.+44     	; 0xa24 <fputc+0x46>
 9f8:	46 81       	ldd	r20, Z+6	; 0x06
 9fa:	57 81       	ldd	r21, Z+7	; 0x07
 9fc:	24 81       	ldd	r18, Z+4	; 0x04
 9fe:	35 81       	ldd	r19, Z+5	; 0x05
 a00:	42 17       	cp	r20, r18
 a02:	53 07       	cpc	r21, r19
 a04:	44 f4       	brge	.+16     	; 0xa16 <fputc+0x38>
 a06:	a0 81       	ld	r26, Z
 a08:	b1 81       	ldd	r27, Z+1	; 0x01
 a0a:	9d 01       	movw	r18, r26
 a0c:	2f 5f       	subi	r18, 0xFF	; 255
 a0e:	3f 4f       	sbci	r19, 0xFF	; 255
 a10:	31 83       	std	Z+1, r19	; 0x01
 a12:	20 83       	st	Z, r18
 a14:	8c 93       	st	X, r24
 a16:	26 81       	ldd	r18, Z+6	; 0x06
 a18:	37 81       	ldd	r19, Z+7	; 0x07
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	37 83       	std	Z+7, r19	; 0x07
 a20:	26 83       	std	Z+6, r18	; 0x06
 a22:	14 c0       	rjmp	.+40     	; 0xa4c <fputc+0x6e>
 a24:	8b 01       	movw	r16, r22
 a26:	ec 01       	movw	r28, r24
 a28:	fb 01       	movw	r30, r22
 a2a:	00 84       	ldd	r0, Z+8	; 0x08
 a2c:	f1 85       	ldd	r31, Z+9	; 0x09
 a2e:	e0 2d       	mov	r30, r0
 a30:	19 95       	eicall
 a32:	89 2b       	or	r24, r25
 a34:	e1 f6       	brne	.-72     	; 0x9ee <fputc+0x10>
 a36:	d8 01       	movw	r26, r16
 a38:	16 96       	adiw	r26, 0x06	; 6
 a3a:	8d 91       	ld	r24, X+
 a3c:	9c 91       	ld	r25, X
 a3e:	17 97       	sbiw	r26, 0x07	; 7
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	17 96       	adiw	r26, 0x07	; 7
 a44:	9c 93       	st	X, r25
 a46:	8e 93       	st	-X, r24
 a48:	16 97       	sbiw	r26, 0x06	; 6
 a4a:	ce 01       	movw	r24, r28
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <__ultoa_invert>:
 a56:	fa 01       	movw	r30, r20
 a58:	aa 27       	eor	r26, r26
 a5a:	28 30       	cpi	r18, 0x08	; 8
 a5c:	51 f1       	breq	.+84     	; 0xab2 <__ultoa_invert+0x5c>
 a5e:	20 31       	cpi	r18, 0x10	; 16
 a60:	81 f1       	breq	.+96     	; 0xac2 <__ultoa_invert+0x6c>
 a62:	e8 94       	clt
 a64:	6f 93       	push	r22
 a66:	6e 7f       	andi	r22, 0xFE	; 254
 a68:	6e 5f       	subi	r22, 0xFE	; 254
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	af 4f       	sbci	r26, 0xFF	; 255
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	3e d0       	rcall	.+124    	; 0xaf2 <__ultoa_invert+0x9c>
 a76:	b4 e0       	ldi	r27, 0x04	; 4
 a78:	3c d0       	rcall	.+120    	; 0xaf2 <__ultoa_invert+0x9c>
 a7a:	67 0f       	add	r22, r23
 a7c:	78 1f       	adc	r23, r24
 a7e:	89 1f       	adc	r24, r25
 a80:	9a 1f       	adc	r25, r26
 a82:	a1 1d       	adc	r26, r1
 a84:	68 0f       	add	r22, r24
 a86:	79 1f       	adc	r23, r25
 a88:	8a 1f       	adc	r24, r26
 a8a:	91 1d       	adc	r25, r1
 a8c:	a1 1d       	adc	r26, r1
 a8e:	6a 0f       	add	r22, r26
 a90:	71 1d       	adc	r23, r1
 a92:	81 1d       	adc	r24, r1
 a94:	91 1d       	adc	r25, r1
 a96:	a1 1d       	adc	r26, r1
 a98:	20 d0       	rcall	.+64     	; 0xada <__ultoa_invert+0x84>
 a9a:	09 f4       	brne	.+2      	; 0xa9e <__ultoa_invert+0x48>
 a9c:	68 94       	set
 a9e:	3f 91       	pop	r19
 aa0:	2a e0       	ldi	r18, 0x0A	; 10
 aa2:	26 9f       	mul	r18, r22
 aa4:	11 24       	eor	r1, r1
 aa6:	30 19       	sub	r19, r0
 aa8:	30 5d       	subi	r19, 0xD0	; 208
 aaa:	31 93       	st	Z+, r19
 aac:	de f6       	brtc	.-74     	; 0xa64 <__ultoa_invert+0xe>
 aae:	cf 01       	movw	r24, r30
 ab0:	08 95       	ret
 ab2:	46 2f       	mov	r20, r22
 ab4:	47 70       	andi	r20, 0x07	; 7
 ab6:	40 5d       	subi	r20, 0xD0	; 208
 ab8:	41 93       	st	Z+, r20
 aba:	b3 e0       	ldi	r27, 0x03	; 3
 abc:	0f d0       	rcall	.+30     	; 0xadc <__ultoa_invert+0x86>
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x5c>
 ac0:	f6 cf       	rjmp	.-20     	; 0xaae <__ultoa_invert+0x58>
 ac2:	46 2f       	mov	r20, r22
 ac4:	4f 70       	andi	r20, 0x0F	; 15
 ac6:	40 5d       	subi	r20, 0xD0	; 208
 ac8:	4a 33       	cpi	r20, 0x3A	; 58
 aca:	18 f0       	brcs	.+6      	; 0xad2 <__ultoa_invert+0x7c>
 acc:	49 5d       	subi	r20, 0xD9	; 217
 ace:	31 fd       	sbrc	r19, 1
 ad0:	40 52       	subi	r20, 0x20	; 32
 ad2:	41 93       	st	Z+, r20
 ad4:	02 d0       	rcall	.+4      	; 0xada <__ultoa_invert+0x84>
 ad6:	a9 f7       	brne	.-22     	; 0xac2 <__ultoa_invert+0x6c>
 ad8:	ea cf       	rjmp	.-44     	; 0xaae <__ultoa_invert+0x58>
 ada:	b4 e0       	ldi	r27, 0x04	; 4
 adc:	a6 95       	lsr	r26
 ade:	97 95       	ror	r25
 ae0:	87 95       	ror	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0x86>
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	61 05       	cpc	r22, r1
 aee:	71 05       	cpc	r23, r1
 af0:	08 95       	ret
 af2:	9b 01       	movw	r18, r22
 af4:	ac 01       	movw	r20, r24
 af6:	0a 2e       	mov	r0, r26
 af8:	06 94       	lsr	r0
 afa:	57 95       	ror	r21
 afc:	47 95       	ror	r20
 afe:	37 95       	ror	r19
 b00:	27 95       	ror	r18
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0xa2>
 b06:	62 0f       	add	r22, r18
 b08:	73 1f       	adc	r23, r19
 b0a:	84 1f       	adc	r24, r20
 b0c:	95 1f       	adc	r25, r21
 b0e:	a0 1d       	adc	r26, r0
 b10:	08 95       	ret

00000b12 <__do_global_dtors>:
 b12:	10 e0       	ldi	r17, 0x00	; 0
 b14:	c3 e7       	ldi	r28, 0x73	; 115
 b16:	d0 e0       	ldi	r29, 0x00	; 0
 b18:	00 e0       	ldi	r16, 0x00	; 0
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__do_global_dtors+0x14>
 b1c:	80 2f       	mov	r24, r16
 b1e:	fe 01       	movw	r30, r28
 b20:	15 dd       	rcall	.-1494   	; 0x54c <__tablejump2__>
 b22:	21 96       	adiw	r28, 0x01	; 1
 b24:	01 1d       	adc	r16, r1
 b26:	c4 37       	cpi	r28, 0x74	; 116
 b28:	d1 07       	cpc	r29, r17
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	08 07       	cpc	r16, r24
 b2e:	b1 f7       	brne	.-20     	; 0xb1c <__do_global_dtors+0xa>
 b30:	f8 94       	cli

00000b32 <__stop_program>:
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <__stop_program>
