
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800200  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800454  00800454  000008bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003434  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000183a  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e0d  00000000  00000000  0000573a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00006548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf9  00000000  00000000  00006950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb2  00000000  00000000  00007649  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000084fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	81 c1       	rjmp	.+770    	; 0x318 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ed       	ldi	r30, 0xD4	; 212
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 35       	cpi	r26, 0x56	; 86
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d9 d0       	rcall	.+434    	; 0x2d2 <main>
 120:	57 c2       	rjmp	.+1198   	; 0x5d0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN10ControllerC1Ev>:
* Author: madse
*/
#include "controller.h"

// default constructor
Controller::Controller()
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
: i2cDriver_(), sdc30Driver_(SLAVE_ADDRESS), uartDriver_(), x10Driver_(), recieverAddress_({0,0,0,1})
 12a:	0b d1       	rcall	.+534    	; 0x342 <_ZN3I2CC1Ev>
 12c:	61 e6       	ldi	r22, 0x61	; 97
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0d d1       	rcall	.+538    	; 0x34e <_ZN5SDC30C1Eh>
 134:	ce 01       	movw	r24, r28
 136:	41 96       	adiw	r24, 0x11	; 17
 138:	2c d1       	rcall	.+600    	; 0x392 <_ZN4UARTC1Ev>
 13a:	ce 01       	movw	r24, r28
 13c:	42 96       	adiw	r24, 0x12	; 18
 13e:	52 d1       	rcall	.+676    	; 0x3e4 <_ZN9X10SenderC1Ev>
 140:	fe 01       	movw	r30, r28
 142:	eb 5b       	subi	r30, 0xBB	; 187
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	10 82       	st	Z, r1
 148:	31 96       	adiw	r30, 0x01	; 1
 14a:	10 82       	st	Z, r1
 14c:	31 96       	adiw	r30, 0x01	; 1
 14e:	10 82       	st	Z, r1
 150:	c8 5b       	subi	r28, 0xB8	; 184
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	88 83       	st	Y, r24
{
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_ZN10Controller5startEb>:

void Controller::start(bool debug = false) // default debugmode er false
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 162:	ea e6       	ldi	r30, 0x6A	; 106
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	20 81       	ld	r18, Z
 168:	23 60       	ori	r18, 0x03	; 3
 16a:	20 83       	st	Z, r18
	EIMSK |= (1 << INT4);                 // Enable INT4
 16c:	2d b3       	in	r18, 0x1d	; 29
 16e:	20 61       	ori	r18, 0x10	; 16
 170:	2d bb       	out	0x1d, r18	; 29
	sei();
 172:	78 94       	sei
	
	// Tænder output PB5.
	DDRB |= (1 << PB5);
 174:	24 b1       	in	r18, 0x04	; 4
 176:	20 62       	ori	r18, 0x20	; 32
 178:	24 b9       	out	0x04, r18	; 4
	
	debug_ = debug;
 17a:	fc 01       	movw	r30, r24
 17c:	e7 5b       	subi	r30, 0xB7	; 183
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	60 83       	st	Z, r22
	if (debug_)
 182:	66 23       	and	r22, r22
 184:	b1 f0       	breq	.+44     	; 0x1b2 <_ZN10Controller5startEb+0x54>
	{
		uartDriver_.transmitString("Menu:\r\n");
 186:	ec 01       	movw	r28, r24
 188:	61 96       	adiw	r28, 0x11	; 17
 18a:	62 ec       	ldi	r22, 0xC2	; 194
 18c:	73 e0       	ldi	r23, 0x03	; 3
 18e:	ce 01       	movw	r24, r28
 190:	10 d1       	rcall	.+544    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("o - Aaben vindue\r\n");
 192:	6a ec       	ldi	r22, 0xCA	; 202
 194:	73 e0       	ldi	r23, 0x03	; 3
 196:	ce 01       	movw	r24, r28
 198:	0c d1       	rcall	.+536    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("c - Luk vindue\r\n");
 19a:	6d ed       	ldi	r22, 0xDD	; 221
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	ce 01       	movw	r24, r28
 1a0:	08 d1       	rcall	.+528    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("h - Halvt aabent\r\n");
 1a2:	6e ee       	ldi	r22, 0xEE	; 238
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	ce 01       	movw	r24, r28
 1a8:	04 d1       	rcall	.+520    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("m - Denne menu\r\n");
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	74 e0       	ldi	r23, 0x04	; 4
 1ae:	ce 01       	movw	r24, r28
 1b0:	00 d1       	rcall	.+512    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 1b2:	df 91       	pop	r29
	}
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <_ZN10Controller9debugModeEv>:
 1b8:	87 5b       	subi	r24, 0xB7	; 183
	
}

bool Controller::debugMode()
{
	return debug_;
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
}
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	08 95       	ret

000001c2 <_ZN10Controller9interruptEv>:
		uartDriver_.transmitString("m - Denne menu\r\n");
	}
}

void Controller::interrupt()
{
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
	uint8_t nextBit = x10Driver_.getNextBit();
 1ce:	8c 01       	movw	r16, r24
 1d0:	0e 5e       	subi	r16, 0xEE	; 238
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	c8 01       	movw	r24, r16
 1d6:	20 d1       	rcall	.+576    	; 0x418 <_ZN9X10Sender10getNextBitEv>
 1d8:	f8 2e       	mov	r15, r24

	x10Driver_.transmit(nextBit);
 1da:	68 2f       	mov	r22, r24
 1dc:	c8 01       	movw	r24, r16
 1de:	3d d1       	rcall	.+634    	; 0x45a <_ZN9X10Sender8transmitEh>
	
	// Hvis debugmode er falsk, så skal vi returnere.
	if (this->debugMode() == false) return;
 1e0:	ce 01       	movw	r24, r28
 1e2:	ea df       	rcall	.-44     	; 0x1b8 <_ZN10Controller9debugModeEv>
 1e4:	88 23       	and	r24, r24
 1e6:	71 f0       	breq	.+28     	; 0x204 <_ZN10Controller9interruptEv+0x42>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
	
	// ellers skriver vi til output hvad der er sendt.
	if (nextBit == 1) {
 1ea:	f8 12       	cpse	r15, r24
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <_ZN10Controller9interruptEv+0x38>
 1ee:	62 e1       	ldi	r22, 0x12	; 18
		uartDriver_.transmitString("1 ");
 1f0:	74 e0       	ldi	r23, 0x04	; 4
 1f2:	ce 01       	movw	r24, r28
 1f4:	41 96       	adiw	r24, 0x11	; 17
 1f6:	dd d0       	rcall	.+442    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <_ZN10Controller9interruptEv+0x42>
 1fa:	65 e1       	ldi	r22, 0x15	; 21
		} else {
		uartDriver_.transmitString("0 ");
 1fc:	74 e0       	ldi	r23, 0x04	; 4
 1fe:	ce 01       	movw	r24, r28
 200:	41 96       	adiw	r24, 0x11	; 17
 202:	d7 d0       	rcall	.+430    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 204:	df 91       	pop	r29
	}
	
}
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	08 95       	ret

00000210 <_ZN10Controller9debugMenuEv>:
 210:	ef 92       	push	r14
{
	return debug_;
}

void Controller::debugMenu()
{		
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	// Hvis debugmode er falsk, så skal vi returnere.
	if (this->debugMode() == false) return;
 21e:	cc df       	rcall	.-104    	; 0x1b8 <_ZN10Controller9debugModeEv>
 220:	88 23       	and	r24, r24
 222:	09 f4       	brne	.+2      	; 0x226 <_ZN10Controller9debugMenuEv+0x16>
 224:	4f c0       	rjmp	.+158    	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
	
	if (!x10Driver_.dataReady()) {
 226:	8e 01       	movw	r16, r28
 228:	0e 5e       	subi	r16, 0xEE	; 238
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	c8 01       	movw	r24, r16
 22e:	f1 d0       	rcall	.+482    	; 0x412 <_ZN9X10Sender9dataReadyEv>
 230:	81 11       	cpse	r24, r1
 232:	48 c0       	rjmp	.+144    	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
		x10Driver_.sendData('O', recieverAddress_);
 234:	7e 01       	movw	r14, r28
 236:	85 e4       	ldi	r24, 0x45	; 69
 238:	e8 0e       	add	r14, r24
 23a:	f1 1c       	adc	r15, r1
 23c:	a7 01       	movw	r20, r14
 23e:	6f e4       	ldi	r22, 0x4F	; 79
 240:	c8 01       	movw	r24, r16
 242:	7f d1       	rcall	.+766    	; 0x542 <_ZN9X10Sender8sendDataEcPh>
		
		uartDriver_.transmitString("\r\n\nKlar til næste kommando");
 244:	61 96       	adiw	r28, 0x11	; 17
 246:	68 e1       	ldi	r22, 0x18	; 24
 248:	74 e0       	ldi	r23, 0x04	; 4
 24a:	ce 01       	movw	r24, r28
		switch (uartDriver_.recieve())
 24c:	b2 d0       	rcall	.+356    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 24e:	ce 01       	movw	r24, r28
 250:	c2 d0       	rcall	.+388    	; 0x3d6 <_ZN4UART7recieveEv>
 252:	88 36       	cpi	r24, 0x68	; 104
 254:	d1 f0       	breq	.+52     	; 0x28a <_ZN10Controller9debugMenuEv+0x7a>
 256:	18 f4       	brcc	.+6      	; 0x25e <_ZN10Controller9debugMenuEv+0x4e>
 258:	83 36       	cpi	r24, 0x63	; 99
 25a:	71 f0       	breq	.+28     	; 0x278 <_ZN10Controller9debugMenuEv+0x68>
 25c:	33 c0       	rjmp	.+102    	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
 25e:	8d 36       	cpi	r24, 0x6D	; 109
 260:	e9 f0       	breq	.+58     	; 0x29c <_ZN10Controller9debugMenuEv+0x8c>
 262:	8f 36       	cpi	r24, 0x6F	; 111
		{
			case 'o':
			{
				uartDriver_.transmitString("Sender O\r\n");
 264:	79 f5       	brne	.+94     	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
 266:	63 e3       	ldi	r22, 0x33	; 51
 268:	74 e0       	ldi	r23, 0x04	; 4
 26a:	ce 01       	movw	r24, r28
				x10Driver_.sendData('O', recieverAddress_);
 26c:	a2 d0       	rcall	.+324    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 26e:	a7 01       	movw	r20, r14
 270:	6f e4       	ldi	r22, 0x4F	; 79
 272:	c8 01       	movw	r24, r16
			}
			break;
 274:	66 d1       	rcall	.+716    	; 0x542 <_ZN9X10Sender8sendDataEcPh>
			case 'c':
			{
				uartDriver_.transmitString("Sender C\r\n");
 276:	26 c0       	rjmp	.+76     	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
 278:	6e e3       	ldi	r22, 0x3E	; 62
 27a:	74 e0       	ldi	r23, 0x04	; 4
 27c:	ce 01       	movw	r24, r28
				x10Driver_.sendData('C', recieverAddress_);
 27e:	99 d0       	rcall	.+306    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 280:	a7 01       	movw	r20, r14
 282:	63 e4       	ldi	r22, 0x43	; 67
 284:	c8 01       	movw	r24, r16
			}
			break;
 286:	5d d1       	rcall	.+698    	; 0x542 <_ZN9X10Sender8sendDataEcPh>
			case 'h':
			{
				uartDriver_.transmitString("Sender H\r\n");
 288:	1d c0       	rjmp	.+58     	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
 28a:	69 e4       	ldi	r22, 0x49	; 73
 28c:	74 e0       	ldi	r23, 0x04	; 4
 28e:	ce 01       	movw	r24, r28
				x10Driver_.sendData('H', recieverAddress_);
 290:	90 d0       	rcall	.+288    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 292:	a7 01       	movw	r20, r14
 294:	68 e4       	ldi	r22, 0x48	; 72
 296:	c8 01       	movw	r24, r16
			}
			break;
 298:	54 d1       	rcall	.+680    	; 0x542 <_ZN9X10Sender8sendDataEcPh>
			case 'm':
			{
				uartDriver_.transmitString("Menu:\r\n");
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <_ZN10Controller9debugMenuEv+0xb4>
 29c:	62 ec       	ldi	r22, 0xC2	; 194
 29e:	73 e0       	ldi	r23, 0x03	; 3
 2a0:	ce 01       	movw	r24, r28
				uartDriver_.transmitString("o - Aaben vindue\r\n");
 2a2:	87 d0       	rcall	.+270    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 2a4:	6a ec       	ldi	r22, 0xCA	; 202
 2a6:	73 e0       	ldi	r23, 0x03	; 3
 2a8:	ce 01       	movw	r24, r28
				uartDriver_.transmitString("c - Luk vindue\r\n");
 2aa:	83 d0       	rcall	.+262    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 2ac:	6d ed       	ldi	r22, 0xDD	; 221
 2ae:	73 e0       	ldi	r23, 0x03	; 3
 2b0:	ce 01       	movw	r24, r28
 2b2:	7f d0       	rcall	.+254    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
				uartDriver_.transmitString("h - Halvt aabent\r\n");
 2b4:	6e ee       	ldi	r22, 0xEE	; 238
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	ce 01       	movw	r24, r28
 2ba:	7b d0       	rcall	.+246    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 2bc:	61 e0       	ldi	r22, 0x01	; 1
				uartDriver_.transmitString("m - Denne menu\r\n");
 2be:	74 e0       	ldi	r23, 0x04	; 4
 2c0:	ce 01       	movw	r24, r28
 2c2:	77 d0       	rcall	.+238    	; 0x3b2 <_ZN4UART14transmitStringEPKc>
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
			}
			break;
		}
	}
}
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <main>:
#define DEBUG_MODE true

volatile int interruptFlag = 0;

int main(void)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	ca 54       	subi	r28, 0x4A	; 74
 2dc:	d1 09       	sbc	r29, r1
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
	Controller controller;
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	1b df       	rcall	.-458    	; 0x124 <_ZN10ControllerC1Ev>
	
	controller.start(DEBUG_MODE);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	34 df       	rcall	.-408    	; 0x15e <_ZN10Controller5startEb>
	
	
	while(true)
	{	
		if (interruptFlag == 1) {
 2f6:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__data_end>
 2fa:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__data_end+0x1>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	d1 f7       	brne	.-12     	; 0x2f6 <main+0x24>
			controller.interrupt();
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	5d df       	rcall	.-326    	; 0x1c2 <_ZN10Controller9interruptEv>
			controller.debugMenu();
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	81 df       	rcall	.-254    	; 0x210 <_ZN10Controller9debugMenuEv>
 30e:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__data_end+0x1>
			interruptFlag = 0;
 312:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <__data_end>
 316:	ef cf       	rjmp	.-34     	; 0x2f6 <main+0x24>

00000318 <__vector_5>:
 318:	1f 92       	push	r1
		}
		
	}
}

ISR(INT4_vect) {
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
	interruptFlag = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__data_end+0x1>
 32e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__data_end>
	EIFR = 0x00;
 332:	1c ba       	out	0x1c, r1	; 28
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	// Set prescaler to 1
	TWSR = 0;
 342:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>

	// Set bit rate register (Baud rate)
	TWBR = ((F_CPU / 100000) - 16) / 2;
 346:	88 e4       	ldi	r24, 0x48	; 72
 348:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 34c:	08 95       	ret

0000034e <_ZN5SDC30C1Eh>:
#include <avr/io.h>
#include <util/delay.h>
#include "SDC30.h"


SDC30::SDC30(uint8_t address)
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	8c 01       	movw	r16, r24
 360:	f6 2e       	mov	r15, r22
 362:	0f 96       	adiw	r24, 0x0f	; 15
 364:	ee df       	rcall	.-36     	; 0x342 <_ZN3I2CC1Ev>
{
	address_ = address;
 366:	f8 01       	movw	r30, r16
 368:	f4 86       	std	Z+12, r15	; 0x0c
	I2C i2c;
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	e9 df       	rcall	.-46     	; 0x342 <_ZN3I2CC1Ev>
	i2c_ = i2c;
	
	writeAddress_ = address_ << 1; // 0 i LSB for at skrive til sensor.
 370:	f8 01       	movw	r30, r16
 372:	84 85       	ldd	r24, Z+12	; 0x0c
 374:	98 2f       	mov	r25, r24
 376:	99 0f       	add	r25, r25
 378:	95 87       	std	Z+13, r25	; 0x0d
	readAddress_ = (address_ << 1) | 0x01; // 1 i LSB for at læse;
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	81 60       	ori	r24, 0x01	; 1
 382:	86 87       	std	Z+14, r24	; 0x0e
	
} //SDC30
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	08 95       	ret

00000392 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 392:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 396:	87 e6       	ldi	r24, 0x67	; 103
 398:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 39c:	88 e1       	ldi	r24, 0x18	; 24
 39e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 3a2:	08 95       	ret

000003a4 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 3a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3a8:	85 ff       	sbrs	r24, 5
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 3ac:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3b0:	08 95       	ret

000003b2 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	8c 01       	movw	r16, r24
 3bc:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 3be:	68 81       	ld	r22, Y
 3c0:	66 23       	and	r22, r22
 3c2:	21 f0       	breq	.+8      	; 0x3cc <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 3c4:	c8 01       	movw	r24, r16
 3c6:	ee df       	rcall	.-36     	; 0x3a4 <_ZN4UART8transmitEh>
		str++;
 3c8:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 3ca:	f9 cf       	rjmp	.-14     	; 0x3be <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <_ZN4UART7recieveEv>:

unsigned char UART::recieve() 
{
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 3d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3da:	88 23       	and	r24, r24
 3dc:	e4 f7       	brge	.-8      	; 0x3d6 <_ZN4UART7recieveEv>
	
	// Get and return received data from buffer
	return UDR0;
 3de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 3e2:	08 95       	ret

000003e4 <_ZN9X10SenderC1Ev>:
	// txPin_ = DDRB;
	// txPin_ = 0xFF;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 3e4:	fc 01       	movw	r30, r24
 3e6:	11 aa       	std	Z+49, r1	; 0x31
 3e8:	10 82       	st	Z, r1
 3ea:	11 82       	std	Z+1, r1	; 0x01
 3ec:	12 82       	std	Z+2, r1	; 0x02
 3ee:	13 82       	std	Z+3, r1	; 0x03
 3f0:	14 82       	std	Z+4, r1	; 0x04
 3f2:	15 82       	std	Z+5, r1	; 0x05
 3f4:	16 82       	std	Z+6, r1	; 0x06
 3f6:	17 82       	std	Z+7, r1	; 0x07
 3f8:	10 86       	std	Z+8, r1	; 0x08
 3fa:	14 b8       	out	0x04, r1	; 4
 3fc:	80 e4       	ldi	r24, 0x40	; 64
 3fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 402:	89 e0       	ldi	r24, 0x09	; 9
 404:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 408:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 40c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 410:	08 95       	ret

00000412 <_ZN9X10Sender9dataReadyEv>:
}

bool X10Sender::dataReady()
{
  	return dataReady_;
}
 412:	fc 01       	movw	r30, r24
 414:	80 81       	ld	r24, Z
 416:	08 95       	ret

00000418 <_ZN9X10Sender10getNextBitEv>:

uint8_t X10Sender::getNextBit()
{
 418:	fc 01       	movw	r30, r24
	// Hvis vi er nået til enden af vores dataArray_ så sender vi bare 0'ere for resten.
	if (currentBit_ >= 32 || dataReady_ == false) 
 41a:	91 a9       	ldd	r25, Z+49	; 0x31
 41c:	90 32       	cpi	r25, 0x20	; 32
 41e:	18 f4       	brcc	.+6      	; 0x426 <_ZN9X10Sender10getNextBitEv+0xe>
 420:	80 81       	ld	r24, Z
 422:	81 11       	cpse	r24, r1
 424:	03 c0       	rjmp	.+6      	; 0x42c <_ZN9X10Sender10getNextBitEv+0x14>
	{
		dataReady_ = false;
 426:	10 82       	st	Z, r1
		return 0;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
	}
	
	uint8_t nextBit = manchesterArray_[currentBit_];
 42c:	df 01       	movw	r26, r30
 42e:	a9 0f       	add	r26, r25
 430:	b1 1d       	adc	r27, r1
 432:	51 96       	adiw	r26, 0x11	; 17
 434:	8c 91       	ld	r24, X
	currentBit_++;
 436:	9f 5f       	subi	r25, 0xFF	; 255
 438:	91 ab       	std	Z+49, r25	; 0x31
	return nextBit;
}
 43a:	08 95       	ret

0000043c <_ZN9X10Sender17enableTransmitterEv>:

void X10Sender::enableTransmitter() 
{
	DDRB = 0b00100000; // Sætter PORTB (OC1A el. PB5) til output.
 43c:	80 e2       	ldi	r24, 0x20	; 32
 43e:	84 b9       	out	0x04, r24	; 4
	TRANSMITTER_TIMER = 66; // 120Khz
 440:	82 e4       	ldi	r24, 0x42	; 66
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 448:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 44c:	08 95       	ret

0000044e <_ZN9X10Sender18disableTransmitterEv>:
}

void X10Sender::disableTransmitter() 
{
	DDRB = 0b00000000; // Slukker PORTB.
 44e:	14 b8       	out	0x04, r1	; 4
	TRANSMITTER_TIMER = 0;
 450:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 454:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 458:	08 95       	ret

0000045a <_ZN9X10Sender8transmitEh>:
}

void X10Sender::transmit(uint8_t bit)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
	if (bit == 1) {
 460:	61 30       	cpi	r22, 0x01	; 1
 462:	51 f4       	brne	.+20     	; 0x478 <_ZN9X10Sender8transmitEh+0x1e>
		this->enableTransmitter();
 464:	eb df       	rcall	.-42     	; 0x43c <_ZN9X10Sender17enableTransmitterEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <_ZN9X10Sender8transmitEh+0x10>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <_ZN9X10Sender8transmitEh+0x16>
 470:	00 00       	nop
		_delay_ms(1);
		this->disableTransmitter();
 472:	ce 01       	movw	r24, r28
 474:	ec df       	rcall	.-40     	; 0x44e <_ZN9X10Sender18disableTransmitterEv>
	} else {
		this->disableTransmitter();
 476:	07 c0       	rjmp	.+14     	; 0x486 <_ZN9X10Sender8transmitEh+0x2c>
 478:	ea df       	rcall	.-44     	; 0x44e <_ZN9X10Sender18disableTransmitterEv>
 47a:	8f e9       	ldi	r24, 0x9F	; 159
 47c:	9f e0       	ldi	r25, 0x0F	; 15
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <_ZN9X10Sender8transmitEh+0x24>
 482:	00 c0       	rjmp	.+0      	; 0x484 <_ZN9X10Sender8transmitEh+0x2a>
 484:	00 00       	nop
		_delay_ms(1);
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <_ZN9X10Sender10encodeDataEc>:

void X10Sender::encodeData(char command)
{	
 48c:	dc 01       	movw	r26, r24
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	9b 31       	cpi	r25, 0x1B	; 27
 492:	70 f5       	brcc	.+92     	; 0x4f0 <_ZN9X10Sender10encodeDataEc+0x64>
	{
		if (asciiLookup_[i].character == command) 
 494:	29 2f       	mov	r18, r25
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	41 e1       	ldi	r20, 0x11	; 17
 49a:	42 9f       	mul	r20, r18
 49c:	f0 01       	movw	r30, r0
 49e:	43 9f       	mul	r20, r19
 4a0:	f0 0d       	add	r31, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	e0 50       	subi	r30, 0x00	; 0
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	40 81       	ld	r20, Z
 4aa:	46 13       	cpse	r20, r22
 4ac:	1f c0       	rjmp	.+62     	; 0x4ec <_ZN9X10Sender10encodeDataEc+0x60>
 4ae:	88 e0       	ldi	r24, 0x08	; 8
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 4b0:	80 31       	cpi	r24, 0x10	; 16
 4b2:	b8 f4       	brcc	.+46     	; 0x4e2 <_ZN9X10Sender10encodeDataEc+0x56>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
 4b4:	68 2f       	mov	r22, r24
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	fb 01       	movw	r30, r22
 4ba:	38 97       	sbiw	r30, 0x08	; 8
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	91 e1       	ldi	r25, 0x11	; 17
 4c2:	92 9f       	mul	r25, r18
 4c4:	a0 01       	movw	r20, r0
 4c6:	93 9f       	mul	r25, r19
 4c8:	50 0d       	add	r21, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	e4 0f       	add	r30, r20
 4ce:	f5 1f       	adc	r31, r21
 4d0:	e0 50       	subi	r30, 0x00	; 0
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	fd 01       	movw	r30, r26
 4d8:	e6 0f       	add	r30, r22
 4da:	f7 1f       	adc	r31, r23
 4dc:	91 83       	std	Z+1, r25	; 0x01
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
	{
		if (asciiLookup_[i].character == command) 
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	e7 cf       	rjmp	.-50     	; 0x4b0 <_ZN9X10Sender10encodeDataEc+0x24>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
			}
			
			// sætter dataReady og currentbit til standard værdier.
			dataReady_ = true;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	8c 93       	st	X, r24
			currentBit_ = 0;
 4e6:	d1 96       	adiw	r26, 0x31	; 49
 4e8:	1c 92       	st	X, r1
			
			return;
 4ea:	08 95       	ret
void X10Sender::encodeData(char command)
{	
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	d0 cf       	rjmp	.-96     	; 0x490 <_ZN9X10Sender10encodeDataEc+0x4>
 4f0:	08 95       	ret

000004f2 <_ZN9X10Sender25translateToManchesterCodeEv>:
		}
	}
}

void X10Sender::translateToManchesterCode()
{
 4f2:	bc 01       	movw	r22, r24
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 4f4:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i< 16; i++)
 4f8:	90 31       	cpi	r25, 0x10	; 16
 4fa:	10 f5       	brcc	.+68     	; 0x540 <_ZN9X10Sender25translateToManchesterCodeEv+0x4e>
	{
		manchesterArray_[manchesterI] = dataArray_[i] == 0 ? 1 : 0;
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	49 2f       	mov	r20, r25
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	fb 01       	movw	r30, r22
 506:	e4 0f       	add	r30, r20
 508:	f5 1f       	adc	r31, r21
 50a:	e1 81       	ldd	r30, Z+1	; 0x01
 50c:	e1 11       	cpse	r30, r1
 50e:	02 c0       	rjmp	.+4      	; 0x514 <_ZN9X10Sender25translateToManchesterCodeEv+0x22>
 510:	a1 e0       	ldi	r26, 0x01	; 1
 512:	01 c0       	rjmp	.+2      	; 0x516 <_ZN9X10Sender25translateToManchesterCodeEv+0x24>
 514:	a0 e0       	ldi	r26, 0x00	; 0
 516:	fb 01       	movw	r30, r22
 518:	e2 0f       	add	r30, r18
 51a:	f3 1f       	adc	r31, r19
 51c:	a1 8b       	std	Z+17, r26	; 0x11
		manchesterArray_[manchesterI + 1] = dataArray_[i] == 0 ? 0 : 1;
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	fb 01       	movw	r30, r22
 524:	e4 0f       	add	r30, r20
 526:	f5 1f       	adc	r31, r21
 528:	41 81       	ldd	r20, Z+1	; 0x01
 52a:	fb 01       	movw	r30, r22
 52c:	e2 0f       	add	r30, r18
 52e:	f3 1f       	adc	r31, r19
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	41 11       	cpse	r20, r1
 534:	01 c0       	rjmp	.+2      	; 0x538 <_ZN9X10Sender25translateToManchesterCodeEv+0x46>
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	21 8b       	std	Z+17, r18	; 0x11
		
		manchesterI += 2;
 53a:	8e 5f       	subi	r24, 0xFE	; 254
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 53c:	9f 5f       	subi	r25, 0xFF	; 255
 53e:	dc cf       	rjmp	.-72     	; 0x4f8 <_ZN9X10Sender25translateToManchesterCodeEv+0x6>
 540:	08 95       	ret

00000542 <_ZN9X10Sender8sendDataEcPh>:
// 	delete[] dataArray_;
// 	delete[] asciiLookup_;
} //~X10Sender

void X10Sender::sendData(char command, uint8_t address[4])
{
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	28 97       	sbiw	r28, 0x08	; 8
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	8c 01       	movw	r16, r24
	if (dataReady_) return; // Hvis der allerede er data, skal der ikke sendes en kommando.
 55c:	dc 01       	movw	r26, r24
 55e:	8c 91       	ld	r24, X
 560:	81 11       	cpse	r24, r1
 562:	2b c0       	rjmp	.+86     	; 0x5ba <_ZN9X10Sender8sendDataEcPh+0x78>
	const int PROTOCOL_START = 0;
	// de efterfølgende 4 bits er adressen på enheden vi vil snakke til.
	const int ADDRESS_START = 4;
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
 564:	88 e0       	ldi	r24, 0x08	; 8
 566:	ea eb       	ldi	r30, 0xBA	; 186
 568:	f3 e0       	ldi	r31, 0x03	; 3
 56a:	de 01       	movw	r26, r28
 56c:	11 96       	adiw	r26, 0x01	; 1
 56e:	01 90       	ld	r0, Z+
 570:	0d 92       	st	X+, r0
 572:	8a 95       	dec	r24
 574:	e1 f7       	brne	.-8      	; 0x56e <_ZN9X10Sender8sendDataEcPh+0x2c>
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	94 30       	cpi	r25, 0x04	; 4
 57a:	d8 f4       	brcc	.+54     	; 0x5b2 <_ZN9X10Sender8sendDataEcPh+0x70>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
 57c:	29 2f       	mov	r18, r25
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	a1 e0       	ldi	r26, 0x01	; 1
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	ac 0f       	add	r26, r28
 58c:	bd 1f       	adc	r27, r29
 58e:	ea 0f       	add	r30, r26
 590:	fb 1f       	adc	r31, r27
 592:	80 81       	ld	r24, Z
 594:	f8 01       	movw	r30, r16
 596:	e2 0f       	add	r30, r18
 598:	f3 1f       	adc	r31, r19
 59a:	81 83       	std	Z+1, r24	; 0x01
		dataArray_[i + ADDRESS_START] = address[i];
 59c:	f9 01       	movw	r30, r18
 59e:	34 96       	adiw	r30, 0x04	; 4
 5a0:	da 01       	movw	r26, r20
 5a2:	a2 0f       	add	r26, r18
 5a4:	b3 1f       	adc	r27, r19
 5a6:	8c 91       	ld	r24, X
 5a8:	e0 0f       	add	r30, r16
 5aa:	f1 1f       	adc	r31, r17
 5ac:	81 83       	std	Z+1, r24	; 0x01
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 5ae:	9f 5f       	subi	r25, 0xFF	; 255
 5b0:	e3 cf       	rjmp	.-58     	; 0x578 <_ZN9X10Sender8sendDataEcPh+0x36>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
		dataArray_[i + ADDRESS_START] = address[i];
	}
	
	this->encodeData(command);
 5b2:	c8 01       	movw	r24, r16
 5b4:	6b df       	rcall	.-298    	; 0x48c <_ZN9X10Sender10encodeDataEc>
	this->translateToManchesterCode();
 5b6:	c8 01       	movw	r24, r16
 5b8:	9c df       	rcall	.-200    	; 0x4f2 <_ZN9X10Sender25translateToManchesterCodeEv>
}
 5ba:	28 96       	adiw	r28, 0x08	; 8
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
