
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800200  000004f6  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800454  00800454  000007de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca9  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000118c  00000000  00000000  000025c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000822  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000982  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066f  00000000  00000000  00004aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c1       	rjmp	.+678    	; 0x2bc <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 35       	cpi	r26, 0x54	; 84
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a4 e5       	ldi	r26, 0x54	; 84
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 35       	cpi	r26, 0x56	; 86
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e8 c1       	rjmp	.+976    	; 0x4f2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/UART.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	e8 97       	sbiw	r28, 0x38	; 56
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 138:	ea e6       	ldi	r30, 0x6A	; 106
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 142:	8d b3       	in	r24, 0x1d	; 29
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8d bb       	out	0x1d, r24	; 29

	sei();
 148:	78 94       	sei
	
	DDRB |= (1 << PB5);
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	c8 d0       	rcall	.+400    	; 0x2e6 <_ZN4UARTC1Ev>
	uart.transmitString("Menu:\r\n");
 156:	62 ec       	ldi	r22, 0xC2	; 194
 158:	73 e0       	ldi	r23, 0x03	; 3
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	d3 d0       	rcall	.+422    	; 0x306 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("o - Aaben vindue\r\n");
 160:	6a ec       	ldi	r22, 0xCA	; 202
 162:	73 e0       	ldi	r23, 0x03	; 3
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	ce d0       	rcall	.+412    	; 0x306 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("c - Luk vindue\r\n");
 16a:	6d ed       	ldi	r22, 0xDD	; 221
 16c:	73 e0       	ldi	r23, 0x03	; 3
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	c9 d0       	rcall	.+402    	; 0x306 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("h - Halvt aabent\r\n");
 174:	6e ee       	ldi	r22, 0xEE	; 238
 176:	73 e0       	ldi	r23, 0x03	; 3
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	c4 d0       	rcall	.+392    	; 0x306 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("m - Denne menu\r\n");
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	74 e0       	ldi	r23, 0x04	; 4
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	bf d0       	rcall	.+382    	; 0x306 <_ZN4UART14transmitStringEPKc>
	
	X10Sender sender;
 188:	ce 01       	movw	r24, r28
 18a:	02 96       	adiw	r24, 0x02	; 2
 18c:	d5 d0       	rcall	.+426    	; 0x338 <_ZN9X10SenderC1Ev>
 18e:	1d aa       	std	Y+53, r1	; 0x35
	uint8_t windowAddress[4] = {0,0,0,1};
 190:	1e aa       	std	Y+54, r1	; 0x36
 192:	1f aa       	std	Y+55, r1	; 0x37
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	88 af       	std	Y+56, r24	; 0x38
 198:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	83 e2       	ldi	r24, 0x23	; 35
 19c:	94 ef       	ldi	r25, 0xF4	; 244
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x7a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x84>
 1a8:	00 00       	nop
	
	_delay_ms(5000);
	
	while(true)
	{
		if (!sender.dataReady()) {
 1aa:	ce 01       	movw	r24, r28
 1ac:	02 96       	adiw	r24, 0x02	; 2
 1ae:	db d0       	rcall	.+438    	; 0x366 <_ZN9X10Sender9dataReadyEv>
 1b0:	81 11       	cpse	r24, r1
 1b2:	53 c0       	rjmp	.+166    	; 0x25a <main+0x136>
			
			if (sendtNum == 100) {
				return 0;	
			}
			*/
			uart.transmitString("\r\n\nKlar til næste kommando");
 1b4:	62 e1       	ldi	r22, 0x12	; 18
 1b6:	74 e0       	ldi	r23, 0x04	; 4
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	a4 d0       	rcall	.+328    	; 0x306 <_ZN4UART14transmitStringEPKc>
 1be:	ce 01       	movw	r24, r28
			recievedChar = uart.recieve();
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	b3 d0       	rcall	.+358    	; 0x32a <_ZN4UART7recieveEv>
 1c4:	88 36       	cpi	r24, 0x68	; 104
 1c6:	19 f1       	breq	.+70     	; 0x20e <main+0xea>
			switch (recievedChar)
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <main+0xac>
 1ca:	83 36       	cpi	r24, 0x63	; 99
 1cc:	99 f0       	breq	.+38     	; 0x1f4 <main+0xd0>
 1ce:	45 c0       	rjmp	.+138    	; 0x25a <main+0x136>
 1d0:	8d 36       	cpi	r24, 0x6D	; 109
 1d2:	51 f1       	breq	.+84     	; 0x228 <main+0x104>
 1d4:	8f 36       	cpi	r24, 0x6F	; 111
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0xb6>
 1d8:	40 c0       	rjmp	.+128    	; 0x25a <main+0x136>
 1da:	6d e2       	ldi	r22, 0x2D	; 45
			{
				case 'o':
				{
					uart.transmitString("Sender O\r\n");
 1dc:	74 e0       	ldi	r23, 0x04	; 4
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	91 d0       	rcall	.+290    	; 0x306 <_ZN4UART14transmitStringEPKc>
 1e4:	ae 01       	movw	r20, r28
					sender.sendData('O', windowAddress);
 1e6:	4b 5c       	subi	r20, 0xCB	; 203
 1e8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ea:	6f e4       	ldi	r22, 0x4F	; 79
 1ec:	ce 01       	movw	r24, r28
 1ee:	02 96       	adiw	r24, 0x02	; 2
 1f0:	39 d1       	rcall	.+626    	; 0x464 <_ZN9X10Sender8sendDataEcPh>
 1f2:	33 c0       	rjmp	.+102    	; 0x25a <main+0x136>
				}
				break;
				case 'c':
				{
					uart.transmitString("Sender C\r\n");
 1f4:	68 e3       	ldi	r22, 0x38	; 56
 1f6:	74 e0       	ldi	r23, 0x04	; 4
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	84 d0       	rcall	.+264    	; 0x306 <_ZN4UART14transmitStringEPKc>
					sender.sendData('C', windowAddress);
 1fe:	ae 01       	movw	r20, r28
 200:	4b 5c       	subi	r20, 0xCB	; 203
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	63 e4       	ldi	r22, 0x43	; 67
 206:	ce 01       	movw	r24, r28
 208:	02 96       	adiw	r24, 0x02	; 2
 20a:	2c d1       	rcall	.+600    	; 0x464 <_ZN9X10Sender8sendDataEcPh>
				}
				break;
 20c:	26 c0       	rjmp	.+76     	; 0x25a <main+0x136>
				case 'h':
				{
					uart.transmitString("Sender H\r\n");
 20e:	63 e4       	ldi	r22, 0x43	; 67
 210:	74 e0       	ldi	r23, 0x04	; 4
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	77 d0       	rcall	.+238    	; 0x306 <_ZN4UART14transmitStringEPKc>
					sender.sendData('H', windowAddress);
 218:	ae 01       	movw	r20, r28
 21a:	4b 5c       	subi	r20, 0xCB	; 203
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	68 e4       	ldi	r22, 0x48	; 72
 220:	ce 01       	movw	r24, r28
 222:	02 96       	adiw	r24, 0x02	; 2
 224:	1f d1       	rcall	.+574    	; 0x464 <_ZN9X10Sender8sendDataEcPh>
				}
				break;
 226:	19 c0       	rjmp	.+50     	; 0x25a <main+0x136>
				case 'm':
				{
					uart.transmitString("Menu:\r\n");
 228:	62 ec       	ldi	r22, 0xC2	; 194
 22a:	73 e0       	ldi	r23, 0x03	; 3
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	6a d0       	rcall	.+212    	; 0x306 <_ZN4UART14transmitStringEPKc>
					uart.transmitString("o - Aaben vindue\r\n");
 232:	6a ec       	ldi	r22, 0xCA	; 202
 234:	73 e0       	ldi	r23, 0x03	; 3
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	65 d0       	rcall	.+202    	; 0x306 <_ZN4UART14transmitStringEPKc>
					uart.transmitString("c - Luk vindue\r\n");
 23c:	6d ed       	ldi	r22, 0xDD	; 221
 23e:	73 e0       	ldi	r23, 0x03	; 3
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	60 d0       	rcall	.+192    	; 0x306 <_ZN4UART14transmitStringEPKc>
 246:	6e ee       	ldi	r22, 0xEE	; 238
					uart.transmitString("h - Halvt aabent\r\n");
 248:	73 e0       	ldi	r23, 0x03	; 3
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	5b d0       	rcall	.+182    	; 0x306 <_ZN4UART14transmitStringEPKc>
 250:	61 e0       	ldi	r22, 0x01	; 1
					uart.transmitString("m - Denne menu\r\n");
 252:	74 e0       	ldi	r23, 0x04	; 4
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	56 d0       	rcall	.+172    	; 0x306 <_ZN4UART14transmitStringEPKc>
				}
				break;
			}
		}
		
		if (interruptFlag == 1) {
 25a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__data_end>
 25e:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__data_end+0x1>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x144>
 266:	a1 cf       	rjmp	.-190    	; 0x1aa <main+0x86>
			uint8_t nextBit = sender.getNextBit();
 268:	ce 01       	movw	r24, r28
 26a:	02 96       	adiw	r24, 0x02	; 2
 26c:	7f d0       	rcall	.+254    	; 0x36c <_ZN9X10Sender10getNextBitEv>
			
			if (nextBit == 1) {
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	91 f4       	brne	.+36     	; 0x296 <main+0x172>
				uart.transmitString("1 ");
 272:	6e e4       	ldi	r22, 0x4E	; 78
 274:	74 e0       	ldi	r23, 0x04	; 4
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
				sender.enableTransmitter();
 27a:	45 d0       	rcall	.+138    	; 0x306 <_ZN4UART14transmitStringEPKc>
 27c:	ce 01       	movw	r24, r28
 27e:	02 96       	adiw	r24, 0x02	; 2
 280:	87 d0       	rcall	.+270    	; 0x390 <_ZN9X10Sender17enableTransmitterEv>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x162>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x168>
 28c:	00 00       	nop
				_delay_ms(1);
				sender.disableTransmitter();
 28e:	ce 01       	movw	r24, r28
 290:	02 96       	adiw	r24, 0x02	; 2
 292:	87 d0       	rcall	.+270    	; 0x3a2 <_ZN9X10Sender18disableTransmitterEv>
 294:	0e c0       	rjmp	.+28     	; 0x2b2 <main+0x18e>
 296:	61 e5       	ldi	r22, 0x51	; 81
				} else {
				uart.transmitString("0 ");
 298:	74 e0       	ldi	r23, 0x04	; 4
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	33 d0       	rcall	.+102    	; 0x306 <_ZN4UART14transmitStringEPKc>
 2a0:	ce 01       	movw	r24, r28
 2a2:	02 96       	adiw	r24, 0x02	; 2
				sender.disableTransmitter();
 2a4:	7e d0       	rcall	.+252    	; 0x3a2 <_ZN9X10Sender18disableTransmitterEv>
 2a6:	8f e9       	ldi	r24, 0x9F	; 159
 2a8:	9f e0       	ldi	r25, 0x0F	; 15
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x186>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x18c>
 2b0:	00 00       	nop
 2b2:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__data_end+0x1>
 2b6:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <__data_end>
				_delay_ms(1);
			}
			
			interruptFlag = 0;
 2ba:	77 cf       	rjmp	.-274    	; 0x1aa <main+0x86>

000002bc <__vector_5>:
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
		}
		
	}
}

ISR(INT4_vect) {
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
	interruptFlag = 1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__data_end+0x1>
 2d2:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__data_end>
	EIFR = 0x00;
 2d6:	1c ba       	out	0x1c, r1	; 28
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 2e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 2ea:	87 e6       	ldi	r24, 0x67	; 103
 2ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2f0:	88 e1       	ldi	r24, 0x18	; 24
 2f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2f6:	08 95       	ret

000002f8 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 2f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2fc:	85 ff       	sbrs	r24, 5
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 300:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 304:	08 95       	ret

00000306 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	8c 01       	movw	r16, r24
 310:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 312:	68 81       	ld	r22, Y
 314:	66 23       	and	r22, r22
 316:	21 f0       	breq	.+8      	; 0x320 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 318:	c8 01       	movw	r24, r16
 31a:	ee df       	rcall	.-36     	; 0x2f8 <_ZN4UART8transmitEh>
		str++;
 31c:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 31e:	f9 cf       	rjmp	.-14     	; 0x312 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <_ZN4UART7recieveEv>:

unsigned char UART::recieve() 
{
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 32a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 32e:	88 23       	and	r24, r24
 330:	e4 f7       	brge	.-8      	; 0x32a <_ZN4UART7recieveEv>
	
	// Get and return received data from buffer
	return UDR0;
 332:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 336:	08 95       	ret

00000338 <_ZN9X10SenderC1Ev>:
	// txPin_ = DDRB;
	// txPin_ = 0xFF;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 338:	fc 01       	movw	r30, r24
 33a:	11 aa       	std	Z+49, r1	; 0x31
 33c:	10 82       	st	Z, r1
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	12 82       	std	Z+2, r1	; 0x02
 342:	13 82       	std	Z+3, r1	; 0x03
 344:	14 82       	std	Z+4, r1	; 0x04
 346:	15 82       	std	Z+5, r1	; 0x05
 348:	16 82       	std	Z+6, r1	; 0x06
 34a:	17 82       	std	Z+7, r1	; 0x07
 34c:	10 86       	std	Z+8, r1	; 0x08
 34e:	14 b8       	out	0x04, r1	; 4
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 356:	89 e0       	ldi	r24, 0x09	; 9
 358:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 35c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 360:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 364:	08 95       	ret

00000366 <_ZN9X10Sender9dataReadyEv>:
}

bool X10Sender::dataReady()
{
  	return dataReady_;
}
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	08 95       	ret

0000036c <_ZN9X10Sender10getNextBitEv>:

uint8_t X10Sender::getNextBit()
{
 36c:	fc 01       	movw	r30, r24
	// Hvis vi er nået til enden af vores dataArray_ så sender vi bare 0'ere for resten.
	if (currentBit_ >= 32 || dataReady_ == false) 
 36e:	91 a9       	ldd	r25, Z+49	; 0x31
 370:	90 32       	cpi	r25, 0x20	; 32
 372:	18 f4       	brcc	.+6      	; 0x37a <_ZN9X10Sender10getNextBitEv+0xe>
 374:	80 81       	ld	r24, Z
 376:	81 11       	cpse	r24, r1
 378:	03 c0       	rjmp	.+6      	; 0x380 <_ZN9X10Sender10getNextBitEv+0x14>
	{
		dataReady_ = false;
 37a:	10 82       	st	Z, r1
		return 0;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
	}
	
	uint8_t nextBit = manchesterArray_[currentBit_];
 380:	df 01       	movw	r26, r30
 382:	a9 0f       	add	r26, r25
 384:	b1 1d       	adc	r27, r1
 386:	51 96       	adiw	r26, 0x11	; 17
 388:	8c 91       	ld	r24, X
	currentBit_++;
 38a:	9f 5f       	subi	r25, 0xFF	; 255
 38c:	91 ab       	std	Z+49, r25	; 0x31
	return nextBit;
}
 38e:	08 95       	ret

00000390 <_ZN9X10Sender17enableTransmitterEv>:

void X10Sender::enableTransmitter() 
{
	DDRB = 0b00100000; // Sætter PORTB (OC1A el. PB5) til output.
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	84 b9       	out	0x04, r24	; 4
	TRANSMITTER_TIMER = 66; // 120Khz
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 39c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3a0:	08 95       	ret

000003a2 <_ZN9X10Sender18disableTransmitterEv>:
}

void X10Sender::disableTransmitter() 
{
	DDRB = 0b00000000; // Slukker PORTB.
 3a2:	14 b8       	out	0x04, r1	; 4
	TRANSMITTER_TIMER = 0;
 3a4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3a8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3ac:	08 95       	ret

000003ae <_ZN9X10Sender10encodeDataEc>:
}

void X10Sender::encodeData(char command)
{	
 3ae:	dc 01       	movw	r26, r24
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9b 31       	cpi	r25, 0x1B	; 27
 3b4:	70 f5       	brcc	.+92     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		if (asciiLookup_[i].character == command) 
 3b6:	29 2f       	mov	r18, r25
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	41 e1       	ldi	r20, 0x11	; 17
 3bc:	42 9f       	mul	r20, r18
 3be:	f0 01       	movw	r30, r0
 3c0:	43 9f       	mul	r20, r19
 3c2:	f0 0d       	add	r31, r0
 3c4:	11 24       	eor	r1, r1
 3c6:	e0 50       	subi	r30, 0x00	; 0
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	40 81       	ld	r20, Z
 3cc:	46 13       	cpse	r20, r22
 3ce:	1f c0       	rjmp	.+62     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d0:	88 e0       	ldi	r24, 0x08	; 8
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	b8 f4       	brcc	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
 3d6:	68 2f       	mov	r22, r24
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	fb 01       	movw	r30, r22
 3dc:	38 97       	sbiw	r30, 0x08	; 8
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	91 e1       	ldi	r25, 0x11	; 17
 3e4:	92 9f       	mul	r25, r18
 3e6:	a0 01       	movw	r20, r0
 3e8:	93 9f       	mul	r25, r19
 3ea:	50 0d       	add	r21, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	e4 0f       	add	r30, r20
 3f0:	f5 1f       	adc	r31, r21
 3f2:	e0 50       	subi	r30, 0x00	; 0
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	91 81       	ldd	r25, Z+1	; 0x01
 3f8:	fd 01       	movw	r30, r26
 3fa:	e6 0f       	add	r30, r22
 3fc:	f7 1f       	adc	r31, r23
 3fe:	91 83       	std	Z+1, r25	; 0x01
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
	{
		if (asciiLookup_[i].character == command) 
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	e7 cf       	rjmp	.-50     	; 0x3d2 <_ZN9X10Sender10encodeDataEc+0x24>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
			}
			
			// sætter dataReady og currentbit til standard værdier.
			dataReady_ = true;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	8c 93       	st	X, r24
			currentBit_ = 0;
 408:	d1 96       	adiw	r26, 0x31	; 49
 40a:	1c 92       	st	X, r1
			
			return;
 40c:	08 95       	ret
void X10Sender::encodeData(char command)
{	
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 40e:	9f 5f       	subi	r25, 0xFF	; 255
 410:	d0 cf       	rjmp	.-96     	; 0x3b2 <_ZN9X10Sender10encodeDataEc+0x4>
 412:	08 95       	ret

00000414 <_ZN9X10Sender25translateToManchesterCodeEv>:
		}
	}
}

void X10Sender::translateToManchesterCode()
{
 414:	bc 01       	movw	r22, r24
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 416:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
 418:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i< 16; i++)
 41a:	90 31       	cpi	r25, 0x10	; 16
 41c:	10 f5       	brcc	.+68     	; 0x462 <_ZN9X10Sender25translateToManchesterCodeEv+0x4e>
	{
		manchesterArray_[manchesterI] = dataArray_[i] == 0 ? 1 : 0;
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	49 2f       	mov	r20, r25
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	fb 01       	movw	r30, r22
 428:	e4 0f       	add	r30, r20
 42a:	f5 1f       	adc	r31, r21
 42c:	e1 81       	ldd	r30, Z+1	; 0x01
 42e:	e1 11       	cpse	r30, r1
 430:	02 c0       	rjmp	.+4      	; 0x436 <_ZN9X10Sender25translateToManchesterCodeEv+0x22>
 432:	a1 e0       	ldi	r26, 0x01	; 1
 434:	01 c0       	rjmp	.+2      	; 0x438 <_ZN9X10Sender25translateToManchesterCodeEv+0x24>
 436:	a0 e0       	ldi	r26, 0x00	; 0
 438:	fb 01       	movw	r30, r22
 43a:	e2 0f       	add	r30, r18
 43c:	f3 1f       	adc	r31, r19
 43e:	a1 8b       	std	Z+17, r26	; 0x11
		manchesterArray_[manchesterI + 1] = dataArray_[i] == 0 ? 0 : 1;
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	fb 01       	movw	r30, r22
 446:	e4 0f       	add	r30, r20
 448:	f5 1f       	adc	r31, r21
 44a:	41 81       	ldd	r20, Z+1	; 0x01
 44c:	fb 01       	movw	r30, r22
 44e:	e2 0f       	add	r30, r18
 450:	f3 1f       	adc	r31, r19
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	41 11       	cpse	r20, r1
 456:	01 c0       	rjmp	.+2      	; 0x45a <_ZN9X10Sender25translateToManchesterCodeEv+0x46>
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	21 8b       	std	Z+17, r18	; 0x11
		
		manchesterI += 2;
 45c:	8e 5f       	subi	r24, 0xFE	; 254
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 45e:	9f 5f       	subi	r25, 0xFF	; 255
 460:	dc cf       	rjmp	.-72     	; 0x41a <_ZN9X10Sender25translateToManchesterCodeEv+0x6>
 462:	08 95       	ret

00000464 <_ZN9X10Sender8sendDataEcPh>:
// 	delete[] dataArray_;
// 	delete[] asciiLookup_;
} //~X10Sender

void X10Sender::sendData(char command, uint8_t address[4])
{
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	28 97       	sbiw	r28, 0x08	; 8
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	8c 01       	movw	r16, r24
	if (dataReady_) return; // Hvis der allerede er data, skal der ikke sendes en kommando.
 47e:	dc 01       	movw	r26, r24
 480:	8c 91       	ld	r24, X
 482:	81 11       	cpse	r24, r1
 484:	2b c0       	rjmp	.+86     	; 0x4dc <_ZN9X10Sender8sendDataEcPh+0x78>
	const int PROTOCOL_START = 0;
	// de efterfølgende 4 bits er adressen på enheden vi vil snakke til.
	const int ADDRESS_START = 4;
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	ea eb       	ldi	r30, 0xBA	; 186
 48a:	f3 e0       	ldi	r31, 0x03	; 3
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <_ZN9X10Sender8sendDataEcPh+0x2c>
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	94 30       	cpi	r25, 0x04	; 4
 49c:	d8 f4       	brcc	.+54     	; 0x4d4 <_ZN9X10Sender8sendDataEcPh+0x70>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
 49e:	29 2f       	mov	r18, r25
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	a1 e0       	ldi	r26, 0x01	; 1
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	ac 0f       	add	r26, r28
 4ae:	bd 1f       	adc	r27, r29
 4b0:	ea 0f       	add	r30, r26
 4b2:	fb 1f       	adc	r31, r27
 4b4:	80 81       	ld	r24, Z
 4b6:	f8 01       	movw	r30, r16
 4b8:	e2 0f       	add	r30, r18
 4ba:	f3 1f       	adc	r31, r19
 4bc:	81 83       	std	Z+1, r24	; 0x01
		dataArray_[i + ADDRESS_START] = address[i];
 4be:	f9 01       	movw	r30, r18
 4c0:	34 96       	adiw	r30, 0x04	; 4
 4c2:	da 01       	movw	r26, r20
 4c4:	a2 0f       	add	r26, r18
 4c6:	b3 1f       	adc	r27, r19
 4c8:	8c 91       	ld	r24, X
 4ca:	e0 0f       	add	r30, r16
 4cc:	f1 1f       	adc	r31, r17
 4ce:	81 83       	std	Z+1, r24	; 0x01
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 4d0:	9f 5f       	subi	r25, 0xFF	; 255
 4d2:	e3 cf       	rjmp	.-58     	; 0x49a <_ZN9X10Sender8sendDataEcPh+0x36>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
		dataArray_[i + ADDRESS_START] = address[i];
	}
	
	this->encodeData(command);
 4d4:	c8 01       	movw	r24, r16
 4d6:	6b df       	rcall	.-298    	; 0x3ae <_ZN9X10Sender10encodeDataEc>
	this->translateToManchesterCode();
 4d8:	c8 01       	movw	r24, r16
 4da:	9c df       	rcall	.-200    	; 0x414 <_ZN9X10Sender25translateToManchesterCodeEv>
}
 4dc:	28 96       	adiw	r28, 0x08	; 8
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
