
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800200  00000af8  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800460  00800460  00000dec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d53  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119a  00000000  00000000  00002ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000851  00000000  00000000  00003e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00004690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098a  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068f  00000000  00000000  000051d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c1       	rjmp	.+754    	; 0x308 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ef       	ldi	r30, 0xF8	; 248
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 36       	cpi	r26, 0x60	; 96
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e6       	ldi	r26, 0x60	; 96
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 36       	cpi	r26, 0x62	; 98
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e9 c4       	rjmp	.+2514   	; 0xaf4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/UART.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c2 54       	subi	r28, 0x42	; 66
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 13a:	ea e6       	ldi	r30, 0x6A	; 106
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	83 60       	ori	r24, 0x03	; 3
 142:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 144:	8d b3       	in	r24, 0x1d	; 29
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8d bb       	out	0x1d, r24	; 29

	sei();
 14a:	78 94       	sei
	
	DDRB |= (1 << PB5);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	ed d0       	rcall	.+474    	; 0x332 <_ZN4UARTC1Ev>
	uart.transmitString("Menu:\r\n");
 158:	62 ec       	ldi	r22, 0xC2	; 194
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	f8 d0       	rcall	.+496    	; 0x352 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("o - Aaben vindue\r\n");
 162:	6a ec       	ldi	r22, 0xCA	; 202
 164:	73 e0       	ldi	r23, 0x03	; 3
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	f3 d0       	rcall	.+486    	; 0x352 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("c - Luk vindue\r\n");
 16c:	6d ed       	ldi	r22, 0xDD	; 221
 16e:	73 e0       	ldi	r23, 0x03	; 3
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	ee d0       	rcall	.+476    	; 0x352 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("h - Halvt aabent\r\n");
 176:	6e ee       	ldi	r22, 0xEE	; 238
 178:	73 e0       	ldi	r23, 0x03	; 3
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	e9 d0       	rcall	.+466    	; 0x352 <_ZN4UART14transmitStringEPKc>
	uart.transmitString("m - Denne menu\r\n");
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	74 e0       	ldi	r23, 0x04	; 4
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	e4 d0       	rcall	.+456    	; 0x352 <_ZN4UART14transmitStringEPKc>
	
	X10Sender sender;
 18a:	ce 01       	movw	r24, r28
 18c:	02 96       	adiw	r24, 0x02	; 2
 18e:	fa d0       	rcall	.+500    	; 0x384 <_ZN9X10SenderC1Ev>
 190:	1d aa       	std	Y+53, r1	; 0x35
	uint8_t windowAddress[4] = {0,0,0,1};
 192:	1e aa       	std	Y+54, r1	; 0x36
 194:	1f aa       	std	Y+55, r1	; 0x37
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	88 af       	std	Y+56, r24	; 0x38
 19a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	83 e2       	ldi	r24, 0x23	; 35
 19e:	94 ef       	ldi	r25, 0xF4	; 244
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x7c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x86>
 1aa:	00 00       	nop
	
	char recievedChar;
	char buffer[10];
	uint8_t sendtNum = 1;
 1ac:	ff 24       	eor	r15, r15
 1ae:	f3 94       	inc	r15
	
	_delay_ms(5000);
	
	while(true)
	{
		if (!sender.dataReady()) {
 1b0:	ce 01       	movw	r24, r28
 1b2:	02 96       	adiw	r24, 0x02	; 2
 1b4:	fe d0       	rcall	.+508    	; 0x3b2 <_ZN9X10Sender9dataReadyEv>
 1b6:	81 11       	cpse	r24, r1
 1b8:	76 c0       	rjmp	.+236    	; 0x2a6 <main+0x182>
			
			if (sendtNum == 100) {
				return 0;	
			}
			*/
			uart.transmitString("\r\n\nKlar til næste kommando");
 1ba:	62 e1       	ldi	r22, 0x12	; 18
 1bc:	74 e0       	ldi	r23, 0x04	; 4
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	c7 d0       	rcall	.+398    	; 0x352 <_ZN4UART14transmitStringEPKc>
 1c4:	ce 01       	movw	r24, r28
			recievedChar = uart.recieve();
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	d6 d0       	rcall	.+428    	; 0x376 <_ZN4UART7recieveEv>
 1ca:	88 36       	cpi	r24, 0x68	; 104
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <main+0xac>
			switch (recievedChar)
 1ce:	45 c0       	rjmp	.+138    	; 0x25a <main+0x136>
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <main+0xb4>
 1d2:	83 36       	cpi	r24, 0x63	; 99
 1d4:	a9 f1       	breq	.+106    	; 0x240 <main+0x11c>
 1d6:	67 c0       	rjmp	.+206    	; 0x2a6 <main+0x182>
 1d8:	8d 36       	cpi	r24, 0x6D	; 109
 1da:	09 f4       	brne	.+2      	; 0x1de <main+0xba>
 1dc:	4b c0       	rjmp	.+150    	; 0x274 <main+0x150>
 1de:	8f 36       	cpi	r24, 0x6F	; 111
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0xc0>
 1e2:	61 c0       	rjmp	.+194    	; 0x2a6 <main+0x182>
 1e4:	6d e2       	ldi	r22, 0x2D	; 45
			{
				case 'o':
				{
					uart.transmitString("Sender O - ");
 1e6:	74 e0       	ldi	r23, 0x04	; 4
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	b2 d0       	rcall	.+356    	; 0x352 <_ZN4UART14transmitStringEPKc>
 1ee:	ae 01       	movw	r20, r28
					sender.sendData('O', windowAddress);
 1f0:	4b 5c       	subi	r20, 0xCB	; 203
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255
 1f4:	6f e4       	ldi	r22, 0x4F	; 79
 1f6:	ce 01       	movw	r24, r28
 1f8:	02 96       	adiw	r24, 0x02	; 2
 1fa:	5a d1       	rcall	.+692    	; 0x4b0 <_ZN9X10Sender8sendDataEcPh>
 1fc:	1f 92       	push	r1
					sprintf(buffer, "%i", sendtNum);
 1fe:	ff 92       	push	r15
 200:	89 e3       	ldi	r24, 0x39	; 57
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	9f 93       	push	r25
 206:	8f 93       	push	r24
 208:	8e 01       	movw	r16, r28
 20a:	07 5c       	subi	r16, 0xC7	; 199
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	1f 93       	push	r17
 210:	0f 93       	push	r16
 212:	95 d1       	rcall	.+810    	; 0x53e <sprintf>
					uart.transmitString("Sendt: ");
 214:	6c e3       	ldi	r22, 0x3C	; 60
 216:	74 e0       	ldi	r23, 0x04	; 4
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9a d0       	rcall	.+308    	; 0x352 <_ZN4UART14transmitStringEPKc>
					uart.transmitString(buffer);
 21e:	b8 01       	movw	r22, r16
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	96 d0       	rcall	.+300    	; 0x352 <_ZN4UART14transmitStringEPKc>
 226:	67 ec       	ldi	r22, 0xC7	; 199
					uart.transmitString("\r\n");
 228:	73 e0       	ldi	r23, 0x03	; 3
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	91 d0       	rcall	.+290    	; 0x352 <_ZN4UART14transmitStringEPKc>
 230:	f3 94       	inc	r15
					sendtNum++;
 232:	0f 90       	pop	r0
				}
				break;
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	33 c0       	rjmp	.+102    	; 0x2a6 <main+0x182>
				case 'c':
				{
					uart.transmitString("Sender C\r\n");
 240:	64 e4       	ldi	r22, 0x44	; 68
 242:	74 e0       	ldi	r23, 0x04	; 4
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	84 d0       	rcall	.+264    	; 0x352 <_ZN4UART14transmitStringEPKc>
					sender.sendData('C', windowAddress);
 24a:	ae 01       	movw	r20, r28
 24c:	4b 5c       	subi	r20, 0xCB	; 203
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
 250:	63 e4       	ldi	r22, 0x43	; 67
 252:	ce 01       	movw	r24, r28
 254:	02 96       	adiw	r24, 0x02	; 2
 256:	2c d1       	rcall	.+600    	; 0x4b0 <_ZN9X10Sender8sendDataEcPh>
				}
				break;
				case 'h':
				{
					uart.transmitString("Sender H\r\n");
 258:	26 c0       	rjmp	.+76     	; 0x2a6 <main+0x182>
 25a:	6f e4       	ldi	r22, 0x4F	; 79
 25c:	74 e0       	ldi	r23, 0x04	; 4
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
					sender.sendData('H', windowAddress);
 262:	77 d0       	rcall	.+238    	; 0x352 <_ZN4UART14transmitStringEPKc>
 264:	ae 01       	movw	r20, r28
 266:	4b 5c       	subi	r20, 0xCB	; 203
 268:	5f 4f       	sbci	r21, 0xFF	; 255
 26a:	68 e4       	ldi	r22, 0x48	; 72
 26c:	ce 01       	movw	r24, r28
 26e:	02 96       	adiw	r24, 0x02	; 2
				}
				break;
				case 'm':
				{
					uart.transmitString("Menu:\r\n");
 270:	1f d1       	rcall	.+574    	; 0x4b0 <_ZN9X10Sender8sendDataEcPh>
 272:	19 c0       	rjmp	.+50     	; 0x2a6 <main+0x182>
 274:	62 ec       	ldi	r22, 0xC2	; 194
 276:	73 e0       	ldi	r23, 0x03	; 3
 278:	ce 01       	movw	r24, r28
					uart.transmitString("o - Aaben vindue\r\n");
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	6a d0       	rcall	.+212    	; 0x352 <_ZN4UART14transmitStringEPKc>
 27e:	6a ec       	ldi	r22, 0xCA	; 202
 280:	73 e0       	ldi	r23, 0x03	; 3
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
					uart.transmitString("c - Luk vindue\r\n");
 286:	65 d0       	rcall	.+202    	; 0x352 <_ZN4UART14transmitStringEPKc>
 288:	6d ed       	ldi	r22, 0xDD	; 221
 28a:	73 e0       	ldi	r23, 0x03	; 3
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
					uart.transmitString("h - Halvt aabent\r\n");
 290:	60 d0       	rcall	.+192    	; 0x352 <_ZN4UART14transmitStringEPKc>
 292:	6e ee       	ldi	r22, 0xEE	; 238
 294:	73 e0       	ldi	r23, 0x03	; 3
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
					uart.transmitString("m - Denne menu\r\n");
 29a:	5b d0       	rcall	.+182    	; 0x352 <_ZN4UART14transmitStringEPKc>
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	74 e0       	ldi	r23, 0x04	; 4
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
				}
				break;
			}
		}
		
		if (interruptFlag == 1) {
 2a4:	56 d0       	rcall	.+172    	; 0x352 <_ZN4UART14transmitStringEPKc>
 2a6:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <__data_end>
 2aa:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <__data_end+0x1>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
			uint8_t nextBit = sender.getNextBit();
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <main+0x190>
 2b2:	7e cf       	rjmp	.-260    	; 0x1b0 <main+0x8c>
 2b4:	ce 01       	movw	r24, r28
			
			if (nextBit == 1) {
 2b6:	02 96       	adiw	r24, 0x02	; 2
				uart.transmitString("1 ");
 2b8:	7f d0       	rcall	.+254    	; 0x3b8 <_ZN9X10Sender10getNextBitEv>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	91 f4       	brne	.+36     	; 0x2e2 <main+0x1be>
 2be:	6a e5       	ldi	r22, 0x5A	; 90
 2c0:	74 e0       	ldi	r23, 0x04	; 4
 2c2:	ce 01       	movw	r24, r28
				sender.enableTransmitter();
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	45 d0       	rcall	.+138    	; 0x352 <_ZN4UART14transmitStringEPKc>
 2c8:	ce 01       	movw	r24, r28
 2ca:	02 96       	adiw	r24, 0x02	; 2
 2cc:	87 d0       	rcall	.+270    	; 0x3dc <_ZN9X10Sender17enableTransmitterEv>
 2ce:	8f e9       	ldi	r24, 0x9F	; 159
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x1ae>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x1b4>
				_delay_ms(1);
				sender.disableTransmitter();
 2d8:	00 00       	nop
 2da:	ce 01       	movw	r24, r28
 2dc:	02 96       	adiw	r24, 0x02	; 2
 2de:	87 d0       	rcall	.+270    	; 0x3ee <_ZN9X10Sender18disableTransmitterEv>
 2e0:	0e c0       	rjmp	.+28     	; 0x2fe <main+0x1da>
				} else {
				uart.transmitString("0 ");
 2e2:	6d e5       	ldi	r22, 0x5D	; 93
 2e4:	74 e0       	ldi	r23, 0x04	; 4
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	33 d0       	rcall	.+102    	; 0x352 <_ZN4UART14transmitStringEPKc>
 2ec:	ce 01       	movw	r24, r28
				sender.disableTransmitter();
 2ee:	02 96       	adiw	r24, 0x02	; 2
 2f0:	7e d0       	rcall	.+252    	; 0x3ee <_ZN9X10Sender18disableTransmitterEv>
 2f2:	8f e9       	ldi	r24, 0x9F	; 159
 2f4:	9f e0       	ldi	r25, 0x0F	; 15
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x1d2>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x1d8>
 2fc:	00 00       	nop
 2fe:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <__data_end+0x1>
				_delay_ms(1);
			}
			
			interruptFlag = 0;
 302:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <__data_end>
 306:	54 cf       	rjmp	.-344    	; 0x1b0 <main+0x8c>

00000308 <__vector_5>:
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
		}
		
	}
}

ISR(INT4_vect) {
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
	interruptFlag = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__data_end+0x1>
 31e:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__data_end>
	EIFR = 0x00;
 322:	1c ba       	out	0x1c, r1	; 28
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 332:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 336:	87 e6       	ldi	r24, 0x67	; 103
 338:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 342:	08 95       	ret

00000344 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 344:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 348:	85 ff       	sbrs	r24, 5
 34a:	fc cf       	rjmp	.-8      	; 0x344 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 34c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 350:	08 95       	ret

00000352 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	8c 01       	movw	r16, r24
 35c:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 35e:	68 81       	ld	r22, Y
 360:	66 23       	and	r22, r22
 362:	21 f0       	breq	.+8      	; 0x36c <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 364:	c8 01       	movw	r24, r16
 366:	ee df       	rcall	.-36     	; 0x344 <_ZN4UART8transmitEh>
		str++;
 368:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 36a:	f9 cf       	rjmp	.-14     	; 0x35e <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <_ZN4UART7recieveEv>:

unsigned char UART::recieve() 
{
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 376:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 37a:	88 23       	and	r24, r24
 37c:	e4 f7       	brge	.-8      	; 0x376 <_ZN4UART7recieveEv>
	
	// Get and return received data from buffer
	return UDR0;
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 382:	08 95       	ret

00000384 <_ZN9X10SenderC1Ev>:
	// txPin_ = DDRB;
	// txPin_ = 0xFF;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 384:	fc 01       	movw	r30, r24
 386:	11 aa       	std	Z+49, r1	; 0x31
 388:	10 82       	st	Z, r1
 38a:	11 82       	std	Z+1, r1	; 0x01
 38c:	12 82       	std	Z+2, r1	; 0x02
 38e:	13 82       	std	Z+3, r1	; 0x03
 390:	14 82       	std	Z+4, r1	; 0x04
 392:	15 82       	std	Z+5, r1	; 0x05
 394:	16 82       	std	Z+6, r1	; 0x06
 396:	17 82       	std	Z+7, r1	; 0x07
 398:	10 86       	std	Z+8, r1	; 0x08
 39a:	14 b8       	out	0x04, r1	; 4
 39c:	80 e4       	ldi	r24, 0x40	; 64
 39e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 3a8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3ac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3b0:	08 95       	ret

000003b2 <_ZN9X10Sender9dataReadyEv>:
}

bool X10Sender::dataReady()
{
  	return dataReady_;
}
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	08 95       	ret

000003b8 <_ZN9X10Sender10getNextBitEv>:

uint8_t X10Sender::getNextBit()
{
 3b8:	fc 01       	movw	r30, r24
	// Hvis vi er nået til enden af vores dataArray_ så sender vi bare 0'ere for resten.
	if (currentBit_ >= 32 || dataReady_ == false) 
 3ba:	91 a9       	ldd	r25, Z+49	; 0x31
 3bc:	90 32       	cpi	r25, 0x20	; 32
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <_ZN9X10Sender10getNextBitEv+0xe>
 3c0:	80 81       	ld	r24, Z
 3c2:	81 11       	cpse	r24, r1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_ZN9X10Sender10getNextBitEv+0x14>
	{
		dataReady_ = false;
 3c6:	10 82       	st	Z, r1
		return 0;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
	}
	
	uint8_t nextBit = manchesterArray_[currentBit_];
 3cc:	df 01       	movw	r26, r30
 3ce:	a9 0f       	add	r26, r25
 3d0:	b1 1d       	adc	r27, r1
 3d2:	51 96       	adiw	r26, 0x11	; 17
 3d4:	8c 91       	ld	r24, X
	currentBit_++;
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	91 ab       	std	Z+49, r25	; 0x31
	return nextBit;
}
 3da:	08 95       	ret

000003dc <_ZN9X10Sender17enableTransmitterEv>:

void X10Sender::enableTransmitter() 
{
	DDRB = 0b00100000; // Sætter PORTB (OC1A el. PB5) til output.
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	84 b9       	out	0x04, r24	; 4
	TRANSMITTER_TIMER = 66; // 120Khz
 3e0:	82 e4       	ldi	r24, 0x42	; 66
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3ec:	08 95       	ret

000003ee <_ZN9X10Sender18disableTransmitterEv>:
}

void X10Sender::disableTransmitter() 
{
	DDRB = 0b00000000; // Slukker PORTB.
 3ee:	14 b8       	out	0x04, r1	; 4
	TRANSMITTER_TIMER = 0;
 3f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3f4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3f8:	08 95       	ret

000003fa <_ZN9X10Sender10encodeDataEc>:
}

void X10Sender::encodeData(char command)
{	
 3fa:	dc 01       	movw	r26, r24
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	9b 31       	cpi	r25, 0x1B	; 27
 400:	70 f5       	brcc	.+92     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		if (asciiLookup_[i].character == command) 
 402:	29 2f       	mov	r18, r25
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	41 e1       	ldi	r20, 0x11	; 17
 408:	42 9f       	mul	r20, r18
 40a:	f0 01       	movw	r30, r0
 40c:	43 9f       	mul	r20, r19
 40e:	f0 0d       	add	r31, r0
 410:	11 24       	eor	r1, r1
 412:	e0 50       	subi	r30, 0x00	; 0
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	40 81       	ld	r20, Z
 418:	46 13       	cpse	r20, r22
 41a:	1f c0       	rjmp	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 41c:	88 e0       	ldi	r24, 0x08	; 8
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 41e:	80 31       	cpi	r24, 0x10	; 16
 420:	b8 f4       	brcc	.+46     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
 422:	68 2f       	mov	r22, r24
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	fb 01       	movw	r30, r22
 428:	38 97       	sbiw	r30, 0x08	; 8
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	91 e1       	ldi	r25, 0x11	; 17
 430:	92 9f       	mul	r25, r18
 432:	a0 01       	movw	r20, r0
 434:	93 9f       	mul	r25, r19
 436:	50 0d       	add	r21, r0
 438:	11 24       	eor	r1, r1
 43a:	e4 0f       	add	r30, r20
 43c:	f5 1f       	adc	r31, r21
 43e:	e0 50       	subi	r30, 0x00	; 0
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	fd 01       	movw	r30, r26
 446:	e6 0f       	add	r30, r22
 448:	f7 1f       	adc	r31, r23
 44a:	91 83       	std	Z+1, r25	; 0x01
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
	{
		if (asciiLookup_[i].character == command) 
		{	
			// Kopierer binært data fra lookup tabellen til dataArray fra index 8 og frem.
			for (uint8_t j = DATA_START; j < DATA_END; j++)
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	e7 cf       	rjmp	.-50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			{
				dataArray_[j] = asciiLookup_[i].binary[j - DATA_START];
			}
			
			// sætter dataReady og currentbit til standard værdier.
			dataReady_ = true;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	8c 93       	st	X, r24
			currentBit_ = 0;
 454:	d1 96       	adiw	r26, 0x31	; 49
 456:	1c 92       	st	X, r1
			
			return;
 458:	08 95       	ret
void X10Sender::encodeData(char command)
{	
	const int DATA_START = 8;
	const int DATA_END = 16;
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 45a:	9f 5f       	subi	r25, 0xFF	; 255
 45c:	d0 cf       	rjmp	.-96     	; 0x3fe <_ZN9X10Sender10encodeDataEc+0x4>
 45e:	08 95       	ret

00000460 <_ZN9X10Sender25translateToManchesterCodeEv>:
		}
	}
}

void X10Sender::translateToManchesterCode()
{
 460:	bc 01       	movw	r22, r24
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 462:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
 464:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i< 16; i++)
 466:	90 31       	cpi	r25, 0x10	; 16
 468:	10 f5       	brcc	.+68     	; 0x4ae <_ZN9X10Sender25translateToManchesterCodeEv+0x4e>
	{
		manchesterArray_[manchesterI] = dataArray_[i] == 0 ? 1 : 0;
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	49 2f       	mov	r20, r25
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	fb 01       	movw	r30, r22
 474:	e4 0f       	add	r30, r20
 476:	f5 1f       	adc	r31, r21
 478:	e1 81       	ldd	r30, Z+1	; 0x01
 47a:	e1 11       	cpse	r30, r1
 47c:	02 c0       	rjmp	.+4      	; 0x482 <_ZN9X10Sender25translateToManchesterCodeEv+0x22>
 47e:	a1 e0       	ldi	r26, 0x01	; 1
 480:	01 c0       	rjmp	.+2      	; 0x484 <_ZN9X10Sender25translateToManchesterCodeEv+0x24>
 482:	a0 e0       	ldi	r26, 0x00	; 0
 484:	fb 01       	movw	r30, r22
 486:	e2 0f       	add	r30, r18
 488:	f3 1f       	adc	r31, r19
 48a:	a1 8b       	std	Z+17, r26	; 0x11
		manchesterArray_[manchesterI + 1] = dataArray_[i] == 0 ? 0 : 1;
 48c:	2f 5f       	subi	r18, 0xFF	; 255
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	fb 01       	movw	r30, r22
 492:	e4 0f       	add	r30, r20
 494:	f5 1f       	adc	r31, r21
 496:	41 81       	ldd	r20, Z+1	; 0x01
 498:	fb 01       	movw	r30, r22
 49a:	e2 0f       	add	r30, r18
 49c:	f3 1f       	adc	r31, r19
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	41 11       	cpse	r20, r1
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <_ZN9X10Sender25translateToManchesterCodeEv+0x46>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	21 8b       	std	Z+17, r18	; 0x11
		
		manchesterI += 2;
 4a8:	8e 5f       	subi	r24, 0xFE	; 254
}

void X10Sender::translateToManchesterCode()
{
	uint8_t manchesterI = 0;
	for (uint8_t i = 0; i< 16; i++)
 4aa:	9f 5f       	subi	r25, 0xFF	; 255
 4ac:	dc cf       	rjmp	.-72     	; 0x466 <_ZN9X10Sender25translateToManchesterCodeEv+0x6>
 4ae:	08 95       	ret

000004b0 <_ZN9X10Sender8sendDataEcPh>:
// 	delete[] dataArray_;
// 	delete[] asciiLookup_;
} //~X10Sender

void X10Sender::sendData(char command, uint8_t address[4])
{
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	28 97       	sbiw	r28, 0x08	; 8
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	8c 01       	movw	r16, r24
	if (dataReady_) return; // Hvis der allerede er data, skal der ikke sendes en kommando.
 4ca:	dc 01       	movw	r26, r24
 4cc:	8c 91       	ld	r24, X
 4ce:	81 11       	cpse	r24, r1
 4d0:	2b c0       	rjmp	.+86     	; 0x528 <_ZN9X10Sender8sendDataEcPh+0x78>
	const int PROTOCOL_START = 0;
	// de efterfølgende 4 bits er adressen på enheden vi vil snakke til.
	const int ADDRESS_START = 4;
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	ea eb       	ldi	r30, 0xBA	; 186
 4d6:	f3 e0       	ldi	r31, 0x03	; 3
 4d8:	de 01       	movw	r26, r28
 4da:	11 96       	adiw	r26, 0x01	; 1
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <_ZN9X10Sender8sendDataEcPh+0x2c>
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	94 30       	cpi	r25, 0x04	; 4
 4e8:	d8 f4       	brcc	.+54     	; 0x520 <_ZN9X10Sender8sendDataEcPh+0x70>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
 4ea:	29 2f       	mov	r18, r25
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	a1 e0       	ldi	r26, 0x01	; 1
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	ac 0f       	add	r26, r28
 4fa:	bd 1f       	adc	r27, r29
 4fc:	ea 0f       	add	r30, r26
 4fe:	fb 1f       	adc	r31, r27
 500:	80 81       	ld	r24, Z
 502:	f8 01       	movw	r30, r16
 504:	e2 0f       	add	r30, r18
 506:	f3 1f       	adc	r31, r19
 508:	81 83       	std	Z+1, r24	; 0x01
		dataArray_[i + ADDRESS_START] = address[i];
 50a:	f9 01       	movw	r30, r18
 50c:	34 96       	adiw	r30, 0x04	; 4
 50e:	da 01       	movw	r26, r20
 510:	a2 0f       	add	r26, r18
 512:	b3 1f       	adc	r27, r19
 514:	8c 91       	ld	r24, X
 516:	e0 0f       	add	r30, r16
 518:	f1 1f       	adc	r31, r17
 51a:	81 83       	std	Z+1, r24	; 0x01
	
	// Protokollen starter altid med følgende bits.
	int initiateProtocol[4] = {1,1,1,0};
	
	// Lægger dem i dataArray, så de kan blive sendt.
	for (uint8_t i = 0; i < 4; i++)
 51c:	9f 5f       	subi	r25, 0xFF	; 255
 51e:	e3 cf       	rjmp	.-58     	; 0x4e6 <_ZN9X10Sender8sendDataEcPh+0x36>
	{
		dataArray_[i + PROTOCOL_START] = initiateProtocol[i];
		dataArray_[i + ADDRESS_START] = address[i];
	}
	
	this->encodeData(command);
 520:	c8 01       	movw	r24, r16
 522:	6b df       	rcall	.-298    	; 0x3fa <_ZN9X10Sender10encodeDataEc>
	this->translateToManchesterCode();
 524:	c8 01       	movw	r24, r16
 526:	9c df       	rcall	.-200    	; 0x460 <_ZN9X10Sender25translateToManchesterCodeEv>
}
 528:	28 96       	adiw	r28, 0x08	; 8
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <sprintf>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	2e 97       	sbiw	r28, 0x0e	; 14
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	0e 89       	ldd	r16, Y+22	; 0x16
 558:	1f 89       	ldd	r17, Y+23	; 0x17
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	8c 83       	std	Y+4, r24	; 0x04
 55e:	1a 83       	std	Y+2, r17	; 0x02
 560:	09 83       	std	Y+1, r16	; 0x01
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f e7       	ldi	r25, 0x7F	; 127
 566:	9e 83       	std	Y+6, r25	; 0x06
 568:	8d 83       	std	Y+5, r24	; 0x05
 56a:	ae 01       	movw	r20, r28
 56c:	46 5e       	subi	r20, 0xE6	; 230
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	68 8d       	ldd	r22, Y+24	; 0x18
 572:	79 8d       	ldd	r23, Y+25	; 0x19
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	10 d0       	rcall	.+32     	; 0x59a <vfprintf>
 57a:	ef 81       	ldd	r30, Y+7	; 0x07
 57c:	f8 85       	ldd	r31, Y+8	; 0x08
 57e:	e0 0f       	add	r30, r16
 580:	f1 1f       	adc	r31, r17
 582:	10 82       	st	Z, r1
 584:	2e 96       	adiw	r28, 0x0e	; 14
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <vfprintf>:
 59a:	2f 92       	push	r2
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2b 97       	sbiw	r28, 0x0b	; 11
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	6c 01       	movw	r12, r24
 5d0:	7b 01       	movw	r14, r22
 5d2:	8a 01       	movw	r16, r20
 5d4:	fc 01       	movw	r30, r24
 5d6:	17 82       	std	Z+7, r1	; 0x07
 5d8:	16 82       	std	Z+6, r1	; 0x06
 5da:	83 81       	ldd	r24, Z+3	; 0x03
 5dc:	81 ff       	sbrs	r24, 1
 5de:	bf c1       	rjmp	.+894    	; 0x95e <vfprintf+0x3c4>
 5e0:	ce 01       	movw	r24, r28
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	3c 01       	movw	r6, r24
 5e6:	f6 01       	movw	r30, r12
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	f7 01       	movw	r30, r14
 5ec:	93 fd       	sbrc	r25, 3
 5ee:	85 91       	lpm	r24, Z+
 5f0:	93 ff       	sbrs	r25, 3
 5f2:	81 91       	ld	r24, Z+
 5f4:	7f 01       	movw	r14, r30
 5f6:	88 23       	and	r24, r24
 5f8:	09 f4       	brne	.+2      	; 0x5fc <vfprintf+0x62>
 5fa:	ad c1       	rjmp	.+858    	; 0x956 <vfprintf+0x3bc>
 5fc:	85 32       	cpi	r24, 0x25	; 37
 5fe:	39 f4       	brne	.+14     	; 0x60e <vfprintf+0x74>
 600:	93 fd       	sbrc	r25, 3
 602:	85 91       	lpm	r24, Z+
 604:	93 ff       	sbrs	r25, 3
 606:	81 91       	ld	r24, Z+
 608:	7f 01       	movw	r14, r30
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	21 f4       	brne	.+8      	; 0x616 <vfprintf+0x7c>
 60e:	b6 01       	movw	r22, r12
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	d6 d1       	rcall	.+940    	; 0x9c0 <fputc>
 614:	e8 cf       	rjmp	.-48     	; 0x5e6 <vfprintf+0x4c>
 616:	91 2c       	mov	r9, r1
 618:	21 2c       	mov	r2, r1
 61a:	31 2c       	mov	r3, r1
 61c:	ff e1       	ldi	r31, 0x1F	; 31
 61e:	f3 15       	cp	r31, r3
 620:	d8 f0       	brcs	.+54     	; 0x658 <vfprintf+0xbe>
 622:	8b 32       	cpi	r24, 0x2B	; 43
 624:	79 f0       	breq	.+30     	; 0x644 <vfprintf+0xaa>
 626:	38 f4       	brcc	.+14     	; 0x636 <vfprintf+0x9c>
 628:	80 32       	cpi	r24, 0x20	; 32
 62a:	79 f0       	breq	.+30     	; 0x64a <vfprintf+0xb0>
 62c:	83 32       	cpi	r24, 0x23	; 35
 62e:	a1 f4       	brne	.+40     	; 0x658 <vfprintf+0xbe>
 630:	23 2d       	mov	r18, r3
 632:	20 61       	ori	r18, 0x10	; 16
 634:	1d c0       	rjmp	.+58     	; 0x670 <vfprintf+0xd6>
 636:	8d 32       	cpi	r24, 0x2D	; 45
 638:	61 f0       	breq	.+24     	; 0x652 <vfprintf+0xb8>
 63a:	80 33       	cpi	r24, 0x30	; 48
 63c:	69 f4       	brne	.+26     	; 0x658 <vfprintf+0xbe>
 63e:	23 2d       	mov	r18, r3
 640:	21 60       	ori	r18, 0x01	; 1
 642:	16 c0       	rjmp	.+44     	; 0x670 <vfprintf+0xd6>
 644:	83 2d       	mov	r24, r3
 646:	82 60       	ori	r24, 0x02	; 2
 648:	38 2e       	mov	r3, r24
 64a:	e3 2d       	mov	r30, r3
 64c:	e4 60       	ori	r30, 0x04	; 4
 64e:	3e 2e       	mov	r3, r30
 650:	2a c0       	rjmp	.+84     	; 0x6a6 <vfprintf+0x10c>
 652:	f3 2d       	mov	r31, r3
 654:	f8 60       	ori	r31, 0x08	; 8
 656:	1d c0       	rjmp	.+58     	; 0x692 <vfprintf+0xf8>
 658:	37 fc       	sbrc	r3, 7
 65a:	2d c0       	rjmp	.+90     	; 0x6b6 <vfprintf+0x11c>
 65c:	20 ed       	ldi	r18, 0xD0	; 208
 65e:	28 0f       	add	r18, r24
 660:	2a 30       	cpi	r18, 0x0A	; 10
 662:	40 f0       	brcs	.+16     	; 0x674 <vfprintf+0xda>
 664:	8e 32       	cpi	r24, 0x2E	; 46
 666:	b9 f4       	brne	.+46     	; 0x696 <vfprintf+0xfc>
 668:	36 fc       	sbrc	r3, 6
 66a:	75 c1       	rjmp	.+746    	; 0x956 <vfprintf+0x3bc>
 66c:	23 2d       	mov	r18, r3
 66e:	20 64       	ori	r18, 0x40	; 64
 670:	32 2e       	mov	r3, r18
 672:	19 c0       	rjmp	.+50     	; 0x6a6 <vfprintf+0x10c>
 674:	36 fe       	sbrs	r3, 6
 676:	06 c0       	rjmp	.+12     	; 0x684 <vfprintf+0xea>
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	98 9e       	mul	r9, r24
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	92 2e       	mov	r9, r18
 682:	11 c0       	rjmp	.+34     	; 0x6a6 <vfprintf+0x10c>
 684:	ea e0       	ldi	r30, 0x0A	; 10
 686:	2e 9e       	mul	r2, r30
 688:	20 0d       	add	r18, r0
 68a:	11 24       	eor	r1, r1
 68c:	22 2e       	mov	r2, r18
 68e:	f3 2d       	mov	r31, r3
 690:	f0 62       	ori	r31, 0x20	; 32
 692:	3f 2e       	mov	r3, r31
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <vfprintf+0x10c>
 696:	8c 36       	cpi	r24, 0x6C	; 108
 698:	21 f4       	brne	.+8      	; 0x6a2 <vfprintf+0x108>
 69a:	83 2d       	mov	r24, r3
 69c:	80 68       	ori	r24, 0x80	; 128
 69e:	38 2e       	mov	r3, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0x10c>
 6a2:	88 36       	cpi	r24, 0x68	; 104
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <vfprintf+0x11c>
 6a6:	f7 01       	movw	r30, r14
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	7f 01       	movw	r14, r30
 6b2:	81 11       	cpse	r24, r1
 6b4:	b3 cf       	rjmp	.-154    	; 0x61c <vfprintf+0x82>
 6b6:	98 2f       	mov	r25, r24
 6b8:	9f 7d       	andi	r25, 0xDF	; 223
 6ba:	95 54       	subi	r25, 0x45	; 69
 6bc:	93 30       	cpi	r25, 0x03	; 3
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x130>
 6c0:	0c 5f       	subi	r16, 0xFC	; 252
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	9f e3       	ldi	r25, 0x3F	; 63
 6c6:	99 83       	std	Y+1, r25	; 0x01
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <vfprintf+0x14a>
 6ca:	83 36       	cpi	r24, 0x63	; 99
 6cc:	31 f0       	breq	.+12     	; 0x6da <vfprintf+0x140>
 6ce:	83 37       	cpi	r24, 0x73	; 115
 6d0:	71 f0       	breq	.+28     	; 0x6ee <vfprintf+0x154>
 6d2:	83 35       	cpi	r24, 0x53	; 83
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <vfprintf+0x13e>
 6d6:	55 c0       	rjmp	.+170    	; 0x782 <vfprintf+0x1e8>
 6d8:	20 c0       	rjmp	.+64     	; 0x71a <vfprintf+0x180>
 6da:	f8 01       	movw	r30, r16
 6dc:	80 81       	ld	r24, Z
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	88 24       	eor	r8, r8
 6e6:	83 94       	inc	r8
 6e8:	91 2c       	mov	r9, r1
 6ea:	53 01       	movw	r10, r6
 6ec:	12 c0       	rjmp	.+36     	; 0x712 <vfprintf+0x178>
 6ee:	28 01       	movw	r4, r16
 6f0:	f2 e0       	ldi	r31, 0x02	; 2
 6f2:	4f 0e       	add	r4, r31
 6f4:	51 1c       	adc	r5, r1
 6f6:	f8 01       	movw	r30, r16
 6f8:	a0 80       	ld	r10, Z
 6fa:	b1 80       	ldd	r11, Z+1	; 0x01
 6fc:	36 fe       	sbrs	r3, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x16c>
 700:	69 2d       	mov	r22, r9
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x170>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	c5 01       	movw	r24, r10
 70c:	4e d1       	rcall	.+668    	; 0x9aa <strnlen>
 70e:	4c 01       	movw	r8, r24
 710:	82 01       	movw	r16, r4
 712:	f3 2d       	mov	r31, r3
 714:	ff 77       	andi	r31, 0x7F	; 127
 716:	3f 2e       	mov	r3, r31
 718:	15 c0       	rjmp	.+42     	; 0x744 <vfprintf+0x1aa>
 71a:	28 01       	movw	r4, r16
 71c:	22 e0       	ldi	r18, 0x02	; 2
 71e:	42 0e       	add	r4, r18
 720:	51 1c       	adc	r5, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	36 fe       	sbrs	r3, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x198>
 72c:	69 2d       	mov	r22, r9
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x19c>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	2d d1       	rcall	.+602    	; 0x994 <strnlen_P>
 73a:	4c 01       	movw	r8, r24
 73c:	f3 2d       	mov	r31, r3
 73e:	f0 68       	ori	r31, 0x80	; 128
 740:	3f 2e       	mov	r3, r31
 742:	82 01       	movw	r16, r4
 744:	33 fc       	sbrc	r3, 3
 746:	19 c0       	rjmp	.+50     	; 0x77a <vfprintf+0x1e0>
 748:	82 2d       	mov	r24, r2
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	88 16       	cp	r8, r24
 74e:	99 06       	cpc	r9, r25
 750:	a0 f4       	brcc	.+40     	; 0x77a <vfprintf+0x1e0>
 752:	b6 01       	movw	r22, r12
 754:	80 e2       	ldi	r24, 0x20	; 32
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	33 d1       	rcall	.+614    	; 0x9c0 <fputc>
 75a:	2a 94       	dec	r2
 75c:	f5 cf       	rjmp	.-22     	; 0x748 <vfprintf+0x1ae>
 75e:	f5 01       	movw	r30, r10
 760:	37 fc       	sbrc	r3, 7
 762:	85 91       	lpm	r24, Z+
 764:	37 fe       	sbrs	r3, 7
 766:	81 91       	ld	r24, Z+
 768:	5f 01       	movw	r10, r30
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	28 d1       	rcall	.+592    	; 0x9c0 <fputc>
 770:	21 10       	cpse	r2, r1
 772:	2a 94       	dec	r2
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	82 1a       	sub	r8, r18
 778:	91 08       	sbc	r9, r1
 77a:	81 14       	cp	r8, r1
 77c:	91 04       	cpc	r9, r1
 77e:	79 f7       	brne	.-34     	; 0x75e <vfprintf+0x1c4>
 780:	e1 c0       	rjmp	.+450    	; 0x944 <vfprintf+0x3aa>
 782:	84 36       	cpi	r24, 0x64	; 100
 784:	11 f0       	breq	.+4      	; 0x78a <vfprintf+0x1f0>
 786:	89 36       	cpi	r24, 0x69	; 105
 788:	39 f5       	brne	.+78     	; 0x7d8 <vfprintf+0x23e>
 78a:	f8 01       	movw	r30, r16
 78c:	37 fe       	sbrs	r3, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x204>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <vfprintf+0x214>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	07 2e       	mov	r0, r23
 7a4:	00 0c       	add	r0, r0
 7a6:	88 0b       	sbc	r24, r24
 7a8:	99 0b       	sbc	r25, r25
 7aa:	0e 5f       	subi	r16, 0xFE	; 254
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 76       	andi	r31, 0x6F	; 111
 7b2:	3f 2e       	mov	r3, r31
 7b4:	97 ff       	sbrs	r25, 7
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x230>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	f0 68       	ori	r31, 0x80	; 128
 7c8:	3f 2e       	mov	r3, r31
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	a3 01       	movw	r20, r6
 7d0:	33 d1       	rcall	.+614    	; 0xa38 <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	44 c0       	rjmp	.+136    	; 0x860 <vfprintf+0x2c6>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	31 f4       	brne	.+12     	; 0x7e8 <vfprintf+0x24e>
 7dc:	23 2d       	mov	r18, r3
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <vfprintf+0x298>
 7e8:	93 2d       	mov	r25, r3
 7ea:	99 7f       	andi	r25, 0xF9	; 249
 7ec:	b9 2e       	mov	r11, r25
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <vfprintf+0x288>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x260>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <vfprintf+0x27c>
 7f8:	ae c0       	rjmp	.+348    	; 0x956 <vfprintf+0x3bc>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <vfprintf+0x26a>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <vfprintf+0x270>
 802:	a9 c0       	rjmp	.+338    	; 0x956 <vfprintf+0x3bc>
 804:	e9 2f       	mov	r30, r25
 806:	e0 61       	ori	r30, 0x10	; 16
 808:	be 2e       	mov	r11, r30
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x28e>
 80e:	fb 2d       	mov	r31, r11
 810:	f4 60       	ori	r31, 0x04	; 4
 812:	bf 2e       	mov	r11, r31
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x28e>
 816:	34 fe       	sbrs	r3, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x294>
 81a:	29 2f       	mov	r18, r25
 81c:	26 60       	ori	r18, 0x06	; 6
 81e:	b2 2e       	mov	r11, r18
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x294>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x298>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x298>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x2ac>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x2b8>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a3 01       	movw	r20, r6
 854:	f1 d0       	rcall	.+482    	; 0xa38 <__ultoa_invert>
 856:	88 2e       	mov	r8, r24
 858:	86 18       	sub	r8, r6
 85a:	fb 2d       	mov	r31, r11
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	36 fe       	sbrs	r3, 6
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x2e4>
 864:	23 2d       	mov	r18, r3
 866:	2e 7f       	andi	r18, 0xFE	; 254
 868:	a2 2e       	mov	r10, r18
 86a:	89 14       	cp	r8, r9
 86c:	58 f4       	brcc	.+22     	; 0x884 <vfprintf+0x2ea>
 86e:	34 fe       	sbrs	r3, 4
 870:	0b c0       	rjmp	.+22     	; 0x888 <vfprintf+0x2ee>
 872:	32 fc       	sbrc	r3, 2
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x2ee>
 876:	83 2d       	mov	r24, r3
 878:	8e 7e       	andi	r24, 0xEE	; 238
 87a:	a8 2e       	mov	r10, r24
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x2ee>
 87e:	b8 2c       	mov	r11, r8
 880:	a3 2c       	mov	r10, r3
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x2f0>
 884:	b8 2c       	mov	r11, r8
 886:	01 c0       	rjmp	.+2      	; 0x88a <vfprintf+0x2f0>
 888:	b9 2c       	mov	r11, r9
 88a:	a4 fe       	sbrs	r10, 4
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <vfprintf+0x312>
 88e:	fe 01       	movw	r30, r28
 890:	e8 0d       	add	r30, r8
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	80 33       	cpi	r24, 0x30	; 48
 898:	21 f4       	brne	.+8      	; 0x8a2 <vfprintf+0x308>
 89a:	9a 2d       	mov	r25, r10
 89c:	99 7e       	andi	r25, 0xE9	; 233
 89e:	a9 2e       	mov	r10, r25
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x31a>
 8a2:	a2 fe       	sbrs	r10, 2
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x318>
 8a6:	b3 94       	inc	r11
 8a8:	b3 94       	inc	r11
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <vfprintf+0x31a>
 8ac:	8a 2d       	mov	r24, r10
 8ae:	86 78       	andi	r24, 0x86	; 134
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <vfprintf+0x31a>
 8b2:	b3 94       	inc	r11
 8b4:	a3 fc       	sbrc	r10, 3
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <vfprintf+0x33e>
 8b8:	a0 fe       	sbrs	r10, 0
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x32e>
 8bc:	b2 14       	cp	r11, r2
 8be:	80 f4       	brcc	.+32     	; 0x8e0 <vfprintf+0x346>
 8c0:	28 0c       	add	r2, r8
 8c2:	92 2c       	mov	r9, r2
 8c4:	9b 18       	sub	r9, r11
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x348>
 8c8:	b2 14       	cp	r11, r2
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <vfprintf+0x348>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	76 d0       	rcall	.+236    	; 0x9c0 <fputc>
 8d4:	b3 94       	inc	r11
 8d6:	f8 cf       	rjmp	.-16     	; 0x8c8 <vfprintf+0x32e>
 8d8:	b2 14       	cp	r11, r2
 8da:	18 f4       	brcc	.+6      	; 0x8e2 <vfprintf+0x348>
 8dc:	2b 18       	sub	r2, r11
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <vfprintf+0x34a>
 8e0:	98 2c       	mov	r9, r8
 8e2:	21 2c       	mov	r2, r1
 8e4:	a4 fe       	sbrs	r10, 4
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <vfprintf+0x36c>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	68 d0       	rcall	.+208    	; 0x9c0 <fputc>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <vfprintf+0x386>
 8f4:	a1 fc       	sbrc	r10, 1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x364>
 8f8:	88 e7       	ldi	r24, 0x78	; 120
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x368>
 8fe:	88 e5       	ldi	r24, 0x58	; 88
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	b6 01       	movw	r22, r12
 904:	0c c0       	rjmp	.+24     	; 0x91e <vfprintf+0x384>
 906:	8a 2d       	mov	r24, r10
 908:	86 78       	andi	r24, 0x86	; 134
 90a:	51 f0       	breq	.+20     	; 0x920 <vfprintf+0x386>
 90c:	a1 fe       	sbrs	r10, 1
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x37a>
 910:	8b e2       	ldi	r24, 0x2B	; 43
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x37c>
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	a7 fc       	sbrc	r10, 7
 918:	8d e2       	ldi	r24, 0x2D	; 45
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	50 d0       	rcall	.+160    	; 0x9c0 <fputc>
 920:	89 14       	cp	r8, r9
 922:	30 f4       	brcc	.+12     	; 0x930 <vfprintf+0x396>
 924:	b6 01       	movw	r22, r12
 926:	80 e3       	ldi	r24, 0x30	; 48
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	4a d0       	rcall	.+148    	; 0x9c0 <fputc>
 92c:	9a 94       	dec	r9
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <vfprintf+0x386>
 930:	8a 94       	dec	r8
 932:	f3 01       	movw	r30, r6
 934:	e8 0d       	add	r30, r8
 936:	f1 1d       	adc	r31, r1
 938:	80 81       	ld	r24, Z
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	40 d0       	rcall	.+128    	; 0x9c0 <fputc>
 940:	81 10       	cpse	r8, r1
 942:	f6 cf       	rjmp	.-20     	; 0x930 <vfprintf+0x396>
 944:	22 20       	and	r2, r2
 946:	09 f4       	brne	.+2      	; 0x94a <vfprintf+0x3b0>
 948:	4e ce       	rjmp	.-868    	; 0x5e6 <vfprintf+0x4c>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e2       	ldi	r24, 0x20	; 32
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	37 d0       	rcall	.+110    	; 0x9c0 <fputc>
 952:	2a 94       	dec	r2
 954:	f7 cf       	rjmp	.-18     	; 0x944 <vfprintf+0x3aa>
 956:	f6 01       	movw	r30, r12
 958:	86 81       	ldd	r24, Z+6	; 0x06
 95a:	97 81       	ldd	r25, Z+7	; 0x07
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x3c8>
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	9f ef       	ldi	r25, 0xFF	; 255
 962:	2b 96       	adiw	r28, 0x0b	; 11
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	df 90       	pop	r13
 97c:	cf 90       	pop	r12
 97e:	bf 90       	pop	r11
 980:	af 90       	pop	r10
 982:	9f 90       	pop	r9
 984:	8f 90       	pop	r8
 986:	7f 90       	pop	r7
 988:	6f 90       	pop	r6
 98a:	5f 90       	pop	r5
 98c:	4f 90       	pop	r4
 98e:	3f 90       	pop	r3
 990:	2f 90       	pop	r2
 992:	08 95       	ret

00000994 <strnlen_P>:
 994:	fc 01       	movw	r30, r24
 996:	05 90       	lpm	r0, Z+
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 10       	cpse	r0, r1
 99e:	d8 f7       	brcc	.-10     	; 0x996 <strnlen_P+0x2>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	8e 0f       	add	r24, r30
 9a6:	9f 1f       	adc	r25, r31
 9a8:	08 95       	ret

000009aa <strnlen>:
 9aa:	fc 01       	movw	r30, r24
 9ac:	61 50       	subi	r22, 0x01	; 1
 9ae:	70 40       	sbci	r23, 0x00	; 0
 9b0:	01 90       	ld	r0, Z+
 9b2:	01 10       	cpse	r0, r1
 9b4:	d8 f7       	brcc	.-10     	; 0x9ac <strnlen+0x2>
 9b6:	80 95       	com	r24
 9b8:	90 95       	com	r25
 9ba:	8e 0f       	add	r24, r30
 9bc:	9f 1f       	adc	r25, r31
 9be:	08 95       	ret

000009c0 <fputc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	fb 01       	movw	r30, r22
 9ca:	23 81       	ldd	r18, Z+3	; 0x03
 9cc:	21 fd       	sbrc	r18, 1
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <fputc+0x16>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	2c c0       	rjmp	.+88     	; 0xa2e <fputc+0x6e>
 9d6:	22 ff       	sbrs	r18, 2
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <fputc+0x46>
 9da:	46 81       	ldd	r20, Z+6	; 0x06
 9dc:	57 81       	ldd	r21, Z+7	; 0x07
 9de:	24 81       	ldd	r18, Z+4	; 0x04
 9e0:	35 81       	ldd	r19, Z+5	; 0x05
 9e2:	42 17       	cp	r20, r18
 9e4:	53 07       	cpc	r21, r19
 9e6:	44 f4       	brge	.+16     	; 0x9f8 <fputc+0x38>
 9e8:	a0 81       	ld	r26, Z
 9ea:	b1 81       	ldd	r27, Z+1	; 0x01
 9ec:	9d 01       	movw	r18, r26
 9ee:	2f 5f       	subi	r18, 0xFF	; 255
 9f0:	3f 4f       	sbci	r19, 0xFF	; 255
 9f2:	31 83       	std	Z+1, r19	; 0x01
 9f4:	20 83       	st	Z, r18
 9f6:	8c 93       	st	X, r24
 9f8:	26 81       	ldd	r18, Z+6	; 0x06
 9fa:	37 81       	ldd	r19, Z+7	; 0x07
 9fc:	2f 5f       	subi	r18, 0xFF	; 255
 9fe:	3f 4f       	sbci	r19, 0xFF	; 255
 a00:	37 83       	std	Z+7, r19	; 0x07
 a02:	26 83       	std	Z+6, r18	; 0x06
 a04:	14 c0       	rjmp	.+40     	; 0xa2e <fputc+0x6e>
 a06:	8b 01       	movw	r16, r22
 a08:	ec 01       	movw	r28, r24
 a0a:	fb 01       	movw	r30, r22
 a0c:	00 84       	ldd	r0, Z+8	; 0x08
 a0e:	f1 85       	ldd	r31, Z+9	; 0x09
 a10:	e0 2d       	mov	r30, r0
 a12:	19 95       	eicall
 a14:	89 2b       	or	r24, r25
 a16:	e1 f6       	brne	.-72     	; 0x9d0 <fputc+0x10>
 a18:	d8 01       	movw	r26, r16
 a1a:	16 96       	adiw	r26, 0x06	; 6
 a1c:	8d 91       	ld	r24, X+
 a1e:	9c 91       	ld	r25, X
 a20:	17 97       	sbiw	r26, 0x07	; 7
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	17 96       	adiw	r26, 0x07	; 7
 a26:	9c 93       	st	X, r25
 a28:	8e 93       	st	-X, r24
 a2a:	16 97       	sbiw	r26, 0x06	; 6
 a2c:	ce 01       	movw	r24, r28
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	08 95       	ret

00000a38 <__ultoa_invert>:
 a38:	fa 01       	movw	r30, r20
 a3a:	aa 27       	eor	r26, r26
 a3c:	28 30       	cpi	r18, 0x08	; 8
 a3e:	51 f1       	breq	.+84     	; 0xa94 <__ultoa_invert+0x5c>
 a40:	20 31       	cpi	r18, 0x10	; 16
 a42:	81 f1       	breq	.+96     	; 0xaa4 <__ultoa_invert+0x6c>
 a44:	e8 94       	clt
 a46:	6f 93       	push	r22
 a48:	6e 7f       	andi	r22, 0xFE	; 254
 a4a:	6e 5f       	subi	r22, 0xFE	; 254
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	af 4f       	sbci	r26, 0xFF	; 255
 a54:	b1 e0       	ldi	r27, 0x01	; 1
 a56:	3e d0       	rcall	.+124    	; 0xad4 <__ultoa_invert+0x9c>
 a58:	b4 e0       	ldi	r27, 0x04	; 4
 a5a:	3c d0       	rcall	.+120    	; 0xad4 <__ultoa_invert+0x9c>
 a5c:	67 0f       	add	r22, r23
 a5e:	78 1f       	adc	r23, r24
 a60:	89 1f       	adc	r24, r25
 a62:	9a 1f       	adc	r25, r26
 a64:	a1 1d       	adc	r26, r1
 a66:	68 0f       	add	r22, r24
 a68:	79 1f       	adc	r23, r25
 a6a:	8a 1f       	adc	r24, r26
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	6a 0f       	add	r22, r26
 a72:	71 1d       	adc	r23, r1
 a74:	81 1d       	adc	r24, r1
 a76:	91 1d       	adc	r25, r1
 a78:	a1 1d       	adc	r26, r1
 a7a:	20 d0       	rcall	.+64     	; 0xabc <__ultoa_invert+0x84>
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__ultoa_invert+0x48>
 a7e:	68 94       	set
 a80:	3f 91       	pop	r19
 a82:	2a e0       	ldi	r18, 0x0A	; 10
 a84:	26 9f       	mul	r18, r22
 a86:	11 24       	eor	r1, r1
 a88:	30 19       	sub	r19, r0
 a8a:	30 5d       	subi	r19, 0xD0	; 208
 a8c:	31 93       	st	Z+, r19
 a8e:	de f6       	brtc	.-74     	; 0xa46 <__ultoa_invert+0xe>
 a90:	cf 01       	movw	r24, r30
 a92:	08 95       	ret
 a94:	46 2f       	mov	r20, r22
 a96:	47 70       	andi	r20, 0x07	; 7
 a98:	40 5d       	subi	r20, 0xD0	; 208
 a9a:	41 93       	st	Z+, r20
 a9c:	b3 e0       	ldi	r27, 0x03	; 3
 a9e:	0f d0       	rcall	.+30     	; 0xabe <__ultoa_invert+0x86>
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__ultoa_invert+0x5c>
 aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <__ultoa_invert+0x58>
 aa4:	46 2f       	mov	r20, r22
 aa6:	4f 70       	andi	r20, 0x0F	; 15
 aa8:	40 5d       	subi	r20, 0xD0	; 208
 aaa:	4a 33       	cpi	r20, 0x3A	; 58
 aac:	18 f0       	brcs	.+6      	; 0xab4 <__ultoa_invert+0x7c>
 aae:	49 5d       	subi	r20, 0xD9	; 217
 ab0:	31 fd       	sbrc	r19, 1
 ab2:	40 52       	subi	r20, 0x20	; 32
 ab4:	41 93       	st	Z+, r20
 ab6:	02 d0       	rcall	.+4      	; 0xabc <__ultoa_invert+0x84>
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__ultoa_invert+0x6c>
 aba:	ea cf       	rjmp	.-44     	; 0xa90 <__ultoa_invert+0x58>
 abc:	b4 e0       	ldi	r27, 0x04	; 4
 abe:	a6 95       	lsr	r26
 ac0:	97 95       	ror	r25
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0x86>
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	61 05       	cpc	r22, r1
 ad0:	71 05       	cpc	r23, r1
 ad2:	08 95       	ret
 ad4:	9b 01       	movw	r18, r22
 ad6:	ac 01       	movw	r20, r24
 ad8:	0a 2e       	mov	r0, r26
 ada:	06 94       	lsr	r0
 adc:	57 95       	ror	r21
 ade:	47 95       	ror	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	ba 95       	dec	r27
 ae6:	c9 f7       	brne	.-14     	; 0xada <__ultoa_invert+0xa2>
 ae8:	62 0f       	add	r22, r18
 aea:	73 1f       	adc	r23, r19
 aec:	84 1f       	adc	r24, r20
 aee:	95 1f       	adc	r25, r21
 af0:	a0 1d       	adc	r26, r0
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
