
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800292  00800292  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347a  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001833  00000000  00000000  00003a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e05  00000000  00000000  000052d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  000060d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0e  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec8  00000000  00000000  000071ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ee       	ldi	r30, 0xEC	; 236
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 39       	cpi	r26, 0x92	; 146
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e9       	ldi	r26, 0x92	; 146
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 39       	cpi	r26, 0x94	; 148
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4c d0       	rcall	.+152    	; 0x1b8 <main>
 120:	e3 c0       	rjmp	.+454    	; 0x2e8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN10ControllerC1Ev>:
* Author: madse
*/
#include "controller.h"

// default constructor
Controller::Controller()
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
: i2cDriver_(), sdc30Driver_(SLAVE_ADDRESS), uartDriver_(), x10Driver_(), recieverAddress_({0,0,0,1})
 12a:	7c d0       	rcall	.+248    	; 0x224 <_ZN3I2CC1Ev>
 12c:	61 e6       	ldi	r22, 0x61	; 97
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	7e d0       	rcall	.+252    	; 0x230 <_ZN5SDC30C1Eh>
 134:	ce 01       	movw	r24, r28
 136:	41 96       	adiw	r24, 0x11	; 17
 138:	9d d0       	rcall	.+314    	; 0x274 <_ZN4UARTC1Ev>
 13a:	ce 01       	movw	r24, r28
 13c:	42 96       	adiw	r24, 0x12	; 18
 13e:	bc d0       	rcall	.+376    	; 0x2b8 <_ZN9X10SenderC1Ev>
 140:	fe 01       	movw	r30, r28
 142:	eb 5b       	subi	r30, 0xBB	; 187
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	10 82       	st	Z, r1
 148:	31 96       	adiw	r30, 0x01	; 1
 14a:	10 82       	st	Z, r1
 14c:	31 96       	adiw	r30, 0x01	; 1
 14e:	10 82       	st	Z, r1
 150:	c8 5b       	subi	r28, 0xB8	; 184
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	88 83       	st	Y, r24
{
	
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_ZN10Controller5startEb>:

void Controller::start(bool debug = false) // default debugmode er false
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 162:	ea e6       	ldi	r30, 0x6A	; 106
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	20 81       	ld	r18, Z
 168:	23 60       	ori	r18, 0x03	; 3
 16a:	20 83       	st	Z, r18
	EIMSK |= (1 << INT4);                 // Enable INT4
 16c:	2d b3       	in	r18, 0x1d	; 29
 16e:	20 61       	ori	r18, 0x10	; 16
 170:	2d bb       	out	0x1d, r18	; 29
	sei();
 172:	78 94       	sei
	
	// Tænder output PB5.
	DDRB |= (1 << PB5);
 174:	24 b1       	in	r18, 0x04	; 4
 176:	20 62       	ori	r18, 0x20	; 32
 178:	24 b9       	out	0x04, r18	; 4
	
	debug_ = debug;
 17a:	fc 01       	movw	r30, r24
 17c:	e7 5b       	subi	r30, 0xB7	; 183
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	60 83       	st	Z, r22
	if (debug_)
 182:	66 23       	and	r22, r22
 184:	b1 f0       	breq	.+44     	; 0x1b2 <_ZN10Controller5startEb+0x54>
	{
		uartDriver_.transmitString("Menu:\r\n");
 186:	ec 01       	movw	r28, r24
 188:	61 96       	adiw	r28, 0x11	; 17
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	72 e0       	ldi	r23, 0x02	; 2
 18e:	ce 01       	movw	r24, r28
 190:	81 d0       	rcall	.+258    	; 0x294 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("o - Aaben vindue\r\n");
 192:	68 e0       	ldi	r22, 0x08	; 8
 194:	72 e0       	ldi	r23, 0x02	; 2
 196:	ce 01       	movw	r24, r28
 198:	7d d0       	rcall	.+250    	; 0x294 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("c - Luk vindue\r\n");
 19a:	6b e1       	ldi	r22, 0x1B	; 27
 19c:	72 e0       	ldi	r23, 0x02	; 2
 19e:	ce 01       	movw	r24, r28
 1a0:	79 d0       	rcall	.+242    	; 0x294 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("h - Halvt aabent\r\n");
 1a2:	6c e2       	ldi	r22, 0x2C	; 44
 1a4:	72 e0       	ldi	r23, 0x02	; 2
 1a6:	ce 01       	movw	r24, r28
 1a8:	75 d0       	rcall	.+234    	; 0x294 <_ZN4UART14transmitStringEPKc>
		uartDriver_.transmitString("m - Denne menu\r\n");
 1aa:	6f e3       	ldi	r22, 0x3F	; 63
 1ac:	72 e0       	ldi	r23, 0x02	; 2
 1ae:	ce 01       	movw	r24, r28
 1b0:	71 d0       	rcall	.+226    	; 0x294 <_ZN4UART14transmitStringEPKc>
 1b2:	df 91       	pop	r29
	}
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <main>:
#define DEBUG_MODE true

volatile int interruptFlag = 0;

int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	ca 54       	subi	r28, 0x4A	; 74
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
	Controller controller;
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	a8 df       	rcall	.-176    	; 0x124 <_ZN10ControllerC1Ev>
	/*controller.setActionValues('h', 25)*/
	controller.start(DEBUG_MODE);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	c1 df       	rcall	.-126    	; 0x15e <_ZN10Controller5startEb>
#include "Utils/I2C.h"
#include "Utils/SDC30.h"
#include "Utils/UART.h"
#include "Utils/X10Sender.h"

class Controller
 1dc:	ce 01       	movw	r24, r28
 1de:	43 96       	adiw	r24, 0x13	; 19
 1e0:	82 d0       	rcall	.+260    	; 0x2e6 <_ZN9X10SenderD1Ev>
			controller.debugMenu();
			interruptFlag = 0;
		}
		
	}
}
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	c6 5b       	subi	r28, 0xB6	; 182
 1e8:	df 4f       	sbci	r29, 0xFF	; 255
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <__vector_5>:

ISR(INT4_vect) {
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	interruptFlag = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <__data_end+0x1>
 210:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end>
	EIFR = 0x00;
 214:	1c ba       	out	0x1c, r1	; 28
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <_ZN3I2CC1Ev>:

// default constructor
I2C::I2C()
{
	// Set prescaler to 1
	TWSR = 0;
 224:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>

	// Set bit rate register (Baud rate)
	TWBR = ((F_CPU / 100000) - 16) / 2;
 228:	88 e4       	ldi	r24, 0x48	; 72
 22a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 22e:	08 95       	ret

00000230 <_ZN5SDC30C1Eh>:
#include <avr/io.h>
#include <util/delay.h>
#include "SDC30.h"


SDC30::SDC30(uint8_t address)
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	1f 92       	push	r1
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	8c 01       	movw	r16, r24
 242:	f6 2e       	mov	r15, r22
 244:	0f 96       	adiw	r24, 0x0f	; 15
 246:	ee df       	rcall	.-36     	; 0x224 <_ZN3I2CC1Ev>
{
	address_ = address;
 248:	f8 01       	movw	r30, r16
 24a:	f4 86       	std	Z+12, r15	; 0x0c
	I2C i2c;
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	e9 df       	rcall	.-46     	; 0x224 <_ZN3I2CC1Ev>
	i2c_ = i2c;
	
	writeAddress_ = address_ << 1; // 0 i LSB for at skrive til sensor.
 252:	f8 01       	movw	r30, r16
 254:	84 85       	ldd	r24, Z+12	; 0x0c
 256:	98 2f       	mov	r25, r24
 258:	99 0f       	add	r25, r25
 25a:	95 87       	std	Z+13, r25	; 0x0d
	readAddress_ = (address_ << 1) | 0x01; // 1 i LSB for at læse;
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	81 60       	ori	r24, 0x01	; 1
 264:	86 87       	std	Z+14, r24	; 0x0e
	
} //SDC30
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	08 95       	ret

00000274 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 274:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 278:	87 e6       	ldi	r24, 0x67	; 103
 27a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 27e:	88 e1       	ldi	r24, 0x18	; 24
 280:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 284:	08 95       	ret

00000286 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 286:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 28a:	85 ff       	sbrs	r24, 5
 28c:	fc cf       	rjmp	.-8      	; 0x286 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 28e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 292:	08 95       	ret

00000294 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	8c 01       	movw	r16, r24
 29e:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 2a0:	68 81       	ld	r22, Y
 2a2:	66 23       	and	r22, r22
 2a4:	21 f0       	breq	.+8      	; 0x2ae <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 2a6:	c8 01       	movw	r24, r16
 2a8:	ee df       	rcall	.-36     	; 0x286 <_ZN4UART8transmitEh>
		str++;
 2aa:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 2ac:	f9 cf       	rjmp	.-14     	; 0x2a0 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <_ZN9X10SenderC1Ev>:
#define F_CPU 16000000
#include <util/delay.h>
#include "X10Sender.h"

// default constructor
X10Sender::X10Sender()
 2b8:	fc 01       	movw	r30, r24
{
	currentBit_ = 0;
 2ba:	11 aa       	std	Z+49, r1	; 0x31
	dataReady_ = false;
 2bc:	10 82       	st	Z, r1
	dataArray_[0] = 0;
 2be:	11 82       	std	Z+1, r1	; 0x01
	dataArray_[1] = 0;
 2c0:	12 82       	std	Z+2, r1	; 0x02
	dataArray_[2] = 0;
 2c2:	13 82       	std	Z+3, r1	; 0x03
	dataArray_[3] = 0;
 2c4:	14 82       	std	Z+4, r1	; 0x04
	dataArray_[4] = 0;
 2c6:	15 82       	std	Z+5, r1	; 0x05
	dataArray_[5] = 0;
 2c8:	16 82       	std	Z+6, r1	; 0x06
	dataArray_[6] = 0;
 2ca:	17 82       	std	Z+7, r1	; 0x07
	dataArray_[7] = 0;
 2cc:	10 86       	std	Z+8, r1	; 0x08
	
	// PORTB er output.
	DDRB = 0b00000000;
 2ce:	14 b8       	out	0x04, r1	; 4
	
	// Timer 1 til CTC mode.
	// Prescaler = 1
	// Toggle compare match.
	TRANSMITTER_TIMER_A = 0b01000000;
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TRANSMITTER_TIMER_B = 0b00001001;
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	TRANSMITTER_TIMER = 0;
 2dc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2e0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2e4:	08 95       	ret

000002e6 <_ZN9X10SenderD1Ev>:
	// txPin_ = DDRB;
	// txPin_ = 0xFF;
} //X10Sender

// default destructor
X10Sender::~X10Sender()
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
