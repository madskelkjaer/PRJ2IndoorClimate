
Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800200  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800346  00800346  00000caa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0c  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d7  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007db  00000000  00000000  000039db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000041b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098e  00000000  00000000  00004370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000701  00000000  00000000  00004cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000053ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ed       	ldi	r30, 0xD0	; 208
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 34       	cpi	r26, 0x46	; 70
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e4       	ldi	r26, 0x46	; 70
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 34       	cpi	r26, 0x48	; 72
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d5 c4       	rjmp	.+2474   	; 0xacc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/X10Modtager.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c4 54       	subi	r28, 0x44	; 68
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 13a:	ea e6       	ldi	r30, 0x6A	; 106
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	83 60       	ori	r24, 0x03	; 3
 142:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 144:	8d b3       	in	r24, 0x1d	; 29
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8d bb       	out	0x1d, r24	; 29
	sei();
 14a:	78 94       	sei
	
	// Sætter PORTB som input port.
	DDRB &= ~(1 << PB5);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	8f 7d       	andi	r24, 0xDF	; 223
 150:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	82 d0       	rcall	.+260    	; 0x25c <_ZN4UARTC1Ev>
	uart.transmitString("KLAR!!!!");
 158:	62 ef       	ldi	r22, 0xF2	; 242
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	8d d0       	rcall	.+282    	; 0x27c <_ZN4UART14transmitStringEPKc>
	
	uint8_t recieverAddress[4] = {0,0,0,1};
 162:	1a 82       	std	Y+2, r1	; 0x02
 164:	1b 82       	std	Y+3, r1	; 0x03
 166:	1c 82       	std	Y+4, r1	; 0x04
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	8d 83       	std	Y+5, r24	; 0x05
	
	X10Modtager modtager(recieverAddress);
 16c:	be 01       	movw	r22, r28
 16e:	6e 5f       	subi	r22, 0xFE	; 254
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	ce 01       	movw	r24, r28
 174:	06 96       	adiw	r24, 0x06	; 6
 176:	94 d0       	rcall	.+296    	; 0x2a0 <_ZN11X10ModtagerC1EPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x5e>
 182:	00 00       	nop
	
	char command = 'a';
	
	uint8_t recievedBit = 0;
	uint8_t numRecieved = 0;
 184:	00 e0       	ldi	r16, 0x00	; 0
	
	_delay_us(5000);
	
	while (1) 
    {		
		if (interruptFlag == 1)
 186:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__data_end>
 18a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__data_end+0x1>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	d1 f7       	brne	.-12     	; 0x186 <main+0x62>
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x72>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x78>
 19c:	00 00       	nop
		{
			_delay_us(500);
			recievedBit = PINB & (1 << PB5) ? 1 : 0;
 19e:	1d 9b       	sbis	0x03, 5	; 3
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x82>
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <main+0x84>
			/*if (recievedBit == 1) {
				uart.transmitString("1 ");
				} else {
				uart.transmitString("0 ");
			}*/
			modtager.getNextBit(recievedBit);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	ce 01       	movw	r24, r28
 1aa:	06 96       	adiw	r24, 0x06	; 6
			
			command = 'a';
			if (modtager.protocolAndAddressCorrect()) {
 1ac:	0a d1       	rcall	.+532    	; 0x3c2 <_ZN11X10Modtager10getNextBitEh>
 1ae:	ce 01       	movw	r24, r28
 1b0:	06 96       	adiw	r24, 0x06	; 6
 1b2:	87 d0       	rcall	.+270    	; 0x2c2 <_ZN11X10Modtager25protocolAndAddressCorrectEv>
 1b4:	88 23       	and	r24, r24
				command = modtager.getCommand();
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <main+0x9e>
 1b8:	ce 01       	movw	r24, r28
 1ba:	06 96       	adiw	r24, 0x06	; 6
 1bc:	53 d1       	rcall	.+678    	; 0x464 <_ZN11X10Modtager10getCommandEv>
 1be:	18 2f       	mov	r17, r24
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <main+0xa0>
				} else {
				uart.transmitString("0 ");
			}*/
			modtager.getNextBit(recievedBit);
			
			command = 'a';
 1c2:	11 e6       	ldi	r17, 0x61	; 97
			if (modtager.protocolAndAddressCorrect()) {
				command = modtager.getCommand();
			}
			
			if (command == 'O')
 1c4:	1f 34       	cpi	r17, 0x4F	; 79
			{
				uart.transmitString("MODTOG KOMMANDO O\r\n");
 1c6:	11 f5       	brne	.+68     	; 0x20c <main+0xe8>
 1c8:	6b ef       	ldi	r22, 0xFB	; 251
 1ca:	72 e0       	ldi	r23, 0x02	; 2
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	55 d0       	rcall	.+170    	; 0x27c <_ZN4UART14transmitStringEPKc>
				// Åben vindue.
				numRecieved++;
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
				
				sprintf(buffer, "%i", numRecieved);
 1d4:	1f 92       	push	r1
 1d6:	0f 93       	push	r16
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	7e 01       	movw	r14, r28
 1e2:	9b e3       	ldi	r25, 0x3B	; 59
 1e4:	e9 0e       	add	r14, r25
 1e6:	f1 1c       	adc	r15, r1
 1e8:	ff 92       	push	r15
 1ea:	ef 92       	push	r14
				
				uart.transmitString("Modtaget: ");
 1ec:	94 d1       	rcall	.+808    	; 0x516 <sprintf>
 1ee:	62 e1       	ldi	r22, 0x12	; 18
 1f0:	73 e0       	ldi	r23, 0x03	; 3
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
				uart.transmitString(buffer);
 1f6:	42 d0       	rcall	.+132    	; 0x27c <_ZN4UART14transmitStringEPKc>
 1f8:	b7 01       	movw	r22, r14
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	3e d0       	rcall	.+124    	; 0x27c <_ZN4UART14transmitStringEPKc>
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
			}
			
			if (command == 'C')
 20a:	0f 90       	pop	r0
 20c:	13 34       	cpi	r17, 0x43	; 67
			{
				uart.transmitString("MODTOG KOMMANDO C\r\n");
 20e:	29 f4       	brne	.+10     	; 0x21a <main+0xf6>
 210:	6d e1       	ldi	r22, 0x1D	; 29
 212:	73 e0       	ldi	r23, 0x03	; 3
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
				// Luk vindue
			}
			
			if (command == 'H')
 218:	31 d0       	rcall	.+98     	; 0x27c <_ZN4UART14transmitStringEPKc>
 21a:	18 34       	cpi	r17, 0x48	; 72
			{
				uart.transmitString("MODTOG KOMMANDO H\r\n");
 21c:	29 f4       	brne	.+10     	; 0x228 <main+0x104>
 21e:	61 e3       	ldi	r22, 0x31	; 49
 220:	73 e0       	ldi	r23, 0x03	; 3
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	2a d0       	rcall	.+84     	; 0x27c <_ZN4UART14transmitStringEPKc>
				// Halvt åbent vindue
			}
			
			interruptFlag = 0;
 228:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <__data_end+0x1>
 22c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <__data_end>
 230:	aa cf       	rjmp	.-172    	; 0x186 <main+0x62>

00000232 <__vector_5>:
		}
    }
}


ISR(INT4_vect) {
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
	interruptFlag = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <__data_end+0x1>
 248:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <__data_end>
	EIFR = 0x00;
 24c:	1c ba       	out	0x1c, r1	; 28
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 25c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 260:	87 e6       	ldi	r24, 0x67	; 103
 262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 26c:	08 95       	ret

0000026e <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 26e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 272:	85 ff       	sbrs	r24, 5
 274:	fc cf       	rjmp	.-8      	; 0x26e <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 276:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 27a:	08 95       	ret

0000027c <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	8c 01       	movw	r16, r24
 286:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 288:	68 81       	ld	r22, Y
 28a:	66 23       	and	r22, r22
 28c:	21 f0       	breq	.+8      	; 0x296 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 28e:	c8 01       	movw	r24, r16
 290:	ee df       	rcall	.-36     	; 0x26e <_ZN4UART8transmitEh>
		str++;
 292:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 294:	f9 cf       	rjmp	.-14     	; 0x288 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <_ZN11X10ModtagerC1EPh>:


#include "X10Modtager.h"

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
 2a0:	dc 01       	movw	r26, r24
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	94 30       	cpi	r25, 0x04	; 4
 2a6:	60 f4       	brcc	.+24     	; 0x2c0 <_ZN11X10ModtagerC1EPh+0x20>
	{
		address_[i] = address[i];
 2a8:	29 2f       	mov	r18, r25
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	fb 01       	movw	r30, r22
 2ae:	e2 0f       	add	r30, r18
 2b0:	f3 1f       	adc	r31, r19
 2b2:	40 81       	ld	r20, Z
 2b4:	fd 01       	movw	r30, r26
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	41 ab       	std	Z+49, r20	; 0x31

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 2bc:	9f 5f       	subi	r25, 0xFF	; 255
 2be:	f2 cf       	rjmp	.-28     	; 0x2a4 <_ZN11X10ModtagerC1EPh+0x4>
 2c0:	08 95       	ret

000002c2 <_ZN11X10Modtager25protocolAndAddressCorrectEv>:
	
	this->translateFromManchesterCode();
}

bool X10Modtager::protocolAndAddressCorrect()
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	28 97       	sbiw	r28, 0x08	; 8
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	bc 01       	movw	r22, r24
	int initiateProtocol[4] = {1,1,1,0};
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	ea ee       	ldi	r30, 0xEA	; 234
 2dc:	f2 e0       	ldi	r31, 0x02	; 2
 2de:	de 01       	movw	r26, r28
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x20>
	
	for (uint8_t i = 0; i < 4; i++)
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	94 30       	cpi	r25, 0x04	; 4
 2ee:	18 f5       	brcc	.+70     	; 0x336 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x74>
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
 2f0:	29 2f       	mov	r18, r25
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	fb 01       	movw	r30, r22
 2f6:	e2 0f       	add	r30, r18
 2f8:	f3 1f       	adc	r31, r19
 2fa:	40 81       	ld	r20, Z
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	a1 e0       	ldi	r26, 0x01	; 1
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	ac 0f       	add	r26, r28
 30a:	bd 1f       	adc	r27, r29
 30c:	ea 0f       	add	r30, r26
 30e:	fb 1f       	adc	r31, r27
 310:	01 90       	ld	r0, Z+
 312:	f0 81       	ld	r31, Z
 314:	e0 2d       	mov	r30, r0
 316:	4e 17       	cp	r20, r30
 318:	5f 07       	cpc	r21, r31
 31a:	79 f4       	brne	.+30     	; 0x33a <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x78>
		{
			return false;
		}
		
		if (!(dataArray_[i+4] == address_[i]))
 31c:	f9 01       	movw	r30, r18
 31e:	34 96       	adiw	r30, 0x04	; 4
 320:	e6 0f       	add	r30, r22
 322:	f7 1f       	adc	r31, r23
 324:	40 81       	ld	r20, Z
 326:	fb 01       	movw	r30, r22
 328:	e2 0f       	add	r30, r18
 32a:	f3 1f       	adc	r31, r19
 32c:	81 a9       	ldd	r24, Z+49	; 0x31
 32e:	48 13       	cpse	r20, r24
 330:	06 c0       	rjmp	.+12     	; 0x33e <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7c>

bool X10Modtager::protocolAndAddressCorrect()
{
	int initiateProtocol[4] = {1,1,1,0};
	
	for (uint8_t i = 0; i < 4; i++)
 332:	9f 5f       	subi	r25, 0xFF	; 255
 334:	db cf       	rjmp	.-74     	; 0x2ec <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x2a>
		{
			return false;
		}
	}
	
	return true;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	03 c0       	rjmp	.+6      	; 0x340 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
	
	for (uint8_t i = 0; i < 4; i++)
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
		{
			return false;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	01 c0       	rjmp	.+2      	; 0x340 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
		}
		
		if (!(dataArray_[i+4] == address_[i]))
		{
			return false;
 33e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
 340:	28 96       	adiw	r28, 0x08	; 8
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <_ZN11X10Modtager27translateFromManchesterCodeEv>:
	
	return 'a';
}

void X10Modtager::translateFromManchesterCode()
{
 352:	dc 01       	movw	r26, r24
	manchesterError_ = false;
 354:	d0 96       	adiw	r26, 0x30	; 48
 356:	1c 92       	st	X, r1
 358:	d0 97       	sbiw	r26, 0x30	; 48

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 35a:	90 e0       	ldi	r25, 0x00	; 0
void X10Modtager::translateFromManchesterCode()
{
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;
 35c:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 35e:	9f 31       	cpi	r25, 0x1F	; 31
 360:	78 f5       	brcc	.+94     	; 0x3c0 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x6e>
	{
		if (manchesterArray_[i] == 0 && manchesterArray_[i + 1] == 1)
 362:	29 2f       	mov	r18, r25
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	fd 01       	movw	r30, r26
 368:	e2 0f       	add	r30, r18
 36a:	f3 1f       	adc	r31, r19
 36c:	40 89       	ldd	r20, Z+16	; 0x10
 36e:	41 11       	cpse	r20, r1
 370:	0d c0       	rjmp	.+26     	; 0x38c <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
 372:	f9 01       	movw	r30, r18
 374:	31 96       	adiw	r30, 0x01	; 1
 376:	ea 0f       	add	r30, r26
 378:	fb 1f       	adc	r31, r27
 37a:	40 89       	ldd	r20, Z+16	; 0x10
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	31 f4       	brne	.+12     	; 0x38c <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
		{
			dataArray_[dataArrayI] = 1;
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	fd 01       	movw	r30, r26
 384:	e8 0f       	add	r30, r24
 386:	f1 1d       	adc	r31, r1
 388:	20 83       	st	Z, r18
 38a:	17 c0       	rjmp	.+46     	; 0x3ba <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else if (manchesterArray_[i] == 1 && manchesterArray_[i + 1] == 0)
 38c:	fd 01       	movw	r30, r26
 38e:	e2 0f       	add	r30, r18
 390:	f3 1f       	adc	r31, r19
 392:	40 89       	ldd	r20, Z+16	; 0x10
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	69 f4       	brne	.+26     	; 0x3b2 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	fd 01       	movw	r30, r26
 39e:	e2 0f       	add	r30, r18
 3a0:	f3 1f       	adc	r31, r19
 3a2:	20 89       	ldd	r18, Z+16	; 0x10
 3a4:	21 11       	cpse	r18, r1
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
		{
			dataArray_[dataArrayI] = 0;
 3a8:	fd 01       	movw	r30, r26
 3aa:	e8 0f       	add	r30, r24
 3ac:	f1 1d       	adc	r31, r1
 3ae:	10 82       	st	Z, r1
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else
		{
			manchesterError_ = true;
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	d0 96       	adiw	r26, 0x30	; 48
 3b6:	2c 93       	st	X, r18
 3b8:	d0 97       	sbiw	r26, 0x30	; 48
		}
		
		dataArrayI++;
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 3bc:	9e 5f       	subi	r25, 0xFE	; 254
 3be:	cf cf       	rjmp	.-98     	; 0x35e <_ZN11X10Modtager27translateFromManchesterCodeEv+0xc>
 3c0:	08 95       	ret

000003c2 <_ZN11X10Modtager10getNextBitEh>:
	}
	
} //X10Modtager

void X10Modtager::getNextBit(uint8_t nextBit)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	a0 97       	sbiw	r28, 0x20	; 32
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	ac 01       	movw	r20, r24
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	9f 31       	cpi	r25, 0x1F	; 31
 3dc:	80 f4       	brcc	.+32     	; 0x3fe <_ZN11X10Modtager10getNextBitEh+0x3c>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
 3de:	29 2f       	mov	r18, r25
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	31 96       	adiw	r30, 0x01	; 1
 3e6:	e4 0f       	add	r30, r20
 3e8:	f5 1f       	adc	r31, r21
 3ea:	80 89       	ldd	r24, Z+16	; 0x10
 3ec:	e1 e0       	ldi	r30, 0x01	; 1
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ec 0f       	add	r30, r28
 3f2:	fd 1f       	adc	r31, r29
 3f4:	e2 0f       	add	r30, r18
 3f6:	f3 1f       	adc	r31, r19
 3f8:	80 83       	st	Z, r24

void X10Modtager::getNextBit(uint8_t nextBit)
{
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	ee cf       	rjmp	.-36     	; 0x3da <_ZN11X10Modtager10getNextBitEh+0x18>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
	}
	
	nextManchesterArray[31] = nextBit;
 3fe:	68 a3       	std	Y+32, r22	; 0x20
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 32       	cpi	r25, 0x20	; 32
 404:	78 f4       	brcc	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
 406:	29 2f       	mov	r18, r25
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	e1 e0       	ldi	r30, 0x01	; 1
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ec 0f       	add	r30, r28
 410:	fd 1f       	adc	r31, r29
 412:	e2 0f       	add	r30, r18
 414:	f3 1f       	adc	r31, r19
 416:	80 81       	ld	r24, Z
 418:	fa 01       	movw	r30, r20
 41a:	e2 0f       	add	r30, r18
 41c:	f3 1f       	adc	r31, r19
 41e:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	nextManchesterArray[31] = nextBit;
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	ef cf       	rjmp	.-34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
	}
	
	this->translateFromManchesterCode();
 424:	ca 01       	movw	r24, r20
 426:	95 df       	rcall	.-214    	; 0x352 <_ZN11X10Modtager27translateFromManchesterCodeEv>
}
 428:	a0 96       	adiw	r28, 0x20	; 32
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <_ZN11X10Modtager11arraysEqualEPhS0_>:
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	88 30       	cpi	r24, 0x08	; 8
 440:	91 05       	cpc	r25, r1
 442:	64 f4       	brge	.+24     	; 0x45c <_ZN11X10Modtager11arraysEqualEPhS0_+0x22>
	    if (arr1[i] != arr2[i]) {
 444:	fb 01       	movw	r30, r22
 446:	e8 0f       	add	r30, r24
 448:	f9 1f       	adc	r31, r25
 44a:	30 81       	ld	r19, Z
 44c:	fa 01       	movw	r30, r20
 44e:	e8 0f       	add	r30, r24
 450:	f9 1f       	adc	r31, r25
 452:	20 81       	ld	r18, Z
 454:	32 13       	cpse	r19, r18
 456:	04 c0       	rjmp	.+8      	; 0x460 <_ZN11X10Modtager11arraysEqualEPhS0_+0x26>
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	f1 cf       	rjmp	.-30     	; 0x43e <_ZN11X10Modtager11arraysEqualEPhS0_+0x4>
	    if (arr1[i] != arr2[i]) {
		    return false;
	    }
    }
    return true;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
	    if (arr1[i] != arr2[i]) {
		    return false;
 460:	80 e0       	ldi	r24, 0x00	; 0
	    }
    }
    return true;
}
 462:	08 95       	ret

00000464 <_ZN11X10Modtager10getCommandEv>:
	
	return true;
}

char X10Modtager::getCommand()
{
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	28 97       	sbiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	7c 01       	movw	r14, r24
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 484:	28 e0       	ldi	r18, 0x08	; 8
 486:	20 31       	cpi	r18, 0x10	; 16
 488:	88 f4       	brcc	.+34     	; 0x4ac <_ZN11X10Modtager10getCommandEv+0x48>
	{
		command[j - DATA_START] = dataArray_[j];
 48a:	82 2f       	mov	r24, r18
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	fc 01       	movw	r30, r24
 490:	38 97       	sbiw	r30, 0x08	; 8
 492:	d7 01       	movw	r26, r14
 494:	a8 0f       	add	r26, r24
 496:	b9 1f       	adc	r27, r25
 498:	8c 91       	ld	r24, X
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	4c 0f       	add	r20, r28
 4a0:	5d 1f       	adc	r21, r29
 4a2:	e4 0f       	add	r30, r20
 4a4:	f5 1f       	adc	r31, r21
 4a6:	80 83       	st	Z, r24
{
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 4a8:	2f 5f       	subi	r18, 0xFF	; 255
 4aa:	ed cf       	rjmp	.-38     	; 0x486 <_ZN11X10Modtager10getCommandEv+0x22>
 4ac:	10 e0       	ldi	r17, 0x00	; 0
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 4ae:	1b 31       	cpi	r17, 0x1B	; 27
 4b0:	18 f5       	brcc	.+70     	; 0x4f8 <_ZN11X10Modtager10getCommandEv+0x94>
	{
		if (this->arraysEqual(asciiLookup_[i].binary, command))
 4b2:	c1 2e       	mov	r12, r17
 4b4:	d1 2c       	mov	r13, r1
 4b6:	b6 01       	movw	r22, r12
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	6c 0d       	add	r22, r12
 4c6:	7d 1d       	adc	r23, r13
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7d 4f       	sbci	r23, 0xFD	; 253
 4cc:	ae 01       	movw	r20, r28
 4ce:	4f 5f       	subi	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	c7 01       	movw	r24, r14
 4d4:	b2 df       	rcall	.-156    	; 0x43a <_ZN11X10Modtager11arraysEqualEPhS0_>
 4d6:	88 23       	and	r24, r24
 4d8:	69 f0       	breq	.+26     	; 0x4f4 <_ZN11X10Modtager10getCommandEv+0x90>
		{
			return asciiLookup_[i].character;
 4da:	f6 01       	movw	r30, r12
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	ec 0d       	add	r30, r12
 4ea:	fd 1d       	adc	r31, r13
 4ec:	e0 50       	subi	r30, 0x00	; 0
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	80 81       	ld	r24, Z
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <_ZN11X10Modtager10getCommandEv+0x96>
	for (uint8_t j = DATA_START; j < DATA_END; j++)
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 4f4:	1f 5f       	subi	r17, 0xFF	; 255
 4f6:	db cf       	rjmp	.-74     	; 0x4ae <_ZN11X10Modtager10getCommandEv+0x4a>
		{
			return asciiLookup_[i].character;
		}
	}
	
	return 'a';
 4f8:	81 e6       	ldi	r24, 0x61	; 97
}
 4fa:	28 96       	adiw	r28, 0x08	; 8
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	08 95       	ret

00000516 <sprintf>:
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	2e 97       	sbiw	r28, 0x0e	; 14
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	0e 89       	ldd	r16, Y+22	; 0x16
 530:	1f 89       	ldd	r17, Y+23	; 0x17
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	8c 83       	std	Y+4, r24	; 0x04
 536:	1a 83       	std	Y+2, r17	; 0x02
 538:	09 83       	std	Y+1, r16	; 0x01
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	9f e7       	ldi	r25, 0x7F	; 127
 53e:	9e 83       	std	Y+6, r25	; 0x06
 540:	8d 83       	std	Y+5, r24	; 0x05
 542:	ae 01       	movw	r20, r28
 544:	46 5e       	subi	r20, 0xE6	; 230
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	68 8d       	ldd	r22, Y+24	; 0x18
 54a:	79 8d       	ldd	r23, Y+25	; 0x19
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	10 d0       	rcall	.+32     	; 0x572 <vfprintf>
 552:	ef 81       	ldd	r30, Y+7	; 0x07
 554:	f8 85       	ldd	r31, Y+8	; 0x08
 556:	e0 0f       	add	r30, r16
 558:	f1 1f       	adc	r31, r17
 55a:	10 82       	st	Z, r1
 55c:	2e 96       	adiw	r28, 0x0e	; 14
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

00000572 <vfprintf>:
 572:	2f 92       	push	r2
 574:	3f 92       	push	r3
 576:	4f 92       	push	r4
 578:	5f 92       	push	r5
 57a:	6f 92       	push	r6
 57c:	7f 92       	push	r7
 57e:	8f 92       	push	r8
 580:	9f 92       	push	r9
 582:	af 92       	push	r10
 584:	bf 92       	push	r11
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	2b 97       	sbiw	r28, 0x0b	; 11
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	6c 01       	movw	r12, r24
 5a8:	7b 01       	movw	r14, r22
 5aa:	8a 01       	movw	r16, r20
 5ac:	fc 01       	movw	r30, r24
 5ae:	17 82       	std	Z+7, r1	; 0x07
 5b0:	16 82       	std	Z+6, r1	; 0x06
 5b2:	83 81       	ldd	r24, Z+3	; 0x03
 5b4:	81 ff       	sbrs	r24, 1
 5b6:	bf c1       	rjmp	.+894    	; 0x936 <vfprintf+0x3c4>
 5b8:	ce 01       	movw	r24, r28
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	3c 01       	movw	r6, r24
 5be:	f6 01       	movw	r30, r12
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	f7 01       	movw	r30, r14
 5c4:	93 fd       	sbrc	r25, 3
 5c6:	85 91       	lpm	r24, Z+
 5c8:	93 ff       	sbrs	r25, 3
 5ca:	81 91       	ld	r24, Z+
 5cc:	7f 01       	movw	r14, r30
 5ce:	88 23       	and	r24, r24
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <vfprintf+0x62>
 5d2:	ad c1       	rjmp	.+858    	; 0x92e <vfprintf+0x3bc>
 5d4:	85 32       	cpi	r24, 0x25	; 37
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <vfprintf+0x74>
 5d8:	93 fd       	sbrc	r25, 3
 5da:	85 91       	lpm	r24, Z+
 5dc:	93 ff       	sbrs	r25, 3
 5de:	81 91       	ld	r24, Z+
 5e0:	7f 01       	movw	r14, r30
 5e2:	85 32       	cpi	r24, 0x25	; 37
 5e4:	21 f4       	brne	.+8      	; 0x5ee <vfprintf+0x7c>
 5e6:	b6 01       	movw	r22, r12
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	d6 d1       	rcall	.+940    	; 0x998 <fputc>
 5ec:	e8 cf       	rjmp	.-48     	; 0x5be <vfprintf+0x4c>
 5ee:	91 2c       	mov	r9, r1
 5f0:	21 2c       	mov	r2, r1
 5f2:	31 2c       	mov	r3, r1
 5f4:	ff e1       	ldi	r31, 0x1F	; 31
 5f6:	f3 15       	cp	r31, r3
 5f8:	d8 f0       	brcs	.+54     	; 0x630 <vfprintf+0xbe>
 5fa:	8b 32       	cpi	r24, 0x2B	; 43
 5fc:	79 f0       	breq	.+30     	; 0x61c <vfprintf+0xaa>
 5fe:	38 f4       	brcc	.+14     	; 0x60e <vfprintf+0x9c>
 600:	80 32       	cpi	r24, 0x20	; 32
 602:	79 f0       	breq	.+30     	; 0x622 <vfprintf+0xb0>
 604:	83 32       	cpi	r24, 0x23	; 35
 606:	a1 f4       	brne	.+40     	; 0x630 <vfprintf+0xbe>
 608:	23 2d       	mov	r18, r3
 60a:	20 61       	ori	r18, 0x10	; 16
 60c:	1d c0       	rjmp	.+58     	; 0x648 <vfprintf+0xd6>
 60e:	8d 32       	cpi	r24, 0x2D	; 45
 610:	61 f0       	breq	.+24     	; 0x62a <vfprintf+0xb8>
 612:	80 33       	cpi	r24, 0x30	; 48
 614:	69 f4       	brne	.+26     	; 0x630 <vfprintf+0xbe>
 616:	23 2d       	mov	r18, r3
 618:	21 60       	ori	r18, 0x01	; 1
 61a:	16 c0       	rjmp	.+44     	; 0x648 <vfprintf+0xd6>
 61c:	83 2d       	mov	r24, r3
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	38 2e       	mov	r3, r24
 622:	e3 2d       	mov	r30, r3
 624:	e4 60       	ori	r30, 0x04	; 4
 626:	3e 2e       	mov	r3, r30
 628:	2a c0       	rjmp	.+84     	; 0x67e <vfprintf+0x10c>
 62a:	f3 2d       	mov	r31, r3
 62c:	f8 60       	ori	r31, 0x08	; 8
 62e:	1d c0       	rjmp	.+58     	; 0x66a <vfprintf+0xf8>
 630:	37 fc       	sbrc	r3, 7
 632:	2d c0       	rjmp	.+90     	; 0x68e <vfprintf+0x11c>
 634:	20 ed       	ldi	r18, 0xD0	; 208
 636:	28 0f       	add	r18, r24
 638:	2a 30       	cpi	r18, 0x0A	; 10
 63a:	40 f0       	brcs	.+16     	; 0x64c <vfprintf+0xda>
 63c:	8e 32       	cpi	r24, 0x2E	; 46
 63e:	b9 f4       	brne	.+46     	; 0x66e <vfprintf+0xfc>
 640:	36 fc       	sbrc	r3, 6
 642:	75 c1       	rjmp	.+746    	; 0x92e <vfprintf+0x3bc>
 644:	23 2d       	mov	r18, r3
 646:	20 64       	ori	r18, 0x40	; 64
 648:	32 2e       	mov	r3, r18
 64a:	19 c0       	rjmp	.+50     	; 0x67e <vfprintf+0x10c>
 64c:	36 fe       	sbrs	r3, 6
 64e:	06 c0       	rjmp	.+12     	; 0x65c <vfprintf+0xea>
 650:	8a e0       	ldi	r24, 0x0A	; 10
 652:	98 9e       	mul	r9, r24
 654:	20 0d       	add	r18, r0
 656:	11 24       	eor	r1, r1
 658:	92 2e       	mov	r9, r18
 65a:	11 c0       	rjmp	.+34     	; 0x67e <vfprintf+0x10c>
 65c:	ea e0       	ldi	r30, 0x0A	; 10
 65e:	2e 9e       	mul	r2, r30
 660:	20 0d       	add	r18, r0
 662:	11 24       	eor	r1, r1
 664:	22 2e       	mov	r2, r18
 666:	f3 2d       	mov	r31, r3
 668:	f0 62       	ori	r31, 0x20	; 32
 66a:	3f 2e       	mov	r3, r31
 66c:	08 c0       	rjmp	.+16     	; 0x67e <vfprintf+0x10c>
 66e:	8c 36       	cpi	r24, 0x6C	; 108
 670:	21 f4       	brne	.+8      	; 0x67a <vfprintf+0x108>
 672:	83 2d       	mov	r24, r3
 674:	80 68       	ori	r24, 0x80	; 128
 676:	38 2e       	mov	r3, r24
 678:	02 c0       	rjmp	.+4      	; 0x67e <vfprintf+0x10c>
 67a:	88 36       	cpi	r24, 0x68	; 104
 67c:	41 f4       	brne	.+16     	; 0x68e <vfprintf+0x11c>
 67e:	f7 01       	movw	r30, r14
 680:	93 fd       	sbrc	r25, 3
 682:	85 91       	lpm	r24, Z+
 684:	93 ff       	sbrs	r25, 3
 686:	81 91       	ld	r24, Z+
 688:	7f 01       	movw	r14, r30
 68a:	81 11       	cpse	r24, r1
 68c:	b3 cf       	rjmp	.-154    	; 0x5f4 <vfprintf+0x82>
 68e:	98 2f       	mov	r25, r24
 690:	9f 7d       	andi	r25, 0xDF	; 223
 692:	95 54       	subi	r25, 0x45	; 69
 694:	93 30       	cpi	r25, 0x03	; 3
 696:	28 f4       	brcc	.+10     	; 0x6a2 <vfprintf+0x130>
 698:	0c 5f       	subi	r16, 0xFC	; 252
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	9f e3       	ldi	r25, 0x3F	; 63
 69e:	99 83       	std	Y+1, r25	; 0x01
 6a0:	0d c0       	rjmp	.+26     	; 0x6bc <vfprintf+0x14a>
 6a2:	83 36       	cpi	r24, 0x63	; 99
 6a4:	31 f0       	breq	.+12     	; 0x6b2 <vfprintf+0x140>
 6a6:	83 37       	cpi	r24, 0x73	; 115
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <vfprintf+0x154>
 6aa:	83 35       	cpi	r24, 0x53	; 83
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <vfprintf+0x13e>
 6ae:	55 c0       	rjmp	.+170    	; 0x75a <vfprintf+0x1e8>
 6b0:	20 c0       	rjmp	.+64     	; 0x6f2 <vfprintf+0x180>
 6b2:	f8 01       	movw	r30, r16
 6b4:	80 81       	ld	r24, Z
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	88 24       	eor	r8, r8
 6be:	83 94       	inc	r8
 6c0:	91 2c       	mov	r9, r1
 6c2:	53 01       	movw	r10, r6
 6c4:	12 c0       	rjmp	.+36     	; 0x6ea <vfprintf+0x178>
 6c6:	28 01       	movw	r4, r16
 6c8:	f2 e0       	ldi	r31, 0x02	; 2
 6ca:	4f 0e       	add	r4, r31
 6cc:	51 1c       	adc	r5, r1
 6ce:	f8 01       	movw	r30, r16
 6d0:	a0 80       	ld	r10, Z
 6d2:	b1 80       	ldd	r11, Z+1	; 0x01
 6d4:	36 fe       	sbrs	r3, 6
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <vfprintf+0x16c>
 6d8:	69 2d       	mov	r22, r9
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0x170>
 6de:	6f ef       	ldi	r22, 0xFF	; 255
 6e0:	7f ef       	ldi	r23, 0xFF	; 255
 6e2:	c5 01       	movw	r24, r10
 6e4:	4e d1       	rcall	.+668    	; 0x982 <strnlen>
 6e6:	4c 01       	movw	r8, r24
 6e8:	82 01       	movw	r16, r4
 6ea:	f3 2d       	mov	r31, r3
 6ec:	ff 77       	andi	r31, 0x7F	; 127
 6ee:	3f 2e       	mov	r3, r31
 6f0:	15 c0       	rjmp	.+42     	; 0x71c <vfprintf+0x1aa>
 6f2:	28 01       	movw	r4, r16
 6f4:	22 e0       	ldi	r18, 0x02	; 2
 6f6:	42 0e       	add	r4, r18
 6f8:	51 1c       	adc	r5, r1
 6fa:	f8 01       	movw	r30, r16
 6fc:	a0 80       	ld	r10, Z
 6fe:	b1 80       	ldd	r11, Z+1	; 0x01
 700:	36 fe       	sbrs	r3, 6
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x198>
 704:	69 2d       	mov	r22, r9
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <vfprintf+0x19c>
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	c5 01       	movw	r24, r10
 710:	2d d1       	rcall	.+602    	; 0x96c <strnlen_P>
 712:	4c 01       	movw	r8, r24
 714:	f3 2d       	mov	r31, r3
 716:	f0 68       	ori	r31, 0x80	; 128
 718:	3f 2e       	mov	r3, r31
 71a:	82 01       	movw	r16, r4
 71c:	33 fc       	sbrc	r3, 3
 71e:	19 c0       	rjmp	.+50     	; 0x752 <vfprintf+0x1e0>
 720:	82 2d       	mov	r24, r2
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	88 16       	cp	r8, r24
 726:	99 06       	cpc	r9, r25
 728:	a0 f4       	brcc	.+40     	; 0x752 <vfprintf+0x1e0>
 72a:	b6 01       	movw	r22, r12
 72c:	80 e2       	ldi	r24, 0x20	; 32
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	33 d1       	rcall	.+614    	; 0x998 <fputc>
 732:	2a 94       	dec	r2
 734:	f5 cf       	rjmp	.-22     	; 0x720 <vfprintf+0x1ae>
 736:	f5 01       	movw	r30, r10
 738:	37 fc       	sbrc	r3, 7
 73a:	85 91       	lpm	r24, Z+
 73c:	37 fe       	sbrs	r3, 7
 73e:	81 91       	ld	r24, Z+
 740:	5f 01       	movw	r10, r30
 742:	b6 01       	movw	r22, r12
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	28 d1       	rcall	.+592    	; 0x998 <fputc>
 748:	21 10       	cpse	r2, r1
 74a:	2a 94       	dec	r2
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	82 1a       	sub	r8, r18
 750:	91 08       	sbc	r9, r1
 752:	81 14       	cp	r8, r1
 754:	91 04       	cpc	r9, r1
 756:	79 f7       	brne	.-34     	; 0x736 <vfprintf+0x1c4>
 758:	e1 c0       	rjmp	.+450    	; 0x91c <vfprintf+0x3aa>
 75a:	84 36       	cpi	r24, 0x64	; 100
 75c:	11 f0       	breq	.+4      	; 0x762 <vfprintf+0x1f0>
 75e:	89 36       	cpi	r24, 0x69	; 105
 760:	39 f5       	brne	.+78     	; 0x7b0 <vfprintf+0x23e>
 762:	f8 01       	movw	r30, r16
 764:	37 fe       	sbrs	r3, 7
 766:	07 c0       	rjmp	.+14     	; 0x776 <vfprintf+0x204>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	82 81       	ldd	r24, Z+2	; 0x02
 76e:	93 81       	ldd	r25, Z+3	; 0x03
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	08 c0       	rjmp	.+16     	; 0x786 <vfprintf+0x214>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	07 2e       	mov	r0, r23
 77c:	00 0c       	add	r0, r0
 77e:	88 0b       	sbc	r24, r24
 780:	99 0b       	sbc	r25, r25
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	f3 2d       	mov	r31, r3
 788:	ff 76       	andi	r31, 0x6F	; 111
 78a:	3f 2e       	mov	r3, r31
 78c:	97 ff       	sbrs	r25, 7
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <vfprintf+0x230>
 790:	90 95       	com	r25
 792:	80 95       	com	r24
 794:	70 95       	com	r23
 796:	61 95       	neg	r22
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	f0 68       	ori	r31, 0x80	; 128
 7a0:	3f 2e       	mov	r3, r31
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	a3 01       	movw	r20, r6
 7a8:	33 d1       	rcall	.+614    	; 0xa10 <__ultoa_invert>
 7aa:	88 2e       	mov	r8, r24
 7ac:	86 18       	sub	r8, r6
 7ae:	44 c0       	rjmp	.+136    	; 0x838 <vfprintf+0x2c6>
 7b0:	85 37       	cpi	r24, 0x75	; 117
 7b2:	31 f4       	brne	.+12     	; 0x7c0 <vfprintf+0x24e>
 7b4:	23 2d       	mov	r18, r3
 7b6:	2f 7e       	andi	r18, 0xEF	; 239
 7b8:	b2 2e       	mov	r11, r18
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	25 c0       	rjmp	.+74     	; 0x80a <vfprintf+0x298>
 7c0:	93 2d       	mov	r25, r3
 7c2:	99 7f       	andi	r25, 0xF9	; 249
 7c4:	b9 2e       	mov	r11, r25
 7c6:	8f 36       	cpi	r24, 0x6F	; 111
 7c8:	c1 f0       	breq	.+48     	; 0x7fa <vfprintf+0x288>
 7ca:	18 f4       	brcc	.+6      	; 0x7d2 <vfprintf+0x260>
 7cc:	88 35       	cpi	r24, 0x58	; 88
 7ce:	79 f0       	breq	.+30     	; 0x7ee <vfprintf+0x27c>
 7d0:	ae c0       	rjmp	.+348    	; 0x92e <vfprintf+0x3bc>
 7d2:	80 37       	cpi	r24, 0x70	; 112
 7d4:	19 f0       	breq	.+6      	; 0x7dc <vfprintf+0x26a>
 7d6:	88 37       	cpi	r24, 0x78	; 120
 7d8:	21 f0       	breq	.+8      	; 0x7e2 <vfprintf+0x270>
 7da:	a9 c0       	rjmp	.+338    	; 0x92e <vfprintf+0x3bc>
 7dc:	e9 2f       	mov	r30, r25
 7de:	e0 61       	ori	r30, 0x10	; 16
 7e0:	be 2e       	mov	r11, r30
 7e2:	b4 fe       	sbrs	r11, 4
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <vfprintf+0x28e>
 7e6:	fb 2d       	mov	r31, r11
 7e8:	f4 60       	ori	r31, 0x04	; 4
 7ea:	bf 2e       	mov	r11, r31
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x28e>
 7ee:	34 fe       	sbrs	r3, 4
 7f0:	0a c0       	rjmp	.+20     	; 0x806 <vfprintf+0x294>
 7f2:	29 2f       	mov	r18, r25
 7f4:	26 60       	ori	r18, 0x06	; 6
 7f6:	b2 2e       	mov	r11, r18
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x294>
 7fa:	28 e0       	ldi	r18, 0x08	; 8
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <vfprintf+0x298>
 800:	20 e1       	ldi	r18, 0x10	; 16
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <vfprintf+0x298>
 806:	20 e1       	ldi	r18, 0x10	; 16
 808:	32 e0       	ldi	r19, 0x02	; 2
 80a:	f8 01       	movw	r30, r16
 80c:	b7 fe       	sbrs	r11, 7
 80e:	07 c0       	rjmp	.+14     	; 0x81e <vfprintf+0x2ac>
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	0c 5f       	subi	r16, 0xFC	; 252
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	06 c0       	rjmp	.+12     	; 0x82a <vfprintf+0x2b8>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	a3 01       	movw	r20, r6
 82c:	f1 d0       	rcall	.+482    	; 0xa10 <__ultoa_invert>
 82e:	88 2e       	mov	r8, r24
 830:	86 18       	sub	r8, r6
 832:	fb 2d       	mov	r31, r11
 834:	ff 77       	andi	r31, 0x7F	; 127
 836:	3f 2e       	mov	r3, r31
 838:	36 fe       	sbrs	r3, 6
 83a:	0d c0       	rjmp	.+26     	; 0x856 <vfprintf+0x2e4>
 83c:	23 2d       	mov	r18, r3
 83e:	2e 7f       	andi	r18, 0xFE	; 254
 840:	a2 2e       	mov	r10, r18
 842:	89 14       	cp	r8, r9
 844:	58 f4       	brcc	.+22     	; 0x85c <vfprintf+0x2ea>
 846:	34 fe       	sbrs	r3, 4
 848:	0b c0       	rjmp	.+22     	; 0x860 <vfprintf+0x2ee>
 84a:	32 fc       	sbrc	r3, 2
 84c:	09 c0       	rjmp	.+18     	; 0x860 <vfprintf+0x2ee>
 84e:	83 2d       	mov	r24, r3
 850:	8e 7e       	andi	r24, 0xEE	; 238
 852:	a8 2e       	mov	r10, r24
 854:	05 c0       	rjmp	.+10     	; 0x860 <vfprintf+0x2ee>
 856:	b8 2c       	mov	r11, r8
 858:	a3 2c       	mov	r10, r3
 85a:	03 c0       	rjmp	.+6      	; 0x862 <vfprintf+0x2f0>
 85c:	b8 2c       	mov	r11, r8
 85e:	01 c0       	rjmp	.+2      	; 0x862 <vfprintf+0x2f0>
 860:	b9 2c       	mov	r11, r9
 862:	a4 fe       	sbrs	r10, 4
 864:	0f c0       	rjmp	.+30     	; 0x884 <vfprintf+0x312>
 866:	fe 01       	movw	r30, r28
 868:	e8 0d       	add	r30, r8
 86a:	f1 1d       	adc	r31, r1
 86c:	80 81       	ld	r24, Z
 86e:	80 33       	cpi	r24, 0x30	; 48
 870:	21 f4       	brne	.+8      	; 0x87a <vfprintf+0x308>
 872:	9a 2d       	mov	r25, r10
 874:	99 7e       	andi	r25, 0xE9	; 233
 876:	a9 2e       	mov	r10, r25
 878:	09 c0       	rjmp	.+18     	; 0x88c <vfprintf+0x31a>
 87a:	a2 fe       	sbrs	r10, 2
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x318>
 87e:	b3 94       	inc	r11
 880:	b3 94       	inc	r11
 882:	04 c0       	rjmp	.+8      	; 0x88c <vfprintf+0x31a>
 884:	8a 2d       	mov	r24, r10
 886:	86 78       	andi	r24, 0x86	; 134
 888:	09 f0       	breq	.+2      	; 0x88c <vfprintf+0x31a>
 88a:	b3 94       	inc	r11
 88c:	a3 fc       	sbrc	r10, 3
 88e:	10 c0       	rjmp	.+32     	; 0x8b0 <vfprintf+0x33e>
 890:	a0 fe       	sbrs	r10, 0
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <vfprintf+0x32e>
 894:	b2 14       	cp	r11, r2
 896:	80 f4       	brcc	.+32     	; 0x8b8 <vfprintf+0x346>
 898:	28 0c       	add	r2, r8
 89a:	92 2c       	mov	r9, r2
 89c:	9b 18       	sub	r9, r11
 89e:	0d c0       	rjmp	.+26     	; 0x8ba <vfprintf+0x348>
 8a0:	b2 14       	cp	r11, r2
 8a2:	58 f4       	brcc	.+22     	; 0x8ba <vfprintf+0x348>
 8a4:	b6 01       	movw	r22, r12
 8a6:	80 e2       	ldi	r24, 0x20	; 32
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	76 d0       	rcall	.+236    	; 0x998 <fputc>
 8ac:	b3 94       	inc	r11
 8ae:	f8 cf       	rjmp	.-16     	; 0x8a0 <vfprintf+0x32e>
 8b0:	b2 14       	cp	r11, r2
 8b2:	18 f4       	brcc	.+6      	; 0x8ba <vfprintf+0x348>
 8b4:	2b 18       	sub	r2, r11
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x34a>
 8b8:	98 2c       	mov	r9, r8
 8ba:	21 2c       	mov	r2, r1
 8bc:	a4 fe       	sbrs	r10, 4
 8be:	0f c0       	rjmp	.+30     	; 0x8de <vfprintf+0x36c>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e3       	ldi	r24, 0x30	; 48
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	68 d0       	rcall	.+208    	; 0x998 <fputc>
 8c8:	a2 fe       	sbrs	r10, 2
 8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <vfprintf+0x386>
 8cc:	a1 fc       	sbrc	r10, 1
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <vfprintf+0x364>
 8d0:	88 e7       	ldi	r24, 0x78	; 120
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x368>
 8d6:	88 e5       	ldi	r24, 0x58	; 88
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	b6 01       	movw	r22, r12
 8dc:	0c c0       	rjmp	.+24     	; 0x8f6 <vfprintf+0x384>
 8de:	8a 2d       	mov	r24, r10
 8e0:	86 78       	andi	r24, 0x86	; 134
 8e2:	51 f0       	breq	.+20     	; 0x8f8 <vfprintf+0x386>
 8e4:	a1 fe       	sbrs	r10, 1
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x37a>
 8e8:	8b e2       	ldi	r24, 0x2B	; 43
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <vfprintf+0x37c>
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	a7 fc       	sbrc	r10, 7
 8f0:	8d e2       	ldi	r24, 0x2D	; 45
 8f2:	b6 01       	movw	r22, r12
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	50 d0       	rcall	.+160    	; 0x998 <fputc>
 8f8:	89 14       	cp	r8, r9
 8fa:	30 f4       	brcc	.+12     	; 0x908 <vfprintf+0x396>
 8fc:	b6 01       	movw	r22, r12
 8fe:	80 e3       	ldi	r24, 0x30	; 48
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	4a d0       	rcall	.+148    	; 0x998 <fputc>
 904:	9a 94       	dec	r9
 906:	f8 cf       	rjmp	.-16     	; 0x8f8 <vfprintf+0x386>
 908:	8a 94       	dec	r8
 90a:	f3 01       	movw	r30, r6
 90c:	e8 0d       	add	r30, r8
 90e:	f1 1d       	adc	r31, r1
 910:	80 81       	ld	r24, Z
 912:	b6 01       	movw	r22, r12
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	40 d0       	rcall	.+128    	; 0x998 <fputc>
 918:	81 10       	cpse	r8, r1
 91a:	f6 cf       	rjmp	.-20     	; 0x908 <vfprintf+0x396>
 91c:	22 20       	and	r2, r2
 91e:	09 f4       	brne	.+2      	; 0x922 <vfprintf+0x3b0>
 920:	4e ce       	rjmp	.-868    	; 0x5be <vfprintf+0x4c>
 922:	b6 01       	movw	r22, r12
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	37 d0       	rcall	.+110    	; 0x998 <fputc>
 92a:	2a 94       	dec	r2
 92c:	f7 cf       	rjmp	.-18     	; 0x91c <vfprintf+0x3aa>
 92e:	f6 01       	movw	r30, r12
 930:	86 81       	ldd	r24, Z+6	; 0x06
 932:	97 81       	ldd	r25, Z+7	; 0x07
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x3c8>
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	2b 96       	adiw	r28, 0x0b	; 11
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	de bf       	out	0x3e, r29	; 62
 942:	0f be       	out	0x3f, r0	; 63
 944:	cd bf       	out	0x3d, r28	; 61
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	ff 90       	pop	r15
 950:	ef 90       	pop	r14
 952:	df 90       	pop	r13
 954:	cf 90       	pop	r12
 956:	bf 90       	pop	r11
 958:	af 90       	pop	r10
 95a:	9f 90       	pop	r9
 95c:	8f 90       	pop	r8
 95e:	7f 90       	pop	r7
 960:	6f 90       	pop	r6
 962:	5f 90       	pop	r5
 964:	4f 90       	pop	r4
 966:	3f 90       	pop	r3
 968:	2f 90       	pop	r2
 96a:	08 95       	ret

0000096c <strnlen_P>:
 96c:	fc 01       	movw	r30, r24
 96e:	05 90       	lpm	r0, Z+
 970:	61 50       	subi	r22, 0x01	; 1
 972:	70 40       	sbci	r23, 0x00	; 0
 974:	01 10       	cpse	r0, r1
 976:	d8 f7       	brcc	.-10     	; 0x96e <strnlen_P+0x2>
 978:	80 95       	com	r24
 97a:	90 95       	com	r25
 97c:	8e 0f       	add	r24, r30
 97e:	9f 1f       	adc	r25, r31
 980:	08 95       	ret

00000982 <strnlen>:
 982:	fc 01       	movw	r30, r24
 984:	61 50       	subi	r22, 0x01	; 1
 986:	70 40       	sbci	r23, 0x00	; 0
 988:	01 90       	ld	r0, Z+
 98a:	01 10       	cpse	r0, r1
 98c:	d8 f7       	brcc	.-10     	; 0x984 <strnlen+0x2>
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	8e 0f       	add	r24, r30
 994:	9f 1f       	adc	r25, r31
 996:	08 95       	ret

00000998 <fputc>:
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	fb 01       	movw	r30, r22
 9a2:	23 81       	ldd	r18, Z+3	; 0x03
 9a4:	21 fd       	sbrc	r18, 1
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <fputc+0x16>
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	9f ef       	ldi	r25, 0xFF	; 255
 9ac:	2c c0       	rjmp	.+88     	; 0xa06 <fputc+0x6e>
 9ae:	22 ff       	sbrs	r18, 2
 9b0:	16 c0       	rjmp	.+44     	; 0x9de <fputc+0x46>
 9b2:	46 81       	ldd	r20, Z+6	; 0x06
 9b4:	57 81       	ldd	r21, Z+7	; 0x07
 9b6:	24 81       	ldd	r18, Z+4	; 0x04
 9b8:	35 81       	ldd	r19, Z+5	; 0x05
 9ba:	42 17       	cp	r20, r18
 9bc:	53 07       	cpc	r21, r19
 9be:	44 f4       	brge	.+16     	; 0x9d0 <fputc+0x38>
 9c0:	a0 81       	ld	r26, Z
 9c2:	b1 81       	ldd	r27, Z+1	; 0x01
 9c4:	9d 01       	movw	r18, r26
 9c6:	2f 5f       	subi	r18, 0xFF	; 255
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ca:	31 83       	std	Z+1, r19	; 0x01
 9cc:	20 83       	st	Z, r18
 9ce:	8c 93       	st	X, r24
 9d0:	26 81       	ldd	r18, Z+6	; 0x06
 9d2:	37 81       	ldd	r19, Z+7	; 0x07
 9d4:	2f 5f       	subi	r18, 0xFF	; 255
 9d6:	3f 4f       	sbci	r19, 0xFF	; 255
 9d8:	37 83       	std	Z+7, r19	; 0x07
 9da:	26 83       	std	Z+6, r18	; 0x06
 9dc:	14 c0       	rjmp	.+40     	; 0xa06 <fputc+0x6e>
 9de:	8b 01       	movw	r16, r22
 9e0:	ec 01       	movw	r28, r24
 9e2:	fb 01       	movw	r30, r22
 9e4:	00 84       	ldd	r0, Z+8	; 0x08
 9e6:	f1 85       	ldd	r31, Z+9	; 0x09
 9e8:	e0 2d       	mov	r30, r0
 9ea:	19 95       	eicall
 9ec:	89 2b       	or	r24, r25
 9ee:	e1 f6       	brne	.-72     	; 0x9a8 <fputc+0x10>
 9f0:	d8 01       	movw	r26, r16
 9f2:	16 96       	adiw	r26, 0x06	; 6
 9f4:	8d 91       	ld	r24, X+
 9f6:	9c 91       	ld	r25, X
 9f8:	17 97       	sbiw	r26, 0x07	; 7
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	17 96       	adiw	r26, 0x07	; 7
 9fe:	9c 93       	st	X, r25
 a00:	8e 93       	st	-X, r24
 a02:	16 97       	sbiw	r26, 0x06	; 6
 a04:	ce 01       	movw	r24, r28
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	08 95       	ret

00000a10 <__ultoa_invert>:
 a10:	fa 01       	movw	r30, r20
 a12:	aa 27       	eor	r26, r26
 a14:	28 30       	cpi	r18, 0x08	; 8
 a16:	51 f1       	breq	.+84     	; 0xa6c <__ultoa_invert+0x5c>
 a18:	20 31       	cpi	r18, 0x10	; 16
 a1a:	81 f1       	breq	.+96     	; 0xa7c <__ultoa_invert+0x6c>
 a1c:	e8 94       	clt
 a1e:	6f 93       	push	r22
 a20:	6e 7f       	andi	r22, 0xFE	; 254
 a22:	6e 5f       	subi	r22, 0xFE	; 254
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	af 4f       	sbci	r26, 0xFF	; 255
 a2c:	b1 e0       	ldi	r27, 0x01	; 1
 a2e:	3e d0       	rcall	.+124    	; 0xaac <__ultoa_invert+0x9c>
 a30:	b4 e0       	ldi	r27, 0x04	; 4
 a32:	3c d0       	rcall	.+120    	; 0xaac <__ultoa_invert+0x9c>
 a34:	67 0f       	add	r22, r23
 a36:	78 1f       	adc	r23, r24
 a38:	89 1f       	adc	r24, r25
 a3a:	9a 1f       	adc	r25, r26
 a3c:	a1 1d       	adc	r26, r1
 a3e:	68 0f       	add	r22, r24
 a40:	79 1f       	adc	r23, r25
 a42:	8a 1f       	adc	r24, r26
 a44:	91 1d       	adc	r25, r1
 a46:	a1 1d       	adc	r26, r1
 a48:	6a 0f       	add	r22, r26
 a4a:	71 1d       	adc	r23, r1
 a4c:	81 1d       	adc	r24, r1
 a4e:	91 1d       	adc	r25, r1
 a50:	a1 1d       	adc	r26, r1
 a52:	20 d0       	rcall	.+64     	; 0xa94 <__ultoa_invert+0x84>
 a54:	09 f4       	brne	.+2      	; 0xa58 <__ultoa_invert+0x48>
 a56:	68 94       	set
 a58:	3f 91       	pop	r19
 a5a:	2a e0       	ldi	r18, 0x0A	; 10
 a5c:	26 9f       	mul	r18, r22
 a5e:	11 24       	eor	r1, r1
 a60:	30 19       	sub	r19, r0
 a62:	30 5d       	subi	r19, 0xD0	; 208
 a64:	31 93       	st	Z+, r19
 a66:	de f6       	brtc	.-74     	; 0xa1e <__ultoa_invert+0xe>
 a68:	cf 01       	movw	r24, r30
 a6a:	08 95       	ret
 a6c:	46 2f       	mov	r20, r22
 a6e:	47 70       	andi	r20, 0x07	; 7
 a70:	40 5d       	subi	r20, 0xD0	; 208
 a72:	41 93       	st	Z+, r20
 a74:	b3 e0       	ldi	r27, 0x03	; 3
 a76:	0f d0       	rcall	.+30     	; 0xa96 <__ultoa_invert+0x86>
 a78:	c9 f7       	brne	.-14     	; 0xa6c <__ultoa_invert+0x5c>
 a7a:	f6 cf       	rjmp	.-20     	; 0xa68 <__ultoa_invert+0x58>
 a7c:	46 2f       	mov	r20, r22
 a7e:	4f 70       	andi	r20, 0x0F	; 15
 a80:	40 5d       	subi	r20, 0xD0	; 208
 a82:	4a 33       	cpi	r20, 0x3A	; 58
 a84:	18 f0       	brcs	.+6      	; 0xa8c <__ultoa_invert+0x7c>
 a86:	49 5d       	subi	r20, 0xD9	; 217
 a88:	31 fd       	sbrc	r19, 1
 a8a:	40 52       	subi	r20, 0x20	; 32
 a8c:	41 93       	st	Z+, r20
 a8e:	02 d0       	rcall	.+4      	; 0xa94 <__ultoa_invert+0x84>
 a90:	a9 f7       	brne	.-22     	; 0xa7c <__ultoa_invert+0x6c>
 a92:	ea cf       	rjmp	.-44     	; 0xa68 <__ultoa_invert+0x58>
 a94:	b4 e0       	ldi	r27, 0x04	; 4
 a96:	a6 95       	lsr	r26
 a98:	97 95       	ror	r25
 a9a:	87 95       	ror	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x86>
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	61 05       	cpc	r22, r1
 aa8:	71 05       	cpc	r23, r1
 aaa:	08 95       	ret
 aac:	9b 01       	movw	r18, r22
 aae:	ac 01       	movw	r20, r24
 ab0:	0a 2e       	mov	r0, r26
 ab2:	06 94       	lsr	r0
 ab4:	57 95       	ror	r21
 ab6:	47 95       	ror	r20
 ab8:	37 95       	ror	r19
 aba:	27 95       	ror	r18
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0xa2>
 ac0:	62 0f       	add	r22, r18
 ac2:	73 1f       	adc	r23, r19
 ac4:	84 1f       	adc	r24, r20
 ac6:	95 1f       	adc	r25, r21
 ac8:	a0 1d       	adc	r26, r0
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
