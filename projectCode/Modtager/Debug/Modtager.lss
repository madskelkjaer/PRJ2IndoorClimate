
Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800200  00000b38  00000bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800346  00800346  00000d12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca2  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012db  00000000  00000000  00002b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  00003e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000046e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a37  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000773  00000000  00000000  00005327  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005a9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	23 c1       	rjmp	.+582    	; 0x25c <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e3       	ldi	r30, 0x38	; 56
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 34       	cpi	r26, 0x46	; 70
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e4       	ldi	r26, 0x46	; 70
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 34       	cpi	r26, 0x48	; 72
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	09 c5       	rjmp	.+2578   	; 0xb34 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/LedDriver.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c5 54       	subi	r28, 0x45	; 69
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 13a:	ea e6       	ldi	r30, 0x6A	; 106
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	83 60       	ori	r24, 0x03	; 3
 142:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 144:	8d b3       	in	r24, 0x1d	; 29
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8d bb       	out	0x1d, r24	; 29
	sei();
 14a:	78 94       	sei
	
	// Sætter PORTB som input port.
	DDRB &= ~(1 << PB5);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	8f 7d       	andi	r24, 0xDF	; 223
 150:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= (1 << PB4);
 152:	84 b1       	in	r24, 0x04	; 4
 154:	80 61       	ori	r24, 0x10	; 16
 156:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB6); // Output porte til LED'er.
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB7);
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	80 68       	ori	r24, 0x80	; 128
 162:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	ad d0       	rcall	.+346    	; 0x2c4 <_ZN4UARTC1Ev>
	uart.transmitString("KLAR!!!!");
 16a:	62 ef       	ldi	r22, 0xF2	; 242
 16c:	72 e0       	ldi	r23, 0x02	; 2
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	b8 d0       	rcall	.+368    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
	
	uint8_t recieverAddress[4] = {0,0,0,1};
 174:	1a 82       	std	Y+2, r1	; 0x02
 176:	1b 82       	std	Y+3, r1	; 0x03
 178:	1c 82       	std	Y+4, r1	; 0x04
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	8d 83       	std	Y+5, r24	; 0x05
	
	X10Modtager modtager(recieverAddress);
 17e:	be 01       	movw	r22, r28
 180:	6e 5f       	subi	r22, 0xFE	; 254
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	ce 01       	movw	r24, r28
 186:	06 96       	adiw	r24, 0x06	; 6
 188:	bf d0       	rcall	.+382    	; 0x308 <_ZN11X10ModtagerC1EPh>
	
	LedDriver led;
 18a:	ce 01       	movw	r24, r28
 18c:	cb 96       	adiw	r24, 0x3b	; 59
 18e:	7b d0       	rcall	.+246    	; 0x286 <_ZN9LedDriverC1Ev>
 190:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	9e e4       	ldi	r25, 0x4E	; 78
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x70>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x76>
 19a:	00 00       	nop
 19c:	00 e0       	ldi	r16, 0x00	; 0
	
	char command = 'a';
	
	uint8_t recievedBit = 0;
	uint8_t numRecieved = 0;
 19e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__data_end>
	
	_delay_us(5000);
	
	while (1) 
    {		
		if (interruptFlag == 1)
 1a2:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__data_end+0x1>
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	d1 f7       	brne	.-12     	; 0x19e <main+0x7a>
 1aa:	8f ec       	ldi	r24, 0xCF	; 207
 1ac:	97 e0       	ldi	r25, 0x07	; 7
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x8a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x90>
 1b4:	00 00       	nop
 1b6:	1d 9b       	sbis	0x03, 5	; 3
		{
			_delay_us(500);
			recievedBit = PINB & (1 << PB5) ? 1 : 0;
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x9a>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <main+0x9c>
 1be:	60 e0       	ldi	r22, 0x00	; 0
			/*if (recievedBit == 1) {
				uart.transmitString("1 ");
				} else {
				uart.transmitString("0 ");
			}*/
			modtager.getNextBit(recievedBit);
 1c0:	ce 01       	movw	r24, r28
 1c2:	06 96       	adiw	r24, 0x06	; 6
 1c4:	32 d1       	rcall	.+612    	; 0x42a <_ZN11X10Modtager10getNextBitEh>
			
			command = 'a';
			if (modtager.protocolAndAddressCorrect()) {
 1c6:	ce 01       	movw	r24, r28
 1c8:	06 96       	adiw	r24, 0x06	; 6
 1ca:	af d0       	rcall	.+350    	; 0x32a <_ZN11X10Modtager25protocolAndAddressCorrectEv>
 1cc:	88 23       	and	r24, r24
 1ce:	29 f0       	breq	.+10     	; 0x1da <main+0xb6>
				command = modtager.getCommand();
 1d0:	ce 01       	movw	r24, r28
 1d2:	06 96       	adiw	r24, 0x06	; 6
 1d4:	7b d1       	rcall	.+758    	; 0x4cc <_ZN11X10Modtager10getCommandEv>
 1d6:	18 2f       	mov	r17, r24
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <main+0xb8>
 1da:	11 e6       	ldi	r17, 0x61	; 97
			}
			
			if (command == 'O')
 1dc:	1f 34       	cpi	r17, 0x4F	; 79
 1de:	29 f5       	brne	.+74     	; 0x22a <main+0x106>
			{
				uart.transmitString("MODTOG KOMMANDO O\r\n");
 1e0:	6b ef       	ldi	r22, 0xFB	; 251
 1e2:	72 e0       	ldi	r23, 0x02	; 2
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	7d d0       	rcall	.+250    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
				// Åben vindue.
				numRecieved++;
 1ea:	0f 5f       	subi	r16, 0xFF	; 255
				led.LEDopen();
 1ec:	ce 01       	movw	r24, r28
 1ee:	cb 96       	adiw	r24, 0x3b	; 59
 1f0:	4b d0       	rcall	.+150    	; 0x288 <_ZN9LedDriver7LEDopenEv>
 1f2:	1f 92       	push	r1
				
				sprintf(buffer, "%i", numRecieved);
 1f4:	0f 93       	push	r16
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	93 e0       	ldi	r25, 0x03	; 3
 1fa:	9f 93       	push	r25
 1fc:	8f 93       	push	r24
 1fe:	7e 01       	movw	r14, r28
 200:	9c e3       	ldi	r25, 0x3C	; 60
 202:	e9 0e       	add	r14, r25
 204:	f1 1c       	adc	r15, r1
 206:	ff 92       	push	r15
 208:	ef 92       	push	r14
 20a:	b9 d1       	rcall	.+882    	; 0x57e <sprintf>
				
				uart.transmitString("Modtaget: ");
 20c:	62 e1       	ldi	r22, 0x12	; 18
 20e:	73 e0       	ldi	r23, 0x03	; 3
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	67 d0       	rcall	.+206    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
 216:	b7 01       	movw	r22, r14
				uart.transmitString(buffer);
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	63 d0       	rcall	.+198    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
			}
			
			if (command == 'C')
 22a:	13 34       	cpi	r17, 0x43	; 67
 22c:	41 f4       	brne	.+16     	; 0x23e <main+0x11a>
			{
				uart.transmitString("MODTOG KOMMANDO C\r\n");
 22e:	6d e1       	ldi	r22, 0x1D	; 29
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	56 d0       	rcall	.+172    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
				// Luk vindue
				led.LEDclosed();
 238:	ce 01       	movw	r24, r28
 23a:	cb 96       	adiw	r24, 0x3b	; 59
 23c:	39 d0       	rcall	.+114    	; 0x2b0 <_ZN9LedDriver9LEDclosedEv>
 23e:	18 34       	cpi	r17, 0x48	; 72
			}
			
			if (command == 'H')
 240:	41 f4       	brne	.+16     	; 0x252 <main+0x12e>
 242:	61 e3       	ldi	r22, 0x31	; 49
			{
				uart.transmitString("MODTOG KOMMANDO H\r\n");
 244:	73 e0       	ldi	r23, 0x03	; 3
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	4c d0       	rcall	.+152    	; 0x2e4 <_ZN4UART14transmitStringEPKc>
 24c:	ce 01       	movw	r24, r28
 24e:	cb 96       	adiw	r24, 0x3b	; 59
				// Halvt åbent vindue
				led.LEDhalf();
 250:	25 d0       	rcall	.+74     	; 0x29c <_ZN9LedDriver7LEDhalfEv>
 252:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <__data_end+0x1>
 256:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <__data_end>
			}
			
			interruptFlag = 0;
 25a:	a1 cf       	rjmp	.-190    	; 0x19e <main+0x7a>

0000025c <__vector_5>:
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
		}
    }
}


ISR(INT4_vect) {
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
	interruptFlag = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <__data_end+0x1>
 272:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <__data_end>
	EIFR = 0x00;
 276:	1c ba       	out	0x1c, r1	; 28
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <_ZN9LedDriverC1Ev>:


#include "LedDriver.h"

// default constructor
LedDriver::LedDriver()
 286:	08 95       	ret

00000288 <_ZN9LedDriver7LEDopenEv>:
{
} //LedDriver

void LedDriver::LEDopen()
{
	PORTB |= (1<<PB4);
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB6);
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	8f 7b       	andi	r24, 0xBF	; 191
 292:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB7);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	85 b9       	out	0x05, r24	; 5
 29a:	08 95       	ret

0000029c <_ZN9LedDriver7LEDhalfEv>:
}

void LedDriver::LEDhalf()
{
	PORTB |= (1<<PB6);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB4);
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB7);
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	8f 77       	andi	r24, 0x7F	; 127
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	08 95       	ret

000002b0 <_ZN9LedDriver9LEDclosedEv>:
}

void LedDriver::LEDclosed()
{
	PORTB |= (1<<PB7);
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB6);
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	8f 7b       	andi	r24, 0xBF	; 191
 2ba:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PB4);	
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	08 95       	ret

000002c4 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 2c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 2c8:	87 e6       	ldi	r24, 0x67	; 103
 2ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2d4:	08 95       	ret

000002d6 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 2d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2da:	85 ff       	sbrs	r24, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 2de:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2e2:	08 95       	ret

000002e4 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	8c 01       	movw	r16, r24
 2ee:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 2f0:	68 81       	ld	r22, Y
 2f2:	66 23       	and	r22, r22
 2f4:	21 f0       	breq	.+8      	; 0x2fe <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 2f6:	c8 01       	movw	r24, r16
 2f8:	ee df       	rcall	.-36     	; 0x2d6 <_ZN4UART8transmitEh>
		str++;
 2fa:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 2fc:	f9 cf       	rjmp	.-14     	; 0x2f0 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <_ZN11X10ModtagerC1EPh>:


#include "X10Modtager.h"

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
 308:	dc 01       	movw	r26, r24
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	94 30       	cpi	r25, 0x04	; 4
 30e:	60 f4       	brcc	.+24     	; 0x328 <_ZN11X10ModtagerC1EPh+0x20>
	{
		address_[i] = address[i];
 310:	29 2f       	mov	r18, r25
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	fb 01       	movw	r30, r22
 316:	e2 0f       	add	r30, r18
 318:	f3 1f       	adc	r31, r19
 31a:	40 81       	ld	r20, Z
 31c:	fd 01       	movw	r30, r26
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	41 ab       	std	Z+49, r20	; 0x31

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 324:	9f 5f       	subi	r25, 0xFF	; 255
 326:	f2 cf       	rjmp	.-28     	; 0x30c <_ZN11X10ModtagerC1EPh+0x4>
 328:	08 95       	ret

0000032a <_ZN11X10Modtager25protocolAndAddressCorrectEv>:
	
	this->translateFromManchesterCode();
}

bool X10Modtager::protocolAndAddressCorrect()
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	28 97       	sbiw	r28, 0x08	; 8
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	bc 01       	movw	r22, r24
	int initiateProtocol[4] = {1,1,1,0};
 340:	88 e0       	ldi	r24, 0x08	; 8
 342:	ea ee       	ldi	r30, 0xEA	; 234
 344:	f2 e0       	ldi	r31, 0x02	; 2
 346:	de 01       	movw	r26, r28
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	01 90       	ld	r0, Z+
 34c:	0d 92       	st	X+, r0
 34e:	8a 95       	dec	r24
 350:	e1 f7       	brne	.-8      	; 0x34a <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x20>
	
	for (uint8_t i = 0; i < 4; i++)
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	94 30       	cpi	r25, 0x04	; 4
 356:	18 f5       	brcc	.+70     	; 0x39e <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x74>
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
 358:	29 2f       	mov	r18, r25
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	fb 01       	movw	r30, r22
 35e:	e2 0f       	add	r30, r18
 360:	f3 1f       	adc	r31, r19
 362:	40 81       	ld	r20, Z
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	f9 01       	movw	r30, r18
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	a1 e0       	ldi	r26, 0x01	; 1
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	ac 0f       	add	r26, r28
 372:	bd 1f       	adc	r27, r29
 374:	ea 0f       	add	r30, r26
 376:	fb 1f       	adc	r31, r27
 378:	01 90       	ld	r0, Z+
 37a:	f0 81       	ld	r31, Z
 37c:	e0 2d       	mov	r30, r0
 37e:	4e 17       	cp	r20, r30
 380:	5f 07       	cpc	r21, r31
 382:	79 f4       	brne	.+30     	; 0x3a2 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x78>
		{
			return false;
		}
		
		if (!(dataArray_[i+4] == address_[i]))
 384:	f9 01       	movw	r30, r18
 386:	34 96       	adiw	r30, 0x04	; 4
 388:	e6 0f       	add	r30, r22
 38a:	f7 1f       	adc	r31, r23
 38c:	40 81       	ld	r20, Z
 38e:	fb 01       	movw	r30, r22
 390:	e2 0f       	add	r30, r18
 392:	f3 1f       	adc	r31, r19
 394:	81 a9       	ldd	r24, Z+49	; 0x31
 396:	48 13       	cpse	r20, r24
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7c>

bool X10Modtager::protocolAndAddressCorrect()
{
	int initiateProtocol[4] = {1,1,1,0};
	
	for (uint8_t i = 0; i < 4; i++)
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	db cf       	rjmp	.-74     	; 0x354 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x2a>
		{
			return false;
		}
	}
	
	return true;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
	
	for (uint8_t i = 0; i < 4; i++)
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
		{
			return false;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
		}
		
		if (!(dataArray_[i+4] == address_[i]))
		{
			return false;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
 3a8:	28 96       	adiw	r28, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <_ZN11X10Modtager27translateFromManchesterCodeEv>:
	
	return 'a';
}

void X10Modtager::translateFromManchesterCode()
{
 3ba:	dc 01       	movw	r26, r24
	manchesterError_ = false;
 3bc:	d0 96       	adiw	r26, 0x30	; 48
 3be:	1c 92       	st	X, r1
 3c0:	d0 97       	sbiw	r26, 0x30	; 48

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 3c2:	90 e0       	ldi	r25, 0x00	; 0
void X10Modtager::translateFromManchesterCode()
{
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;
 3c4:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 3c6:	9f 31       	cpi	r25, 0x1F	; 31
 3c8:	78 f5       	brcc	.+94     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		if (manchesterArray_[i] == 0 && manchesterArray_[i + 1] == 1)
 3ca:	29 2f       	mov	r18, r25
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	fd 01       	movw	r30, r26
 3d0:	e2 0f       	add	r30, r18
 3d2:	f3 1f       	adc	r31, r19
 3d4:	40 89       	ldd	r20, Z+16	; 0x10
 3d6:	41 11       	cpse	r20, r1
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
 3da:	f9 01       	movw	r30, r18
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	ea 0f       	add	r30, r26
 3e0:	fb 1f       	adc	r31, r27
 3e2:	40 89       	ldd	r20, Z+16	; 0x10
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
		{
			dataArray_[dataArrayI] = 1;
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	fd 01       	movw	r30, r26
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	20 83       	st	Z, r18
 3f2:	17 c0       	rjmp	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		else if (manchesterArray_[i] == 1 && manchesterArray_[i + 1] == 0)
 3f4:	fd 01       	movw	r30, r26
 3f6:	e2 0f       	add	r30, r18
 3f8:	f3 1f       	adc	r31, r19
 3fa:	40 89       	ldd	r20, Z+16	; 0x10
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	69 f4       	brne	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	fd 01       	movw	r30, r26
 406:	e2 0f       	add	r30, r18
 408:	f3 1f       	adc	r31, r19
 40a:	20 89       	ldd	r18, Z+16	; 0x10
 40c:	21 11       	cpse	r18, r1
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			dataArray_[dataArrayI] = 0;
 410:	fd 01       	movw	r30, r26
 412:	e8 0f       	add	r30, r24
 414:	f1 1d       	adc	r31, r1
 416:	10 82       	st	Z, r1
 418:	04 c0       	rjmp	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		else
		{
			manchesterError_ = true;
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	d0 96       	adiw	r26, 0x30	; 48
 41e:	2c 93       	st	X, r18
 420:	d0 97       	sbiw	r26, 0x30	; 48
		}
		
		dataArrayI++;
 422:	8f 5f       	subi	r24, 0xFF	; 255
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 424:	9e 5f       	subi	r25, 0xFE	; 254
 426:	cf cf       	rjmp	.-98     	; 0x3c6 <_ZN11X10Modtager27translateFromManchesterCodeEv+0xc>
 428:	08 95       	ret

0000042a <_ZN11X10Modtager10getNextBitEh>:
	}
	
} //X10Modtager

void X10Modtager::getNextBit(uint8_t nextBit)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	a0 97       	sbiw	r28, 0x20	; 32
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	ac 01       	movw	r20, r24
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	9f 31       	cpi	r25, 0x1F	; 31
 444:	80 f4       	brcc	.+32     	; 0x466 <_ZN11X10Modtager10getNextBitEh+0x3c>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
 446:	29 2f       	mov	r18, r25
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	f9 01       	movw	r30, r18
 44c:	31 96       	adiw	r30, 0x01	; 1
 44e:	e4 0f       	add	r30, r20
 450:	f5 1f       	adc	r31, r21
 452:	80 89       	ldd	r24, Z+16	; 0x10
 454:	e1 e0       	ldi	r30, 0x01	; 1
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	ec 0f       	add	r30, r28
 45a:	fd 1f       	adc	r31, r29
 45c:	e2 0f       	add	r30, r18
 45e:	f3 1f       	adc	r31, r19
 460:	80 83       	st	Z, r24

void X10Modtager::getNextBit(uint8_t nextBit)
{
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	ee cf       	rjmp	.-36     	; 0x442 <_ZN11X10Modtager10getNextBitEh+0x18>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
	}
	
	nextManchesterArray[31] = nextBit;
 466:	68 a3       	std	Y+32, r22	; 0x20
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 32       	cpi	r25, 0x20	; 32
 46c:	78 f4       	brcc	.+30     	; 0x48c <_ZN11X10Modtager10getNextBitEh+0x62>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
 46e:	29 2f       	mov	r18, r25
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	e1 e0       	ldi	r30, 0x01	; 1
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	ec 0f       	add	r30, r28
 478:	fd 1f       	adc	r31, r29
 47a:	e2 0f       	add	r30, r18
 47c:	f3 1f       	adc	r31, r19
 47e:	80 81       	ld	r24, Z
 480:	fa 01       	movw	r30, r20
 482:	e2 0f       	add	r30, r18
 484:	f3 1f       	adc	r31, r19
 486:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	nextManchesterArray[31] = nextBit;
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	ef cf       	rjmp	.-34     	; 0x46a <_ZN11X10Modtager10getNextBitEh+0x40>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
	}
	
	this->translateFromManchesterCode();
 48c:	ca 01       	movw	r24, r20
 48e:	95 df       	rcall	.-214    	; 0x3ba <_ZN11X10Modtager27translateFromManchesterCodeEv>
}
 490:	a0 96       	adiw	r28, 0x20	; 32
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <_ZN11X10Modtager11arraysEqualEPhS0_>:
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	88 30       	cpi	r24, 0x08	; 8
 4a8:	91 05       	cpc	r25, r1
 4aa:	64 f4       	brge	.+24     	; 0x4c4 <_ZN11X10Modtager11arraysEqualEPhS0_+0x22>
	    if (arr1[i] != arr2[i]) {
 4ac:	fb 01       	movw	r30, r22
 4ae:	e8 0f       	add	r30, r24
 4b0:	f9 1f       	adc	r31, r25
 4b2:	30 81       	ld	r19, Z
 4b4:	fa 01       	movw	r30, r20
 4b6:	e8 0f       	add	r30, r24
 4b8:	f9 1f       	adc	r31, r25
 4ba:	20 81       	ld	r18, Z
 4bc:	32 13       	cpse	r19, r18
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <_ZN11X10Modtager11arraysEqualEPhS0_+0x26>
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <_ZN11X10Modtager11arraysEqualEPhS0_+0x4>
	    if (arr1[i] != arr2[i]) {
		    return false;
	    }
    }
    return true;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
	    if (arr1[i] != arr2[i]) {
		    return false;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
	    }
    }
    return true;
}
 4ca:	08 95       	ret

000004cc <_ZN11X10Modtager10getCommandEv>:
	
	return true;
}

char X10Modtager::getCommand()
{
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	28 97       	sbiw	r28, 0x08	; 8
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	7c 01       	movw	r14, r24
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 4ec:	28 e0       	ldi	r18, 0x08	; 8
 4ee:	20 31       	cpi	r18, 0x10	; 16
 4f0:	88 f4       	brcc	.+34     	; 0x514 <_ZN11X10Modtager10getCommandEv+0x48>
	{
		command[j - DATA_START] = dataArray_[j];
 4f2:	82 2f       	mov	r24, r18
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	fc 01       	movw	r30, r24
 4f8:	38 97       	sbiw	r30, 0x08	; 8
 4fa:	d7 01       	movw	r26, r14
 4fc:	a8 0f       	add	r26, r24
 4fe:	b9 1f       	adc	r27, r25
 500:	8c 91       	ld	r24, X
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	4c 0f       	add	r20, r28
 508:	5d 1f       	adc	r21, r29
 50a:	e4 0f       	add	r30, r20
 50c:	f5 1f       	adc	r31, r21
 50e:	80 83       	st	Z, r24
{
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	ed cf       	rjmp	.-38     	; 0x4ee <_ZN11X10Modtager10getCommandEv+0x22>
 514:	10 e0       	ldi	r17, 0x00	; 0
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 516:	1b 31       	cpi	r17, 0x1B	; 27
 518:	18 f5       	brcc	.+70     	; 0x560 <_ZN11X10Modtager10getCommandEv+0x94>
	{
		if (this->arraysEqual(asciiLookup_[i].binary, command))
 51a:	c1 2e       	mov	r12, r17
 51c:	d1 2c       	mov	r13, r1
 51e:	b6 01       	movw	r22, r12
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	6c 0d       	add	r22, r12
 52e:	7d 1d       	adc	r23, r13
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7d 4f       	sbci	r23, 0xFD	; 253
 534:	ae 01       	movw	r20, r28
 536:	4f 5f       	subi	r20, 0xFF	; 255
 538:	5f 4f       	sbci	r21, 0xFF	; 255
 53a:	c7 01       	movw	r24, r14
 53c:	b2 df       	rcall	.-156    	; 0x4a2 <_ZN11X10Modtager11arraysEqualEPhS0_>
 53e:	88 23       	and	r24, r24
 540:	69 f0       	breq	.+26     	; 0x55c <_ZN11X10Modtager10getCommandEv+0x90>
		{
			return asciiLookup_[i].character;
 542:	f6 01       	movw	r30, r12
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	ec 0d       	add	r30, r12
 552:	fd 1d       	adc	r31, r13
 554:	e0 50       	subi	r30, 0x00	; 0
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	80 81       	ld	r24, Z
 55a:	03 c0       	rjmp	.+6      	; 0x562 <_ZN11X10Modtager10getCommandEv+0x96>
	for (uint8_t j = DATA_START; j < DATA_END; j++)
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 55c:	1f 5f       	subi	r17, 0xFF	; 255
 55e:	db cf       	rjmp	.-74     	; 0x516 <_ZN11X10Modtager10getCommandEv+0x4a>
		{
			return asciiLookup_[i].character;
		}
	}
	
	return 'a';
 560:	81 e6       	ldi	r24, 0x61	; 97
}
 562:	28 96       	adiw	r28, 0x08	; 8
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	df 90       	pop	r13
 57a:	cf 90       	pop	r12
 57c:	08 95       	ret

0000057e <sprintf>:
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	2e 97       	sbiw	r28, 0x0e	; 14
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	f8 94       	cli
 590:	de bf       	out	0x3e, r29	; 62
 592:	0f be       	out	0x3f, r0	; 63
 594:	cd bf       	out	0x3d, r28	; 61
 596:	0e 89       	ldd	r16, Y+22	; 0x16
 598:	1f 89       	ldd	r17, Y+23	; 0x17
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	8c 83       	std	Y+4, r24	; 0x04
 59e:	1a 83       	std	Y+2, r17	; 0x02
 5a0:	09 83       	std	Y+1, r16	; 0x01
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	9f e7       	ldi	r25, 0x7F	; 127
 5a6:	9e 83       	std	Y+6, r25	; 0x06
 5a8:	8d 83       	std	Y+5, r24	; 0x05
 5aa:	ae 01       	movw	r20, r28
 5ac:	46 5e       	subi	r20, 0xE6	; 230
 5ae:	5f 4f       	sbci	r21, 0xFF	; 255
 5b0:	68 8d       	ldd	r22, Y+24	; 0x18
 5b2:	79 8d       	ldd	r23, Y+25	; 0x19
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	10 d0       	rcall	.+32     	; 0x5da <vfprintf>
 5ba:	ef 81       	ldd	r30, Y+7	; 0x07
 5bc:	f8 85       	ldd	r31, Y+8	; 0x08
 5be:	e0 0f       	add	r30, r16
 5c0:	f1 1f       	adc	r31, r17
 5c2:	10 82       	st	Z, r1
 5c4:	2e 96       	adiw	r28, 0x0e	; 14
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <vfprintf>:
 5da:	2f 92       	push	r2
 5dc:	3f 92       	push	r3
 5de:	4f 92       	push	r4
 5e0:	5f 92       	push	r5
 5e2:	6f 92       	push	r6
 5e4:	7f 92       	push	r7
 5e6:	8f 92       	push	r8
 5e8:	9f 92       	push	r9
 5ea:	af 92       	push	r10
 5ec:	bf 92       	push	r11
 5ee:	cf 92       	push	r12
 5f0:	df 92       	push	r13
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	2b 97       	sbiw	r28, 0x0b	; 11
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	6c 01       	movw	r12, r24
 610:	7b 01       	movw	r14, r22
 612:	8a 01       	movw	r16, r20
 614:	fc 01       	movw	r30, r24
 616:	17 82       	std	Z+7, r1	; 0x07
 618:	16 82       	std	Z+6, r1	; 0x06
 61a:	83 81       	ldd	r24, Z+3	; 0x03
 61c:	81 ff       	sbrs	r24, 1
 61e:	bf c1       	rjmp	.+894    	; 0x99e <vfprintf+0x3c4>
 620:	ce 01       	movw	r24, r28
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	3c 01       	movw	r6, r24
 626:	f6 01       	movw	r30, r12
 628:	93 81       	ldd	r25, Z+3	; 0x03
 62a:	f7 01       	movw	r30, r14
 62c:	93 fd       	sbrc	r25, 3
 62e:	85 91       	lpm	r24, Z+
 630:	93 ff       	sbrs	r25, 3
 632:	81 91       	ld	r24, Z+
 634:	7f 01       	movw	r14, r30
 636:	88 23       	and	r24, r24
 638:	09 f4       	brne	.+2      	; 0x63c <vfprintf+0x62>
 63a:	ad c1       	rjmp	.+858    	; 0x996 <vfprintf+0x3bc>
 63c:	85 32       	cpi	r24, 0x25	; 37
 63e:	39 f4       	brne	.+14     	; 0x64e <vfprintf+0x74>
 640:	93 fd       	sbrc	r25, 3
 642:	85 91       	lpm	r24, Z+
 644:	93 ff       	sbrs	r25, 3
 646:	81 91       	ld	r24, Z+
 648:	7f 01       	movw	r14, r30
 64a:	85 32       	cpi	r24, 0x25	; 37
 64c:	21 f4       	brne	.+8      	; 0x656 <vfprintf+0x7c>
 64e:	b6 01       	movw	r22, r12
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	d6 d1       	rcall	.+940    	; 0xa00 <fputc>
 654:	e8 cf       	rjmp	.-48     	; 0x626 <vfprintf+0x4c>
 656:	91 2c       	mov	r9, r1
 658:	21 2c       	mov	r2, r1
 65a:	31 2c       	mov	r3, r1
 65c:	ff e1       	ldi	r31, 0x1F	; 31
 65e:	f3 15       	cp	r31, r3
 660:	d8 f0       	brcs	.+54     	; 0x698 <vfprintf+0xbe>
 662:	8b 32       	cpi	r24, 0x2B	; 43
 664:	79 f0       	breq	.+30     	; 0x684 <vfprintf+0xaa>
 666:	38 f4       	brcc	.+14     	; 0x676 <vfprintf+0x9c>
 668:	80 32       	cpi	r24, 0x20	; 32
 66a:	79 f0       	breq	.+30     	; 0x68a <vfprintf+0xb0>
 66c:	83 32       	cpi	r24, 0x23	; 35
 66e:	a1 f4       	brne	.+40     	; 0x698 <vfprintf+0xbe>
 670:	23 2d       	mov	r18, r3
 672:	20 61       	ori	r18, 0x10	; 16
 674:	1d c0       	rjmp	.+58     	; 0x6b0 <vfprintf+0xd6>
 676:	8d 32       	cpi	r24, 0x2D	; 45
 678:	61 f0       	breq	.+24     	; 0x692 <vfprintf+0xb8>
 67a:	80 33       	cpi	r24, 0x30	; 48
 67c:	69 f4       	brne	.+26     	; 0x698 <vfprintf+0xbe>
 67e:	23 2d       	mov	r18, r3
 680:	21 60       	ori	r18, 0x01	; 1
 682:	16 c0       	rjmp	.+44     	; 0x6b0 <vfprintf+0xd6>
 684:	83 2d       	mov	r24, r3
 686:	82 60       	ori	r24, 0x02	; 2
 688:	38 2e       	mov	r3, r24
 68a:	e3 2d       	mov	r30, r3
 68c:	e4 60       	ori	r30, 0x04	; 4
 68e:	3e 2e       	mov	r3, r30
 690:	2a c0       	rjmp	.+84     	; 0x6e6 <vfprintf+0x10c>
 692:	f3 2d       	mov	r31, r3
 694:	f8 60       	ori	r31, 0x08	; 8
 696:	1d c0       	rjmp	.+58     	; 0x6d2 <vfprintf+0xf8>
 698:	37 fc       	sbrc	r3, 7
 69a:	2d c0       	rjmp	.+90     	; 0x6f6 <vfprintf+0x11c>
 69c:	20 ed       	ldi	r18, 0xD0	; 208
 69e:	28 0f       	add	r18, r24
 6a0:	2a 30       	cpi	r18, 0x0A	; 10
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <vfprintf+0xda>
 6a4:	8e 32       	cpi	r24, 0x2E	; 46
 6a6:	b9 f4       	brne	.+46     	; 0x6d6 <vfprintf+0xfc>
 6a8:	36 fc       	sbrc	r3, 6
 6aa:	75 c1       	rjmp	.+746    	; 0x996 <vfprintf+0x3bc>
 6ac:	23 2d       	mov	r18, r3
 6ae:	20 64       	ori	r18, 0x40	; 64
 6b0:	32 2e       	mov	r3, r18
 6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <vfprintf+0x10c>
 6b4:	36 fe       	sbrs	r3, 6
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <vfprintf+0xea>
 6b8:	8a e0       	ldi	r24, 0x0A	; 10
 6ba:	98 9e       	mul	r9, r24
 6bc:	20 0d       	add	r18, r0
 6be:	11 24       	eor	r1, r1
 6c0:	92 2e       	mov	r9, r18
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <vfprintf+0x10c>
 6c4:	ea e0       	ldi	r30, 0x0A	; 10
 6c6:	2e 9e       	mul	r2, r30
 6c8:	20 0d       	add	r18, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	22 2e       	mov	r2, r18
 6ce:	f3 2d       	mov	r31, r3
 6d0:	f0 62       	ori	r31, 0x20	; 32
 6d2:	3f 2e       	mov	r3, r31
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <vfprintf+0x10c>
 6d6:	8c 36       	cpi	r24, 0x6C	; 108
 6d8:	21 f4       	brne	.+8      	; 0x6e2 <vfprintf+0x108>
 6da:	83 2d       	mov	r24, r3
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	38 2e       	mov	r3, r24
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0x10c>
 6e2:	88 36       	cpi	r24, 0x68	; 104
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <vfprintf+0x11c>
 6e6:	f7 01       	movw	r30, r14
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	81 11       	cpse	r24, r1
 6f4:	b3 cf       	rjmp	.-154    	; 0x65c <vfprintf+0x82>
 6f6:	98 2f       	mov	r25, r24
 6f8:	9f 7d       	andi	r25, 0xDF	; 223
 6fa:	95 54       	subi	r25, 0x45	; 69
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	28 f4       	brcc	.+10     	; 0x70a <vfprintf+0x130>
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	9f e3       	ldi	r25, 0x3F	; 63
 706:	99 83       	std	Y+1, r25	; 0x01
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x14a>
 70a:	83 36       	cpi	r24, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0x140>
 70e:	83 37       	cpi	r24, 0x73	; 115
 710:	71 f0       	breq	.+28     	; 0x72e <vfprintf+0x154>
 712:	83 35       	cpi	r24, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x13e>
 716:	55 c0       	rjmp	.+170    	; 0x7c2 <vfprintf+0x1e8>
 718:	20 c0       	rjmp	.+64     	; 0x75a <vfprintf+0x180>
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	88 24       	eor	r8, r8
 726:	83 94       	inc	r8
 728:	91 2c       	mov	r9, r1
 72a:	53 01       	movw	r10, r6
 72c:	12 c0       	rjmp	.+36     	; 0x752 <vfprintf+0x178>
 72e:	28 01       	movw	r4, r16
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	4f 0e       	add	r4, r31
 734:	51 1c       	adc	r5, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	36 fe       	sbrs	r3, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x16c>
 740:	69 2d       	mov	r22, r9
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x170>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	4e d1       	rcall	.+668    	; 0x9ea <strnlen>
 74e:	4c 01       	movw	r8, r24
 750:	82 01       	movw	r16, r4
 752:	f3 2d       	mov	r31, r3
 754:	ff 77       	andi	r31, 0x7F	; 127
 756:	3f 2e       	mov	r3, r31
 758:	15 c0       	rjmp	.+42     	; 0x784 <vfprintf+0x1aa>
 75a:	28 01       	movw	r4, r16
 75c:	22 e0       	ldi	r18, 0x02	; 2
 75e:	42 0e       	add	r4, r18
 760:	51 1c       	adc	r5, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	36 fe       	sbrs	r3, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x198>
 76c:	69 2d       	mov	r22, r9
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x19c>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	2d d1       	rcall	.+602    	; 0x9d4 <strnlen_P>
 77a:	4c 01       	movw	r8, r24
 77c:	f3 2d       	mov	r31, r3
 77e:	f0 68       	ori	r31, 0x80	; 128
 780:	3f 2e       	mov	r3, r31
 782:	82 01       	movw	r16, r4
 784:	33 fc       	sbrc	r3, 3
 786:	19 c0       	rjmp	.+50     	; 0x7ba <vfprintf+0x1e0>
 788:	82 2d       	mov	r24, r2
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 16       	cp	r8, r24
 78e:	99 06       	cpc	r9, r25
 790:	a0 f4       	brcc	.+40     	; 0x7ba <vfprintf+0x1e0>
 792:	b6 01       	movw	r22, r12
 794:	80 e2       	ldi	r24, 0x20	; 32
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	33 d1       	rcall	.+614    	; 0xa00 <fputc>
 79a:	2a 94       	dec	r2
 79c:	f5 cf       	rjmp	.-22     	; 0x788 <vfprintf+0x1ae>
 79e:	f5 01       	movw	r30, r10
 7a0:	37 fc       	sbrc	r3, 7
 7a2:	85 91       	lpm	r24, Z+
 7a4:	37 fe       	sbrs	r3, 7
 7a6:	81 91       	ld	r24, Z+
 7a8:	5f 01       	movw	r10, r30
 7aa:	b6 01       	movw	r22, r12
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	28 d1       	rcall	.+592    	; 0xa00 <fputc>
 7b0:	21 10       	cpse	r2, r1
 7b2:	2a 94       	dec	r2
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	82 1a       	sub	r8, r18
 7b8:	91 08       	sbc	r9, r1
 7ba:	81 14       	cp	r8, r1
 7bc:	91 04       	cpc	r9, r1
 7be:	79 f7       	brne	.-34     	; 0x79e <vfprintf+0x1c4>
 7c0:	e1 c0       	rjmp	.+450    	; 0x984 <vfprintf+0x3aa>
 7c2:	84 36       	cpi	r24, 0x64	; 100
 7c4:	11 f0       	breq	.+4      	; 0x7ca <vfprintf+0x1f0>
 7c6:	89 36       	cpi	r24, 0x69	; 105
 7c8:	39 f5       	brne	.+78     	; 0x818 <vfprintf+0x23e>
 7ca:	f8 01       	movw	r30, r16
 7cc:	37 fe       	sbrs	r3, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x204>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <vfprintf+0x214>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	07 2e       	mov	r0, r23
 7e4:	00 0c       	add	r0, r0
 7e6:	88 0b       	sbc	r24, r24
 7e8:	99 0b       	sbc	r25, r25
 7ea:	0e 5f       	subi	r16, 0xFE	; 254
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	f3 2d       	mov	r31, r3
 7f0:	ff 76       	andi	r31, 0x6F	; 111
 7f2:	3f 2e       	mov	r3, r31
 7f4:	97 ff       	sbrs	r25, 7
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <vfprintf+0x230>
 7f8:	90 95       	com	r25
 7fa:	80 95       	com	r24
 7fc:	70 95       	com	r23
 7fe:	61 95       	neg	r22
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	f0 68       	ori	r31, 0x80	; 128
 808:	3f 2e       	mov	r3, r31
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	a3 01       	movw	r20, r6
 810:	33 d1       	rcall	.+614    	; 0xa78 <__ultoa_invert>
 812:	88 2e       	mov	r8, r24
 814:	86 18       	sub	r8, r6
 816:	44 c0       	rjmp	.+136    	; 0x8a0 <vfprintf+0x2c6>
 818:	85 37       	cpi	r24, 0x75	; 117
 81a:	31 f4       	brne	.+12     	; 0x828 <vfprintf+0x24e>
 81c:	23 2d       	mov	r18, r3
 81e:	2f 7e       	andi	r18, 0xEF	; 239
 820:	b2 2e       	mov	r11, r18
 822:	2a e0       	ldi	r18, 0x0A	; 10
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	25 c0       	rjmp	.+74     	; 0x872 <vfprintf+0x298>
 828:	93 2d       	mov	r25, r3
 82a:	99 7f       	andi	r25, 0xF9	; 249
 82c:	b9 2e       	mov	r11, r25
 82e:	8f 36       	cpi	r24, 0x6F	; 111
 830:	c1 f0       	breq	.+48     	; 0x862 <vfprintf+0x288>
 832:	18 f4       	brcc	.+6      	; 0x83a <vfprintf+0x260>
 834:	88 35       	cpi	r24, 0x58	; 88
 836:	79 f0       	breq	.+30     	; 0x856 <vfprintf+0x27c>
 838:	ae c0       	rjmp	.+348    	; 0x996 <vfprintf+0x3bc>
 83a:	80 37       	cpi	r24, 0x70	; 112
 83c:	19 f0       	breq	.+6      	; 0x844 <vfprintf+0x26a>
 83e:	88 37       	cpi	r24, 0x78	; 120
 840:	21 f0       	breq	.+8      	; 0x84a <vfprintf+0x270>
 842:	a9 c0       	rjmp	.+338    	; 0x996 <vfprintf+0x3bc>
 844:	e9 2f       	mov	r30, r25
 846:	e0 61       	ori	r30, 0x10	; 16
 848:	be 2e       	mov	r11, r30
 84a:	b4 fe       	sbrs	r11, 4
 84c:	0d c0       	rjmp	.+26     	; 0x868 <vfprintf+0x28e>
 84e:	fb 2d       	mov	r31, r11
 850:	f4 60       	ori	r31, 0x04	; 4
 852:	bf 2e       	mov	r11, r31
 854:	09 c0       	rjmp	.+18     	; 0x868 <vfprintf+0x28e>
 856:	34 fe       	sbrs	r3, 4
 858:	0a c0       	rjmp	.+20     	; 0x86e <vfprintf+0x294>
 85a:	29 2f       	mov	r18, r25
 85c:	26 60       	ori	r18, 0x06	; 6
 85e:	b2 2e       	mov	r11, r18
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x294>
 862:	28 e0       	ldi	r18, 0x08	; 8
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	05 c0       	rjmp	.+10     	; 0x872 <vfprintf+0x298>
 868:	20 e1       	ldi	r18, 0x10	; 16
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x298>
 86e:	20 e1       	ldi	r18, 0x10	; 16
 870:	32 e0       	ldi	r19, 0x02	; 2
 872:	f8 01       	movw	r30, r16
 874:	b7 fe       	sbrs	r11, 7
 876:	07 c0       	rjmp	.+14     	; 0x886 <vfprintf+0x2ac>
 878:	60 81       	ld	r22, Z
 87a:	71 81       	ldd	r23, Z+1	; 0x01
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	0c 5f       	subi	r16, 0xFC	; 252
 882:	1f 4f       	sbci	r17, 0xFF	; 255
 884:	06 c0       	rjmp	.+12     	; 0x892 <vfprintf+0x2b8>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 5f       	subi	r16, 0xFE	; 254
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	a3 01       	movw	r20, r6
 894:	f1 d0       	rcall	.+482    	; 0xa78 <__ultoa_invert>
 896:	88 2e       	mov	r8, r24
 898:	86 18       	sub	r8, r6
 89a:	fb 2d       	mov	r31, r11
 89c:	ff 77       	andi	r31, 0x7F	; 127
 89e:	3f 2e       	mov	r3, r31
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <vfprintf+0x2e4>
 8a4:	23 2d       	mov	r18, r3
 8a6:	2e 7f       	andi	r18, 0xFE	; 254
 8a8:	a2 2e       	mov	r10, r18
 8aa:	89 14       	cp	r8, r9
 8ac:	58 f4       	brcc	.+22     	; 0x8c4 <vfprintf+0x2ea>
 8ae:	34 fe       	sbrs	r3, 4
 8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <vfprintf+0x2ee>
 8b2:	32 fc       	sbrc	r3, 2
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x2ee>
 8b6:	83 2d       	mov	r24, r3
 8b8:	8e 7e       	andi	r24, 0xEE	; 238
 8ba:	a8 2e       	mov	r10, r24
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <vfprintf+0x2ee>
 8be:	b8 2c       	mov	r11, r8
 8c0:	a3 2c       	mov	r10, r3
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x2f0>
 8c4:	b8 2c       	mov	r11, r8
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <vfprintf+0x2f0>
 8c8:	b9 2c       	mov	r11, r9
 8ca:	a4 fe       	sbrs	r10, 4
 8cc:	0f c0       	rjmp	.+30     	; 0x8ec <vfprintf+0x312>
 8ce:	fe 01       	movw	r30, r28
 8d0:	e8 0d       	add	r30, r8
 8d2:	f1 1d       	adc	r31, r1
 8d4:	80 81       	ld	r24, Z
 8d6:	80 33       	cpi	r24, 0x30	; 48
 8d8:	21 f4       	brne	.+8      	; 0x8e2 <vfprintf+0x308>
 8da:	9a 2d       	mov	r25, r10
 8dc:	99 7e       	andi	r25, 0xE9	; 233
 8de:	a9 2e       	mov	r10, r25
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x31a>
 8e2:	a2 fe       	sbrs	r10, 2
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <vfprintf+0x318>
 8e6:	b3 94       	inc	r11
 8e8:	b3 94       	inc	r11
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <vfprintf+0x31a>
 8ec:	8a 2d       	mov	r24, r10
 8ee:	86 78       	andi	r24, 0x86	; 134
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <vfprintf+0x31a>
 8f2:	b3 94       	inc	r11
 8f4:	a3 fc       	sbrc	r10, 3
 8f6:	10 c0       	rjmp	.+32     	; 0x918 <vfprintf+0x33e>
 8f8:	a0 fe       	sbrs	r10, 0
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <vfprintf+0x32e>
 8fc:	b2 14       	cp	r11, r2
 8fe:	80 f4       	brcc	.+32     	; 0x920 <vfprintf+0x346>
 900:	28 0c       	add	r2, r8
 902:	92 2c       	mov	r9, r2
 904:	9b 18       	sub	r9, r11
 906:	0d c0       	rjmp	.+26     	; 0x922 <vfprintf+0x348>
 908:	b2 14       	cp	r11, r2
 90a:	58 f4       	brcc	.+22     	; 0x922 <vfprintf+0x348>
 90c:	b6 01       	movw	r22, r12
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	76 d0       	rcall	.+236    	; 0xa00 <fputc>
 914:	b3 94       	inc	r11
 916:	f8 cf       	rjmp	.-16     	; 0x908 <vfprintf+0x32e>
 918:	b2 14       	cp	r11, r2
 91a:	18 f4       	brcc	.+6      	; 0x922 <vfprintf+0x348>
 91c:	2b 18       	sub	r2, r11
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x34a>
 920:	98 2c       	mov	r9, r8
 922:	21 2c       	mov	r2, r1
 924:	a4 fe       	sbrs	r10, 4
 926:	0f c0       	rjmp	.+30     	; 0x946 <vfprintf+0x36c>
 928:	b6 01       	movw	r22, r12
 92a:	80 e3       	ldi	r24, 0x30	; 48
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	68 d0       	rcall	.+208    	; 0xa00 <fputc>
 930:	a2 fe       	sbrs	r10, 2
 932:	16 c0       	rjmp	.+44     	; 0x960 <vfprintf+0x386>
 934:	a1 fc       	sbrc	r10, 1
 936:	03 c0       	rjmp	.+6      	; 0x93e <vfprintf+0x364>
 938:	88 e7       	ldi	r24, 0x78	; 120
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <vfprintf+0x368>
 93e:	88 e5       	ldi	r24, 0x58	; 88
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	b6 01       	movw	r22, r12
 944:	0c c0       	rjmp	.+24     	; 0x95e <vfprintf+0x384>
 946:	8a 2d       	mov	r24, r10
 948:	86 78       	andi	r24, 0x86	; 134
 94a:	51 f0       	breq	.+20     	; 0x960 <vfprintf+0x386>
 94c:	a1 fe       	sbrs	r10, 1
 94e:	02 c0       	rjmp	.+4      	; 0x954 <vfprintf+0x37a>
 950:	8b e2       	ldi	r24, 0x2B	; 43
 952:	01 c0       	rjmp	.+2      	; 0x956 <vfprintf+0x37c>
 954:	80 e2       	ldi	r24, 0x20	; 32
 956:	a7 fc       	sbrc	r10, 7
 958:	8d e2       	ldi	r24, 0x2D	; 45
 95a:	b6 01       	movw	r22, r12
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	50 d0       	rcall	.+160    	; 0xa00 <fputc>
 960:	89 14       	cp	r8, r9
 962:	30 f4       	brcc	.+12     	; 0x970 <vfprintf+0x396>
 964:	b6 01       	movw	r22, r12
 966:	80 e3       	ldi	r24, 0x30	; 48
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	4a d0       	rcall	.+148    	; 0xa00 <fputc>
 96c:	9a 94       	dec	r9
 96e:	f8 cf       	rjmp	.-16     	; 0x960 <vfprintf+0x386>
 970:	8a 94       	dec	r8
 972:	f3 01       	movw	r30, r6
 974:	e8 0d       	add	r30, r8
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	b6 01       	movw	r22, r12
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	40 d0       	rcall	.+128    	; 0xa00 <fputc>
 980:	81 10       	cpse	r8, r1
 982:	f6 cf       	rjmp	.-20     	; 0x970 <vfprintf+0x396>
 984:	22 20       	and	r2, r2
 986:	09 f4       	brne	.+2      	; 0x98a <vfprintf+0x3b0>
 988:	4e ce       	rjmp	.-868    	; 0x626 <vfprintf+0x4c>
 98a:	b6 01       	movw	r22, r12
 98c:	80 e2       	ldi	r24, 0x20	; 32
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	37 d0       	rcall	.+110    	; 0xa00 <fputc>
 992:	2a 94       	dec	r2
 994:	f7 cf       	rjmp	.-18     	; 0x984 <vfprintf+0x3aa>
 996:	f6 01       	movw	r30, r12
 998:	86 81       	ldd	r24, Z+6	; 0x06
 99a:	97 81       	ldd	r25, Z+7	; 0x07
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0x3c8>
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	2b 96       	adiw	r28, 0x0b	; 11
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	ff 90       	pop	r15
 9b8:	ef 90       	pop	r14
 9ba:	df 90       	pop	r13
 9bc:	cf 90       	pop	r12
 9be:	bf 90       	pop	r11
 9c0:	af 90       	pop	r10
 9c2:	9f 90       	pop	r9
 9c4:	8f 90       	pop	r8
 9c6:	7f 90       	pop	r7
 9c8:	6f 90       	pop	r6
 9ca:	5f 90       	pop	r5
 9cc:	4f 90       	pop	r4
 9ce:	3f 90       	pop	r3
 9d0:	2f 90       	pop	r2
 9d2:	08 95       	ret

000009d4 <strnlen_P>:
 9d4:	fc 01       	movw	r30, r24
 9d6:	05 90       	lpm	r0, Z+
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 10       	cpse	r0, r1
 9de:	d8 f7       	brcc	.-10     	; 0x9d6 <strnlen_P+0x2>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	8e 0f       	add	r24, r30
 9e6:	9f 1f       	adc	r25, r31
 9e8:	08 95       	ret

000009ea <strnlen>:
 9ea:	fc 01       	movw	r30, r24
 9ec:	61 50       	subi	r22, 0x01	; 1
 9ee:	70 40       	sbci	r23, 0x00	; 0
 9f0:	01 90       	ld	r0, Z+
 9f2:	01 10       	cpse	r0, r1
 9f4:	d8 f7       	brcc	.-10     	; 0x9ec <strnlen+0x2>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	8e 0f       	add	r24, r30
 9fc:	9f 1f       	adc	r25, r31
 9fe:	08 95       	ret

00000a00 <fputc>:
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	fb 01       	movw	r30, r22
 a0a:	23 81       	ldd	r18, Z+3	; 0x03
 a0c:	21 fd       	sbrc	r18, 1
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <fputc+0x16>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	2c c0       	rjmp	.+88     	; 0xa6e <fputc+0x6e>
 a16:	22 ff       	sbrs	r18, 2
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <fputc+0x46>
 a1a:	46 81       	ldd	r20, Z+6	; 0x06
 a1c:	57 81       	ldd	r21, Z+7	; 0x07
 a1e:	24 81       	ldd	r18, Z+4	; 0x04
 a20:	35 81       	ldd	r19, Z+5	; 0x05
 a22:	42 17       	cp	r20, r18
 a24:	53 07       	cpc	r21, r19
 a26:	44 f4       	brge	.+16     	; 0xa38 <fputc+0x38>
 a28:	a0 81       	ld	r26, Z
 a2a:	b1 81       	ldd	r27, Z+1	; 0x01
 a2c:	9d 01       	movw	r18, r26
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	31 83       	std	Z+1, r19	; 0x01
 a34:	20 83       	st	Z, r18
 a36:	8c 93       	st	X, r24
 a38:	26 81       	ldd	r18, Z+6	; 0x06
 a3a:	37 81       	ldd	r19, Z+7	; 0x07
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	37 83       	std	Z+7, r19	; 0x07
 a42:	26 83       	std	Z+6, r18	; 0x06
 a44:	14 c0       	rjmp	.+40     	; 0xa6e <fputc+0x6e>
 a46:	8b 01       	movw	r16, r22
 a48:	ec 01       	movw	r28, r24
 a4a:	fb 01       	movw	r30, r22
 a4c:	00 84       	ldd	r0, Z+8	; 0x08
 a4e:	f1 85       	ldd	r31, Z+9	; 0x09
 a50:	e0 2d       	mov	r30, r0
 a52:	19 95       	eicall
 a54:	89 2b       	or	r24, r25
 a56:	e1 f6       	brne	.-72     	; 0xa10 <fputc+0x10>
 a58:	d8 01       	movw	r26, r16
 a5a:	16 96       	adiw	r26, 0x06	; 6
 a5c:	8d 91       	ld	r24, X+
 a5e:	9c 91       	ld	r25, X
 a60:	17 97       	sbiw	r26, 0x07	; 7
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	17 96       	adiw	r26, 0x07	; 7
 a66:	9c 93       	st	X, r25
 a68:	8e 93       	st	-X, r24
 a6a:	16 97       	sbiw	r26, 0x06	; 6
 a6c:	ce 01       	movw	r24, r28
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <__ultoa_invert>:
 a78:	fa 01       	movw	r30, r20
 a7a:	aa 27       	eor	r26, r26
 a7c:	28 30       	cpi	r18, 0x08	; 8
 a7e:	51 f1       	breq	.+84     	; 0xad4 <__ultoa_invert+0x5c>
 a80:	20 31       	cpi	r18, 0x10	; 16
 a82:	81 f1       	breq	.+96     	; 0xae4 <__ultoa_invert+0x6c>
 a84:	e8 94       	clt
 a86:	6f 93       	push	r22
 a88:	6e 7f       	andi	r22, 0xFE	; 254
 a8a:	6e 5f       	subi	r22, 0xFE	; 254
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	af 4f       	sbci	r26, 0xFF	; 255
 a94:	b1 e0       	ldi	r27, 0x01	; 1
 a96:	3e d0       	rcall	.+124    	; 0xb14 <__ultoa_invert+0x9c>
 a98:	b4 e0       	ldi	r27, 0x04	; 4
 a9a:	3c d0       	rcall	.+120    	; 0xb14 <__ultoa_invert+0x9c>
 a9c:	67 0f       	add	r22, r23
 a9e:	78 1f       	adc	r23, r24
 aa0:	89 1f       	adc	r24, r25
 aa2:	9a 1f       	adc	r25, r26
 aa4:	a1 1d       	adc	r26, r1
 aa6:	68 0f       	add	r22, r24
 aa8:	79 1f       	adc	r23, r25
 aaa:	8a 1f       	adc	r24, r26
 aac:	91 1d       	adc	r25, r1
 aae:	a1 1d       	adc	r26, r1
 ab0:	6a 0f       	add	r22, r26
 ab2:	71 1d       	adc	r23, r1
 ab4:	81 1d       	adc	r24, r1
 ab6:	91 1d       	adc	r25, r1
 ab8:	a1 1d       	adc	r26, r1
 aba:	20 d0       	rcall	.+64     	; 0xafc <__ultoa_invert+0x84>
 abc:	09 f4       	brne	.+2      	; 0xac0 <__ultoa_invert+0x48>
 abe:	68 94       	set
 ac0:	3f 91       	pop	r19
 ac2:	2a e0       	ldi	r18, 0x0A	; 10
 ac4:	26 9f       	mul	r18, r22
 ac6:	11 24       	eor	r1, r1
 ac8:	30 19       	sub	r19, r0
 aca:	30 5d       	subi	r19, 0xD0	; 208
 acc:	31 93       	st	Z+, r19
 ace:	de f6       	brtc	.-74     	; 0xa86 <__ultoa_invert+0xe>
 ad0:	cf 01       	movw	r24, r30
 ad2:	08 95       	ret
 ad4:	46 2f       	mov	r20, r22
 ad6:	47 70       	andi	r20, 0x07	; 7
 ad8:	40 5d       	subi	r20, 0xD0	; 208
 ada:	41 93       	st	Z+, r20
 adc:	b3 e0       	ldi	r27, 0x03	; 3
 ade:	0f d0       	rcall	.+30     	; 0xafe <__ultoa_invert+0x86>
 ae0:	c9 f7       	brne	.-14     	; 0xad4 <__ultoa_invert+0x5c>
 ae2:	f6 cf       	rjmp	.-20     	; 0xad0 <__ultoa_invert+0x58>
 ae4:	46 2f       	mov	r20, r22
 ae6:	4f 70       	andi	r20, 0x0F	; 15
 ae8:	40 5d       	subi	r20, 0xD0	; 208
 aea:	4a 33       	cpi	r20, 0x3A	; 58
 aec:	18 f0       	brcs	.+6      	; 0xaf4 <__ultoa_invert+0x7c>
 aee:	49 5d       	subi	r20, 0xD9	; 217
 af0:	31 fd       	sbrc	r19, 1
 af2:	40 52       	subi	r20, 0x20	; 32
 af4:	41 93       	st	Z+, r20
 af6:	02 d0       	rcall	.+4      	; 0xafc <__ultoa_invert+0x84>
 af8:	a9 f7       	brne	.-22     	; 0xae4 <__ultoa_invert+0x6c>
 afa:	ea cf       	rjmp	.-44     	; 0xad0 <__ultoa_invert+0x58>
 afc:	b4 e0       	ldi	r27, 0x04	; 4
 afe:	a6 95       	lsr	r26
 b00:	97 95       	ror	r25
 b02:	87 95       	ror	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0x86>
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	61 05       	cpc	r22, r1
 b10:	71 05       	cpc	r23, r1
 b12:	08 95       	ret
 b14:	9b 01       	movw	r18, r22
 b16:	ac 01       	movw	r20, r24
 b18:	0a 2e       	mov	r0, r26
 b1a:	06 94       	lsr	r0
 b1c:	57 95       	ror	r21
 b1e:	47 95       	ror	r20
 b20:	37 95       	ror	r19
 b22:	27 95       	ror	r18
 b24:	ba 95       	dec	r27
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__ultoa_invert+0xa2>
 b28:	62 0f       	add	r22, r18
 b2a:	73 1f       	adc	r23, r19
 b2c:	84 1f       	adc	r24, r20
 b2e:	95 1f       	adc	r25, r21
 b30:	a0 1d       	adc	r26, r0
 b32:	08 95       	ret

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
