
Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800200  00000aec  00000b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080034c  0080034c  00000ccc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a62  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d7  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e9  00000000  00000000  00003a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  0000423c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098e  00000000  00000000  000043f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070c  00000000  00000000  00004d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000548e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	1c c1       	rjmp	.+568    	; 0x24e <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ee       	ldi	r30, 0xEC	; 236
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 34       	cpi	r26, 0x4C	; 76
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac e4       	ldi	r26, 0x4C	; 76
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 34       	cpi	r26, 0x4E	; 78
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e3 c4       	rjmp	.+2502   	; 0xae8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/X10Modtager.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c4 54       	subi	r28, 0x44	; 68
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 13a:	ea e6       	ldi	r30, 0x6A	; 106
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	83 60       	ori	r24, 0x03	; 3
 142:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 144:	8d b3       	in	r24, 0x1d	; 29
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8d bb       	out	0x1d, r24	; 29
	sei();
 14a:	78 94       	sei
	
	// Sætter PORTB som input port.
	DDRB &= ~(1 << PB5);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	8f 7d       	andi	r24, 0xDF	; 223
 150:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 d0       	rcall	.+288    	; 0x278 <_ZN4UARTC1Ev>
	uart.transmitString("KLAR!!!!");
 158:	62 ef       	ldi	r22, 0xF2	; 242
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	9b d0       	rcall	.+310    	; 0x298 <_ZN4UART14transmitStringEPKc>
	
	uint8_t recieverAddress[4] = {0,0,0,1};
 162:	1a 82       	std	Y+2, r1	; 0x02
 164:	1b 82       	std	Y+3, r1	; 0x03
 166:	1c 82       	std	Y+4, r1	; 0x04
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	8d 83       	std	Y+5, r24	; 0x05
	
	X10Modtager modtager(recieverAddress);
 16c:	be 01       	movw	r22, r28
 16e:	6e 5f       	subi	r22, 0xFE	; 254
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	ce 01       	movw	r24, r28
 174:	06 96       	adiw	r24, 0x06	; 6
 176:	a2 d0       	rcall	.+324    	; 0x2bc <_ZN11X10ModtagerC1EPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x5e>
 182:	00 00       	nop
	
	char command = 'a';
	
	uint8_t recievedBit = 0;
	uint8_t numRecieved = 0;
 184:	00 e0       	ldi	r16, 0x00	; 0
	
	_delay_us(5000);
	
	while (1) 
    {		
		if (interruptFlag == 1)
 186:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end>
 18a:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x1>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	d1 f7       	brne	.-12     	; 0x186 <main+0x62>
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x72>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x78>
 19c:	00 00       	nop
		{
			_delay_us(500);
			recievedBit = PINB & (1 << PB5) ? 1 : 0;
 19e:	1d 9b       	sbis	0x03, 5	; 3
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x82>
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <main+0x84>
 1a6:	10 e0       	ldi	r17, 0x00	; 0
			
			// Gem data ved interrupt.
			if (recievedBit == 1) {
 1a8:	11 30       	cpi	r17, 0x01	; 1
 1aa:	31 f4       	brne	.+12     	; 0x1b8 <main+0x94>
				uart.transmitString("1 ");
 1ac:	6b ef       	ldi	r22, 0xFB	; 251
 1ae:	72 e0       	ldi	r23, 0x02	; 2
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	71 d0       	rcall	.+226    	; 0x298 <_ZN4UART14transmitStringEPKc>
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <main+0x9e>
				} else {
				uart.transmitString("0 ");
 1b8:	6e ef       	ldi	r22, 0xFE	; 254
 1ba:	72 e0       	ldi	r23, 0x02	; 2
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
			}
			modtager.getNextBit(recievedBit);
 1c0:	6b d0       	rcall	.+214    	; 0x298 <_ZN4UART14transmitStringEPKc>
 1c2:	61 2f       	mov	r22, r17
 1c4:	ce 01       	movw	r24, r28
 1c6:	06 96       	adiw	r24, 0x06	; 6
			
			command = 'a';
			if (modtager.protocolAndAddressCorrect()) {
 1c8:	0a d1       	rcall	.+532    	; 0x3de <_ZN11X10Modtager10getNextBitEh>
 1ca:	ce 01       	movw	r24, r28
 1cc:	06 96       	adiw	r24, 0x06	; 6
 1ce:	87 d0       	rcall	.+270    	; 0x2de <_ZN11X10Modtager25protocolAndAddressCorrectEv>
 1d0:	88 23       	and	r24, r24
				command = modtager.getCommand();
 1d2:	29 f0       	breq	.+10     	; 0x1de <main+0xba>
 1d4:	ce 01       	movw	r24, r28
 1d6:	06 96       	adiw	r24, 0x06	; 6
 1d8:	53 d1       	rcall	.+678    	; 0x480 <_ZN11X10Modtager10getCommandEv>
 1da:	18 2f       	mov	r17, r24
				} else {
				uart.transmitString("0 ");
			}
			modtager.getNextBit(recievedBit);
			
			command = 'a';
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <main+0xbc>
			if (modtager.protocolAndAddressCorrect()) {
				command = modtager.getCommand();
			}
			
			if (command == 'O')
 1de:	11 e6       	ldi	r17, 0x61	; 97
 1e0:	1f 34       	cpi	r17, 0x4F	; 79
			{
				uart.transmitString("MODTOG KOMMANDO O\r\n");
 1e2:	11 f5       	brne	.+68     	; 0x228 <main+0x104>
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	73 e0       	ldi	r23, 0x03	; 3
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	55 d0       	rcall	.+170    	; 0x298 <_ZN4UART14transmitStringEPKc>
				// Åben vindue.
				numRecieved++;
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
				
				sprintf(buffer, "%i", numRecieved);
 1f0:	1f 92       	push	r1
 1f2:	0f 93       	push	r16
 1f4:	85 e1       	ldi	r24, 0x15	; 21
 1f6:	93 e0       	ldi	r25, 0x03	; 3
 1f8:	9f 93       	push	r25
 1fa:	8f 93       	push	r24
 1fc:	7e 01       	movw	r14, r28
 1fe:	9b e3       	ldi	r25, 0x3B	; 59
 200:	e9 0e       	add	r14, r25
 202:	f1 1c       	adc	r15, r1
 204:	ff 92       	push	r15
 206:	ef 92       	push	r14
				
				uart.transmitString("Modtaget: ");
 208:	94 d1       	rcall	.+808    	; 0x532 <sprintf>
 20a:	68 e1       	ldi	r22, 0x18	; 24
 20c:	73 e0       	ldi	r23, 0x03	; 3
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	42 d0       	rcall	.+132    	; 0x298 <_ZN4UART14transmitStringEPKc>
				uart.transmitString(buffer);
 214:	b7 01       	movw	r22, r14
 216:	ce 01       	movw	r24, r28
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	3e d0       	rcall	.+124    	; 0x298 <_ZN4UART14transmitStringEPKc>
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
			}
			
			if (command == 'C')
 228:	13 34       	cpi	r17, 0x43	; 67
			{
				uart.transmitString("MODTOG KOMMANDO C\r\n");
 22a:	29 f4       	brne	.+10     	; 0x236 <main+0x112>
 22c:	63 e2       	ldi	r22, 0x23	; 35
 22e:	73 e0       	ldi	r23, 0x03	; 3
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	31 d0       	rcall	.+98     	; 0x298 <_ZN4UART14transmitStringEPKc>
				// Luk vindue
			}
			
			if (command == 'H')
 236:	18 34       	cpi	r17, 0x48	; 72
 238:	29 f4       	brne	.+10     	; 0x244 <main+0x120>
			{
				uart.transmitString("MODTOG KOMMANDO H\r\n");
 23a:	67 e3       	ldi	r22, 0x37	; 55
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	2a d0       	rcall	.+84     	; 0x298 <_ZN4UART14transmitStringEPKc>
 244:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__data_end+0x1>
				// Halvt åbent vindue
			}
			
			interruptFlag = 0;
 248:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__data_end>
 24c:	9c cf       	rjmp	.-200    	; 0x186 <main+0x62>

0000024e <__vector_5>:
 24e:	1f 92       	push	r1
		}
    }
}


ISR(INT4_vect) {
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
	interruptFlag = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__data_end+0x1>
 264:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end>
	EIFR = 0x00;
 268:	1c ba       	out	0x1c, r1	; 28
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 27c:	87 e6       	ldi	r24, 0x67	; 103
 27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 282:	88 e1       	ldi	r24, 0x18	; 24
 284:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 288:	08 95       	ret

0000028a <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 28a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 28e:	85 ff       	sbrs	r24, 5
 290:	fc cf       	rjmp	.-8      	; 0x28a <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 292:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 296:	08 95       	ret

00000298 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	8c 01       	movw	r16, r24
 2a2:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 2a4:	68 81       	ld	r22, Y
 2a6:	66 23       	and	r22, r22
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 2aa:	c8 01       	movw	r24, r16
 2ac:	ee df       	rcall	.-36     	; 0x28a <_ZN4UART8transmitEh>
		str++;
 2ae:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 2b0:	f9 cf       	rjmp	.-14     	; 0x2a4 <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	08 95       	ret

000002bc <_ZN11X10ModtagerC1EPh>:


#include "X10Modtager.h"

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
 2bc:	dc 01       	movw	r26, r24
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	94 30       	cpi	r25, 0x04	; 4
 2c2:	60 f4       	brcc	.+24     	; 0x2dc <_ZN11X10ModtagerC1EPh+0x20>
	{
		address_[i] = address[i];
 2c4:	29 2f       	mov	r18, r25
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	fb 01       	movw	r30, r22
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	40 81       	ld	r20, Z
 2d0:	fd 01       	movw	r30, r26
 2d2:	e2 0f       	add	r30, r18
 2d4:	f3 1f       	adc	r31, r19
 2d6:	41 ab       	std	Z+49, r20	; 0x31

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 2d8:	9f 5f       	subi	r25, 0xFF	; 255
 2da:	f2 cf       	rjmp	.-28     	; 0x2c0 <_ZN11X10ModtagerC1EPh+0x4>
 2dc:	08 95       	ret

000002de <_ZN11X10Modtager25protocolAndAddressCorrectEv>:
	
	this->translateFromManchesterCode();
}

bool X10Modtager::protocolAndAddressCorrect()
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	28 97       	sbiw	r28, 0x08	; 8
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	bc 01       	movw	r22, r24
	int initiateProtocol[4] = {1,1,1,0};
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	ea ee       	ldi	r30, 0xEA	; 234
 2f8:	f2 e0       	ldi	r31, 0x02	; 2
 2fa:	de 01       	movw	r26, r28
 2fc:	11 96       	adiw	r26, 0x01	; 1
 2fe:	01 90       	ld	r0, Z+
 300:	0d 92       	st	X+, r0
 302:	8a 95       	dec	r24
 304:	e1 f7       	brne	.-8      	; 0x2fe <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x20>
	
	for (uint8_t i = 0; i < 4; i++)
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	94 30       	cpi	r25, 0x04	; 4
 30a:	18 f5       	brcc	.+70     	; 0x352 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x74>
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
 30c:	29 2f       	mov	r18, r25
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	fb 01       	movw	r30, r22
 312:	e2 0f       	add	r30, r18
 314:	f3 1f       	adc	r31, r19
 316:	40 81       	ld	r20, Z
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	a1 e0       	ldi	r26, 0x01	; 1
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	ac 0f       	add	r26, r28
 326:	bd 1f       	adc	r27, r29
 328:	ea 0f       	add	r30, r26
 32a:	fb 1f       	adc	r31, r27
 32c:	01 90       	ld	r0, Z+
 32e:	f0 81       	ld	r31, Z
 330:	e0 2d       	mov	r30, r0
 332:	4e 17       	cp	r20, r30
 334:	5f 07       	cpc	r21, r31
 336:	79 f4       	brne	.+30     	; 0x356 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x78>
		{
			return false;
		}
		
		if (!(dataArray_[i+4] == address_[i]))
 338:	f9 01       	movw	r30, r18
 33a:	34 96       	adiw	r30, 0x04	; 4
 33c:	e6 0f       	add	r30, r22
 33e:	f7 1f       	adc	r31, r23
 340:	40 81       	ld	r20, Z
 342:	fb 01       	movw	r30, r22
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	81 a9       	ldd	r24, Z+49	; 0x31
 34a:	48 13       	cpse	r20, r24
 34c:	06 c0       	rjmp	.+12     	; 0x35a <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7c>

bool X10Modtager::protocolAndAddressCorrect()
{
	int initiateProtocol[4] = {1,1,1,0};
	
	for (uint8_t i = 0; i < 4; i++)
 34e:	9f 5f       	subi	r25, 0xFF	; 255
 350:	db cf       	rjmp	.-74     	; 0x308 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x2a>
		{
			return false;
		}
	}
	
	return true;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	03 c0       	rjmp	.+6      	; 0x35c <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
	
	for (uint8_t i = 0; i < 4; i++)
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
		{
			return false;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	01 c0       	rjmp	.+2      	; 0x35c <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
		}
		
		if (!(dataArray_[i+4] == address_[i]))
		{
			return false;
 35a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
 35c:	28 96       	adiw	r28, 0x08	; 8
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <_ZN11X10Modtager27translateFromManchesterCodeEv>:
	
	return 'a';
}

void X10Modtager::translateFromManchesterCode()
{
 36e:	dc 01       	movw	r26, r24
	manchesterError_ = false;
 370:	d0 96       	adiw	r26, 0x30	; 48
 372:	1c 92       	st	X, r1
 374:	d0 97       	sbiw	r26, 0x30	; 48

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 376:	90 e0       	ldi	r25, 0x00	; 0
void X10Modtager::translateFromManchesterCode()
{
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;
 378:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 37a:	9f 31       	cpi	r25, 0x1F	; 31
 37c:	78 f5       	brcc	.+94     	; 0x3dc <_ZN11X10Modtager27translateFromManchesterCodeEv+0x6e>
	{
		if (manchesterArray_[i] == 0 && manchesterArray_[i + 1] == 1)
 37e:	29 2f       	mov	r18, r25
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	fd 01       	movw	r30, r26
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	40 89       	ldd	r20, Z+16	; 0x10
 38a:	41 11       	cpse	r20, r1
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
 38e:	f9 01       	movw	r30, r18
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	ea 0f       	add	r30, r26
 394:	fb 1f       	adc	r31, r27
 396:	40 89       	ldd	r20, Z+16	; 0x10
 398:	41 30       	cpi	r20, 0x01	; 1
 39a:	31 f4       	brne	.+12     	; 0x3a8 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
		{
			dataArray_[dataArrayI] = 1;
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	fd 01       	movw	r30, r26
 3a0:	e8 0f       	add	r30, r24
 3a2:	f1 1d       	adc	r31, r1
 3a4:	20 83       	st	Z, r18
 3a6:	17 c0       	rjmp	.+46     	; 0x3d6 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else if (manchesterArray_[i] == 1 && manchesterArray_[i + 1] == 0)
 3a8:	fd 01       	movw	r30, r26
 3aa:	e2 0f       	add	r30, r18
 3ac:	f3 1f       	adc	r31, r19
 3ae:	40 89       	ldd	r20, Z+16	; 0x10
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	69 f4       	brne	.+26     	; 0x3ce <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	fd 01       	movw	r30, r26
 3ba:	e2 0f       	add	r30, r18
 3bc:	f3 1f       	adc	r31, r19
 3be:	20 89       	ldd	r18, Z+16	; 0x10
 3c0:	21 11       	cpse	r18, r1
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
		{
			dataArray_[dataArrayI] = 0;
 3c4:	fd 01       	movw	r30, r26
 3c6:	e8 0f       	add	r30, r24
 3c8:	f1 1d       	adc	r31, r1
 3ca:	10 82       	st	Z, r1
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else
		{
			manchesterError_ = true;
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	d0 96       	adiw	r26, 0x30	; 48
 3d2:	2c 93       	st	X, r18
 3d4:	d0 97       	sbiw	r26, 0x30	; 48
		}
		
		dataArrayI++;
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 3d8:	9e 5f       	subi	r25, 0xFE	; 254
 3da:	cf cf       	rjmp	.-98     	; 0x37a <_ZN11X10Modtager27translateFromManchesterCodeEv+0xc>
 3dc:	08 95       	ret

000003de <_ZN11X10Modtager10getNextBitEh>:
	}
	
} //X10Modtager

void X10Modtager::getNextBit(uint8_t nextBit)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	a0 97       	sbiw	r28, 0x20	; 32
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	ac 01       	movw	r20, r24
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9f 31       	cpi	r25, 0x1F	; 31
 3f8:	80 f4       	brcc	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
 3fa:	29 2f       	mov	r18, r25
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	31 96       	adiw	r30, 0x01	; 1
 402:	e4 0f       	add	r30, r20
 404:	f5 1f       	adc	r31, r21
 406:	80 89       	ldd	r24, Z+16	; 0x10
 408:	e1 e0       	ldi	r30, 0x01	; 1
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	ec 0f       	add	r30, r28
 40e:	fd 1f       	adc	r31, r29
 410:	e2 0f       	add	r30, r18
 412:	f3 1f       	adc	r31, r19
 414:	80 83       	st	Z, r24

void X10Modtager::getNextBit(uint8_t nextBit)
{
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 416:	9f 5f       	subi	r25, 0xFF	; 255
 418:	ee cf       	rjmp	.-36     	; 0x3f6 <_ZN11X10Modtager10getNextBitEh+0x18>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
	}
	
	nextManchesterArray[31] = nextBit;
 41a:	68 a3       	std	Y+32, r22	; 0x20
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 32       	cpi	r25, 0x20	; 32
 420:	78 f4       	brcc	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
 422:	29 2f       	mov	r18, r25
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	e1 e0       	ldi	r30, 0x01	; 1
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ec 0f       	add	r30, r28
 42c:	fd 1f       	adc	r31, r29
 42e:	e2 0f       	add	r30, r18
 430:	f3 1f       	adc	r31, r19
 432:	80 81       	ld	r24, Z
 434:	fa 01       	movw	r30, r20
 436:	e2 0f       	add	r30, r18
 438:	f3 1f       	adc	r31, r19
 43a:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	nextManchesterArray[31] = nextBit;
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 43c:	9f 5f       	subi	r25, 0xFF	; 255
 43e:	ef cf       	rjmp	.-34     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
	}
	
	this->translateFromManchesterCode();
 440:	ca 01       	movw	r24, r20
 442:	95 df       	rcall	.-214    	; 0x36e <_ZN11X10Modtager27translateFromManchesterCodeEv>
}
 444:	a0 96       	adiw	r28, 0x20	; 32
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <_ZN11X10Modtager11arraysEqualEPhS0_>:
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 30       	cpi	r24, 0x08	; 8
 45c:	91 05       	cpc	r25, r1
 45e:	64 f4       	brge	.+24     	; 0x478 <_ZN11X10Modtager11arraysEqualEPhS0_+0x22>
	    if (arr1[i] != arr2[i]) {
 460:	fb 01       	movw	r30, r22
 462:	e8 0f       	add	r30, r24
 464:	f9 1f       	adc	r31, r25
 466:	30 81       	ld	r19, Z
 468:	fa 01       	movw	r30, r20
 46a:	e8 0f       	add	r30, r24
 46c:	f9 1f       	adc	r31, r25
 46e:	20 81       	ld	r18, Z
 470:	32 13       	cpse	r19, r18
 472:	04 c0       	rjmp	.+8      	; 0x47c <_ZN11X10Modtager11arraysEqualEPhS0_+0x26>
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	f1 cf       	rjmp	.-30     	; 0x45a <_ZN11X10Modtager11arraysEqualEPhS0_+0x4>
	    if (arr1[i] != arr2[i]) {
		    return false;
	    }
    }
    return true;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	08 95       	ret

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
	    if (arr1[i] != arr2[i]) {
		    return false;
 47c:	80 e0       	ldi	r24, 0x00	; 0
	    }
    }
    return true;
}
 47e:	08 95       	ret

00000480 <_ZN11X10Modtager10getCommandEv>:
	
	return true;
}

char X10Modtager::getCommand()
{
 480:	cf 92       	push	r12
 482:	df 92       	push	r13
 484:	ef 92       	push	r14
 486:	ff 92       	push	r15
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	28 97       	sbiw	r28, 0x08	; 8
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	7c 01       	movw	r14, r24
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 4a0:	28 e0       	ldi	r18, 0x08	; 8
 4a2:	20 31       	cpi	r18, 0x10	; 16
 4a4:	88 f4       	brcc	.+34     	; 0x4c8 <_ZN11X10Modtager10getCommandEv+0x48>
	{
		command[j - DATA_START] = dataArray_[j];
 4a6:	82 2f       	mov	r24, r18
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	38 97       	sbiw	r30, 0x08	; 8
 4ae:	d7 01       	movw	r26, r14
 4b0:	a8 0f       	add	r26, r24
 4b2:	b9 1f       	adc	r27, r25
 4b4:	8c 91       	ld	r24, X
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	4c 0f       	add	r20, r28
 4bc:	5d 1f       	adc	r21, r29
 4be:	e4 0f       	add	r30, r20
 4c0:	f5 1f       	adc	r31, r21
 4c2:	80 83       	st	Z, r24
{
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 4c4:	2f 5f       	subi	r18, 0xFF	; 255
 4c6:	ed cf       	rjmp	.-38     	; 0x4a2 <_ZN11X10Modtager10getCommandEv+0x22>
 4c8:	10 e0       	ldi	r17, 0x00	; 0
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 4ca:	1b 31       	cpi	r17, 0x1B	; 27
 4cc:	18 f5       	brcc	.+70     	; 0x514 <_ZN11X10Modtager10getCommandEv+0x94>
	{
		if (this->arraysEqual(asciiLookup_[i].binary, command))
 4ce:	c1 2e       	mov	r12, r17
 4d0:	d1 2c       	mov	r13, r1
 4d2:	b6 01       	movw	r22, r12
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	6c 0d       	add	r22, r12
 4e2:	7d 1d       	adc	r23, r13
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7d 4f       	sbci	r23, 0xFD	; 253
 4e8:	ae 01       	movw	r20, r28
 4ea:	4f 5f       	subi	r20, 0xFF	; 255
 4ec:	5f 4f       	sbci	r21, 0xFF	; 255
 4ee:	c7 01       	movw	r24, r14
 4f0:	b2 df       	rcall	.-156    	; 0x456 <_ZN11X10Modtager11arraysEqualEPhS0_>
 4f2:	88 23       	and	r24, r24
 4f4:	69 f0       	breq	.+26     	; 0x510 <_ZN11X10Modtager10getCommandEv+0x90>
		{
			return asciiLookup_[i].character;
 4f6:	f6 01       	movw	r30, r12
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	ec 0d       	add	r30, r12
 506:	fd 1d       	adc	r31, r13
 508:	e0 50       	subi	r30, 0x00	; 0
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	80 81       	ld	r24, Z
 50e:	03 c0       	rjmp	.+6      	; 0x516 <_ZN11X10Modtager10getCommandEv+0x96>
	for (uint8_t j = DATA_START; j < DATA_END; j++)
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 510:	1f 5f       	subi	r17, 0xFF	; 255
 512:	db cf       	rjmp	.-74     	; 0x4ca <_ZN11X10Modtager10getCommandEv+0x4a>
		{
			return asciiLookup_[i].character;
		}
	}
	
	return 'a';
 514:	81 e6       	ldi	r24, 0x61	; 97
}
 516:	28 96       	adiw	r28, 0x08	; 8
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	08 95       	ret

00000532 <sprintf>:
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	2e 97       	sbiw	r28, 0x0e	; 14
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	0e 89       	ldd	r16, Y+22	; 0x16
 54c:	1f 89       	ldd	r17, Y+23	; 0x17
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	8c 83       	std	Y+4, r24	; 0x04
 552:	1a 83       	std	Y+2, r17	; 0x02
 554:	09 83       	std	Y+1, r16	; 0x01
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	9f e7       	ldi	r25, 0x7F	; 127
 55a:	9e 83       	std	Y+6, r25	; 0x06
 55c:	8d 83       	std	Y+5, r24	; 0x05
 55e:	ae 01       	movw	r20, r28
 560:	46 5e       	subi	r20, 0xE6	; 230
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	68 8d       	ldd	r22, Y+24	; 0x18
 566:	79 8d       	ldd	r23, Y+25	; 0x19
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	10 d0       	rcall	.+32     	; 0x58e <vfprintf>
 56e:	ef 81       	ldd	r30, Y+7	; 0x07
 570:	f8 85       	ldd	r31, Y+8	; 0x08
 572:	e0 0f       	add	r30, r16
 574:	f1 1f       	adc	r31, r17
 576:	10 82       	st	Z, r1
 578:	2e 96       	adiw	r28, 0x0e	; 14
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <vfprintf>:
 58e:	2f 92       	push	r2
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	2b 97       	sbiw	r28, 0x0b	; 11
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	6c 01       	movw	r12, r24
 5c4:	7b 01       	movw	r14, r22
 5c6:	8a 01       	movw	r16, r20
 5c8:	fc 01       	movw	r30, r24
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	81 ff       	sbrs	r24, 1
 5d2:	bf c1       	rjmp	.+894    	; 0x952 <vfprintf+0x3c4>
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	3c 01       	movw	r6, r24
 5da:	f6 01       	movw	r30, r12
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	f7 01       	movw	r30, r14
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	7f 01       	movw	r14, r30
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <vfprintf+0x62>
 5ee:	ad c1       	rjmp	.+858    	; 0x94a <vfprintf+0x3bc>
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x74>
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	21 f4       	brne	.+8      	; 0x60a <vfprintf+0x7c>
 602:	b6 01       	movw	r22, r12
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	d6 d1       	rcall	.+940    	; 0x9b4 <fputc>
 608:	e8 cf       	rjmp	.-48     	; 0x5da <vfprintf+0x4c>
 60a:	91 2c       	mov	r9, r1
 60c:	21 2c       	mov	r2, r1
 60e:	31 2c       	mov	r3, r1
 610:	ff e1       	ldi	r31, 0x1F	; 31
 612:	f3 15       	cp	r31, r3
 614:	d8 f0       	brcs	.+54     	; 0x64c <vfprintf+0xbe>
 616:	8b 32       	cpi	r24, 0x2B	; 43
 618:	79 f0       	breq	.+30     	; 0x638 <vfprintf+0xaa>
 61a:	38 f4       	brcc	.+14     	; 0x62a <vfprintf+0x9c>
 61c:	80 32       	cpi	r24, 0x20	; 32
 61e:	79 f0       	breq	.+30     	; 0x63e <vfprintf+0xb0>
 620:	83 32       	cpi	r24, 0x23	; 35
 622:	a1 f4       	brne	.+40     	; 0x64c <vfprintf+0xbe>
 624:	23 2d       	mov	r18, r3
 626:	20 61       	ori	r18, 0x10	; 16
 628:	1d c0       	rjmp	.+58     	; 0x664 <vfprintf+0xd6>
 62a:	8d 32       	cpi	r24, 0x2D	; 45
 62c:	61 f0       	breq	.+24     	; 0x646 <vfprintf+0xb8>
 62e:	80 33       	cpi	r24, 0x30	; 48
 630:	69 f4       	brne	.+26     	; 0x64c <vfprintf+0xbe>
 632:	23 2d       	mov	r18, r3
 634:	21 60       	ori	r18, 0x01	; 1
 636:	16 c0       	rjmp	.+44     	; 0x664 <vfprintf+0xd6>
 638:	83 2d       	mov	r24, r3
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	38 2e       	mov	r3, r24
 63e:	e3 2d       	mov	r30, r3
 640:	e4 60       	ori	r30, 0x04	; 4
 642:	3e 2e       	mov	r3, r30
 644:	2a c0       	rjmp	.+84     	; 0x69a <vfprintf+0x10c>
 646:	f3 2d       	mov	r31, r3
 648:	f8 60       	ori	r31, 0x08	; 8
 64a:	1d c0       	rjmp	.+58     	; 0x686 <vfprintf+0xf8>
 64c:	37 fc       	sbrc	r3, 7
 64e:	2d c0       	rjmp	.+90     	; 0x6aa <vfprintf+0x11c>
 650:	20 ed       	ldi	r18, 0xD0	; 208
 652:	28 0f       	add	r18, r24
 654:	2a 30       	cpi	r18, 0x0A	; 10
 656:	40 f0       	brcs	.+16     	; 0x668 <vfprintf+0xda>
 658:	8e 32       	cpi	r24, 0x2E	; 46
 65a:	b9 f4       	brne	.+46     	; 0x68a <vfprintf+0xfc>
 65c:	36 fc       	sbrc	r3, 6
 65e:	75 c1       	rjmp	.+746    	; 0x94a <vfprintf+0x3bc>
 660:	23 2d       	mov	r18, r3
 662:	20 64       	ori	r18, 0x40	; 64
 664:	32 2e       	mov	r3, r18
 666:	19 c0       	rjmp	.+50     	; 0x69a <vfprintf+0x10c>
 668:	36 fe       	sbrs	r3, 6
 66a:	06 c0       	rjmp	.+12     	; 0x678 <vfprintf+0xea>
 66c:	8a e0       	ldi	r24, 0x0A	; 10
 66e:	98 9e       	mul	r9, r24
 670:	20 0d       	add	r18, r0
 672:	11 24       	eor	r1, r1
 674:	92 2e       	mov	r9, r18
 676:	11 c0       	rjmp	.+34     	; 0x69a <vfprintf+0x10c>
 678:	ea e0       	ldi	r30, 0x0A	; 10
 67a:	2e 9e       	mul	r2, r30
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	22 2e       	mov	r2, r18
 682:	f3 2d       	mov	r31, r3
 684:	f0 62       	ori	r31, 0x20	; 32
 686:	3f 2e       	mov	r3, r31
 688:	08 c0       	rjmp	.+16     	; 0x69a <vfprintf+0x10c>
 68a:	8c 36       	cpi	r24, 0x6C	; 108
 68c:	21 f4       	brne	.+8      	; 0x696 <vfprintf+0x108>
 68e:	83 2d       	mov	r24, r3
 690:	80 68       	ori	r24, 0x80	; 128
 692:	38 2e       	mov	r3, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0x10c>
 696:	88 36       	cpi	r24, 0x68	; 104
 698:	41 f4       	brne	.+16     	; 0x6aa <vfprintf+0x11c>
 69a:	f7 01       	movw	r30, r14
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	7f 01       	movw	r14, r30
 6a6:	81 11       	cpse	r24, r1
 6a8:	b3 cf       	rjmp	.-154    	; 0x610 <vfprintf+0x82>
 6aa:	98 2f       	mov	r25, r24
 6ac:	9f 7d       	andi	r25, 0xDF	; 223
 6ae:	95 54       	subi	r25, 0x45	; 69
 6b0:	93 30       	cpi	r25, 0x03	; 3
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0x130>
 6b4:	0c 5f       	subi	r16, 0xFC	; 252
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	9f e3       	ldi	r25, 0x3F	; 63
 6ba:	99 83       	std	Y+1, r25	; 0x01
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <vfprintf+0x14a>
 6be:	83 36       	cpi	r24, 0x63	; 99
 6c0:	31 f0       	breq	.+12     	; 0x6ce <vfprintf+0x140>
 6c2:	83 37       	cpi	r24, 0x73	; 115
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <vfprintf+0x154>
 6c6:	83 35       	cpi	r24, 0x53	; 83
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x13e>
 6ca:	55 c0       	rjmp	.+170    	; 0x776 <vfprintf+0x1e8>
 6cc:	20 c0       	rjmp	.+64     	; 0x70e <vfprintf+0x180>
 6ce:	f8 01       	movw	r30, r16
 6d0:	80 81       	ld	r24, Z
 6d2:	89 83       	std	Y+1, r24	; 0x01
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	88 24       	eor	r8, r8
 6da:	83 94       	inc	r8
 6dc:	91 2c       	mov	r9, r1
 6de:	53 01       	movw	r10, r6
 6e0:	12 c0       	rjmp	.+36     	; 0x706 <vfprintf+0x178>
 6e2:	28 01       	movw	r4, r16
 6e4:	f2 e0       	ldi	r31, 0x02	; 2
 6e6:	4f 0e       	add	r4, r31
 6e8:	51 1c       	adc	r5, r1
 6ea:	f8 01       	movw	r30, r16
 6ec:	a0 80       	ld	r10, Z
 6ee:	b1 80       	ldd	r11, Z+1	; 0x01
 6f0:	36 fe       	sbrs	r3, 6
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x16c>
 6f4:	69 2d       	mov	r22, r9
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <vfprintf+0x170>
 6fa:	6f ef       	ldi	r22, 0xFF	; 255
 6fc:	7f ef       	ldi	r23, 0xFF	; 255
 6fe:	c5 01       	movw	r24, r10
 700:	4e d1       	rcall	.+668    	; 0x99e <strnlen>
 702:	4c 01       	movw	r8, r24
 704:	82 01       	movw	r16, r4
 706:	f3 2d       	mov	r31, r3
 708:	ff 77       	andi	r31, 0x7F	; 127
 70a:	3f 2e       	mov	r3, r31
 70c:	15 c0       	rjmp	.+42     	; 0x738 <vfprintf+0x1aa>
 70e:	28 01       	movw	r4, r16
 710:	22 e0       	ldi	r18, 0x02	; 2
 712:	42 0e       	add	r4, r18
 714:	51 1c       	adc	r5, r1
 716:	f8 01       	movw	r30, r16
 718:	a0 80       	ld	r10, Z
 71a:	b1 80       	ldd	r11, Z+1	; 0x01
 71c:	36 fe       	sbrs	r3, 6
 71e:	03 c0       	rjmp	.+6      	; 0x726 <vfprintf+0x198>
 720:	69 2d       	mov	r22, r9
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0x19c>
 726:	6f ef       	ldi	r22, 0xFF	; 255
 728:	7f ef       	ldi	r23, 0xFF	; 255
 72a:	c5 01       	movw	r24, r10
 72c:	2d d1       	rcall	.+602    	; 0x988 <strnlen_P>
 72e:	4c 01       	movw	r8, r24
 730:	f3 2d       	mov	r31, r3
 732:	f0 68       	ori	r31, 0x80	; 128
 734:	3f 2e       	mov	r3, r31
 736:	82 01       	movw	r16, r4
 738:	33 fc       	sbrc	r3, 3
 73a:	19 c0       	rjmp	.+50     	; 0x76e <vfprintf+0x1e0>
 73c:	82 2d       	mov	r24, r2
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	88 16       	cp	r8, r24
 742:	99 06       	cpc	r9, r25
 744:	a0 f4       	brcc	.+40     	; 0x76e <vfprintf+0x1e0>
 746:	b6 01       	movw	r22, r12
 748:	80 e2       	ldi	r24, 0x20	; 32
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	33 d1       	rcall	.+614    	; 0x9b4 <fputc>
 74e:	2a 94       	dec	r2
 750:	f5 cf       	rjmp	.-22     	; 0x73c <vfprintf+0x1ae>
 752:	f5 01       	movw	r30, r10
 754:	37 fc       	sbrc	r3, 7
 756:	85 91       	lpm	r24, Z+
 758:	37 fe       	sbrs	r3, 7
 75a:	81 91       	ld	r24, Z+
 75c:	5f 01       	movw	r10, r30
 75e:	b6 01       	movw	r22, r12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	28 d1       	rcall	.+592    	; 0x9b4 <fputc>
 764:	21 10       	cpse	r2, r1
 766:	2a 94       	dec	r2
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	82 1a       	sub	r8, r18
 76c:	91 08       	sbc	r9, r1
 76e:	81 14       	cp	r8, r1
 770:	91 04       	cpc	r9, r1
 772:	79 f7       	brne	.-34     	; 0x752 <vfprintf+0x1c4>
 774:	e1 c0       	rjmp	.+450    	; 0x938 <vfprintf+0x3aa>
 776:	84 36       	cpi	r24, 0x64	; 100
 778:	11 f0       	breq	.+4      	; 0x77e <vfprintf+0x1f0>
 77a:	89 36       	cpi	r24, 0x69	; 105
 77c:	39 f5       	brne	.+78     	; 0x7cc <vfprintf+0x23e>
 77e:	f8 01       	movw	r30, r16
 780:	37 fe       	sbrs	r3, 7
 782:	07 c0       	rjmp	.+14     	; 0x792 <vfprintf+0x204>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	82 81       	ldd	r24, Z+2	; 0x02
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	0c 5f       	subi	r16, 0xFC	; 252
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <vfprintf+0x214>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	07 2e       	mov	r0, r23
 798:	00 0c       	add	r0, r0
 79a:	88 0b       	sbc	r24, r24
 79c:	99 0b       	sbc	r25, r25
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	f3 2d       	mov	r31, r3
 7a4:	ff 76       	andi	r31, 0x6F	; 111
 7a6:	3f 2e       	mov	r3, r31
 7a8:	97 ff       	sbrs	r25, 7
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x230>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	f0 68       	ori	r31, 0x80	; 128
 7bc:	3f 2e       	mov	r3, r31
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	a3 01       	movw	r20, r6
 7c4:	33 d1       	rcall	.+614    	; 0xa2c <__ultoa_invert>
 7c6:	88 2e       	mov	r8, r24
 7c8:	86 18       	sub	r8, r6
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <vfprintf+0x2c6>
 7cc:	85 37       	cpi	r24, 0x75	; 117
 7ce:	31 f4       	brne	.+12     	; 0x7dc <vfprintf+0x24e>
 7d0:	23 2d       	mov	r18, r3
 7d2:	2f 7e       	andi	r18, 0xEF	; 239
 7d4:	b2 2e       	mov	r11, r18
 7d6:	2a e0       	ldi	r18, 0x0A	; 10
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	25 c0       	rjmp	.+74     	; 0x826 <vfprintf+0x298>
 7dc:	93 2d       	mov	r25, r3
 7de:	99 7f       	andi	r25, 0xF9	; 249
 7e0:	b9 2e       	mov	r11, r25
 7e2:	8f 36       	cpi	r24, 0x6F	; 111
 7e4:	c1 f0       	breq	.+48     	; 0x816 <vfprintf+0x288>
 7e6:	18 f4       	brcc	.+6      	; 0x7ee <vfprintf+0x260>
 7e8:	88 35       	cpi	r24, 0x58	; 88
 7ea:	79 f0       	breq	.+30     	; 0x80a <vfprintf+0x27c>
 7ec:	ae c0       	rjmp	.+348    	; 0x94a <vfprintf+0x3bc>
 7ee:	80 37       	cpi	r24, 0x70	; 112
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <vfprintf+0x26a>
 7f2:	88 37       	cpi	r24, 0x78	; 120
 7f4:	21 f0       	breq	.+8      	; 0x7fe <vfprintf+0x270>
 7f6:	a9 c0       	rjmp	.+338    	; 0x94a <vfprintf+0x3bc>
 7f8:	e9 2f       	mov	r30, r25
 7fa:	e0 61       	ori	r30, 0x10	; 16
 7fc:	be 2e       	mov	r11, r30
 7fe:	b4 fe       	sbrs	r11, 4
 800:	0d c0       	rjmp	.+26     	; 0x81c <vfprintf+0x28e>
 802:	fb 2d       	mov	r31, r11
 804:	f4 60       	ori	r31, 0x04	; 4
 806:	bf 2e       	mov	r11, r31
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x28e>
 80a:	34 fe       	sbrs	r3, 4
 80c:	0a c0       	rjmp	.+20     	; 0x822 <vfprintf+0x294>
 80e:	29 2f       	mov	r18, r25
 810:	26 60       	ori	r18, 0x06	; 6
 812:	b2 2e       	mov	r11, r18
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0x294>
 816:	28 e0       	ldi	r18, 0x08	; 8
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	05 c0       	rjmp	.+10     	; 0x826 <vfprintf+0x298>
 81c:	20 e1       	ldi	r18, 0x10	; 16
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x298>
 822:	20 e1       	ldi	r18, 0x10	; 16
 824:	32 e0       	ldi	r19, 0x02	; 2
 826:	f8 01       	movw	r30, r16
 828:	b7 fe       	sbrs	r11, 7
 82a:	07 c0       	rjmp	.+14     	; 0x83a <vfprintf+0x2ac>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	0c 5f       	subi	r16, 0xFC	; 252
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0x2b8>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 5f       	subi	r16, 0xFE	; 254
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	a3 01       	movw	r20, r6
 848:	f1 d0       	rcall	.+482    	; 0xa2c <__ultoa_invert>
 84a:	88 2e       	mov	r8, r24
 84c:	86 18       	sub	r8, r6
 84e:	fb 2d       	mov	r31, r11
 850:	ff 77       	andi	r31, 0x7F	; 127
 852:	3f 2e       	mov	r3, r31
 854:	36 fe       	sbrs	r3, 6
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x2e4>
 858:	23 2d       	mov	r18, r3
 85a:	2e 7f       	andi	r18, 0xFE	; 254
 85c:	a2 2e       	mov	r10, r18
 85e:	89 14       	cp	r8, r9
 860:	58 f4       	brcc	.+22     	; 0x878 <vfprintf+0x2ea>
 862:	34 fe       	sbrs	r3, 4
 864:	0b c0       	rjmp	.+22     	; 0x87c <vfprintf+0x2ee>
 866:	32 fc       	sbrc	r3, 2
 868:	09 c0       	rjmp	.+18     	; 0x87c <vfprintf+0x2ee>
 86a:	83 2d       	mov	r24, r3
 86c:	8e 7e       	andi	r24, 0xEE	; 238
 86e:	a8 2e       	mov	r10, r24
 870:	05 c0       	rjmp	.+10     	; 0x87c <vfprintf+0x2ee>
 872:	b8 2c       	mov	r11, r8
 874:	a3 2c       	mov	r10, r3
 876:	03 c0       	rjmp	.+6      	; 0x87e <vfprintf+0x2f0>
 878:	b8 2c       	mov	r11, r8
 87a:	01 c0       	rjmp	.+2      	; 0x87e <vfprintf+0x2f0>
 87c:	b9 2c       	mov	r11, r9
 87e:	a4 fe       	sbrs	r10, 4
 880:	0f c0       	rjmp	.+30     	; 0x8a0 <vfprintf+0x312>
 882:	fe 01       	movw	r30, r28
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	80 33       	cpi	r24, 0x30	; 48
 88c:	21 f4       	brne	.+8      	; 0x896 <vfprintf+0x308>
 88e:	9a 2d       	mov	r25, r10
 890:	99 7e       	andi	r25, 0xE9	; 233
 892:	a9 2e       	mov	r10, r25
 894:	09 c0       	rjmp	.+18     	; 0x8a8 <vfprintf+0x31a>
 896:	a2 fe       	sbrs	r10, 2
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x318>
 89a:	b3 94       	inc	r11
 89c:	b3 94       	inc	r11
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <vfprintf+0x31a>
 8a0:	8a 2d       	mov	r24, r10
 8a2:	86 78       	andi	r24, 0x86	; 134
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <vfprintf+0x31a>
 8a6:	b3 94       	inc	r11
 8a8:	a3 fc       	sbrc	r10, 3
 8aa:	10 c0       	rjmp	.+32     	; 0x8cc <vfprintf+0x33e>
 8ac:	a0 fe       	sbrs	r10, 0
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <vfprintf+0x32e>
 8b0:	b2 14       	cp	r11, r2
 8b2:	80 f4       	brcc	.+32     	; 0x8d4 <vfprintf+0x346>
 8b4:	28 0c       	add	r2, r8
 8b6:	92 2c       	mov	r9, r2
 8b8:	9b 18       	sub	r9, r11
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x348>
 8bc:	b2 14       	cp	r11, r2
 8be:	58 f4       	brcc	.+22     	; 0x8d6 <vfprintf+0x348>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	76 d0       	rcall	.+236    	; 0x9b4 <fputc>
 8c8:	b3 94       	inc	r11
 8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <vfprintf+0x32e>
 8cc:	b2 14       	cp	r11, r2
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <vfprintf+0x348>
 8d0:	2b 18       	sub	r2, r11
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x34a>
 8d4:	98 2c       	mov	r9, r8
 8d6:	21 2c       	mov	r2, r1
 8d8:	a4 fe       	sbrs	r10, 4
 8da:	0f c0       	rjmp	.+30     	; 0x8fa <vfprintf+0x36c>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	68 d0       	rcall	.+208    	; 0x9b4 <fputc>
 8e4:	a2 fe       	sbrs	r10, 2
 8e6:	16 c0       	rjmp	.+44     	; 0x914 <vfprintf+0x386>
 8e8:	a1 fc       	sbrc	r10, 1
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <vfprintf+0x364>
 8ec:	88 e7       	ldi	r24, 0x78	; 120
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x368>
 8f2:	88 e5       	ldi	r24, 0x58	; 88
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	b6 01       	movw	r22, r12
 8f8:	0c c0       	rjmp	.+24     	; 0x912 <vfprintf+0x384>
 8fa:	8a 2d       	mov	r24, r10
 8fc:	86 78       	andi	r24, 0x86	; 134
 8fe:	51 f0       	breq	.+20     	; 0x914 <vfprintf+0x386>
 900:	a1 fe       	sbrs	r10, 1
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x37a>
 904:	8b e2       	ldi	r24, 0x2B	; 43
 906:	01 c0       	rjmp	.+2      	; 0x90a <vfprintf+0x37c>
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	a7 fc       	sbrc	r10, 7
 90c:	8d e2       	ldi	r24, 0x2D	; 45
 90e:	b6 01       	movw	r22, r12
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	50 d0       	rcall	.+160    	; 0x9b4 <fputc>
 914:	89 14       	cp	r8, r9
 916:	30 f4       	brcc	.+12     	; 0x924 <vfprintf+0x396>
 918:	b6 01       	movw	r22, r12
 91a:	80 e3       	ldi	r24, 0x30	; 48
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	4a d0       	rcall	.+148    	; 0x9b4 <fputc>
 920:	9a 94       	dec	r9
 922:	f8 cf       	rjmp	.-16     	; 0x914 <vfprintf+0x386>
 924:	8a 94       	dec	r8
 926:	f3 01       	movw	r30, r6
 928:	e8 0d       	add	r30, r8
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	40 d0       	rcall	.+128    	; 0x9b4 <fputc>
 934:	81 10       	cpse	r8, r1
 936:	f6 cf       	rjmp	.-20     	; 0x924 <vfprintf+0x396>
 938:	22 20       	and	r2, r2
 93a:	09 f4       	brne	.+2      	; 0x93e <vfprintf+0x3b0>
 93c:	4e ce       	rjmp	.-868    	; 0x5da <vfprintf+0x4c>
 93e:	b6 01       	movw	r22, r12
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	37 d0       	rcall	.+110    	; 0x9b4 <fputc>
 946:	2a 94       	dec	r2
 948:	f7 cf       	rjmp	.-18     	; 0x938 <vfprintf+0x3aa>
 94a:	f6 01       	movw	r30, r12
 94c:	86 81       	ldd	r24, Z+6	; 0x06
 94e:	97 81       	ldd	r25, Z+7	; 0x07
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x3c8>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	2b 96       	adiw	r28, 0x0b	; 11
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	df 90       	pop	r13
 970:	cf 90       	pop	r12
 972:	bf 90       	pop	r11
 974:	af 90       	pop	r10
 976:	9f 90       	pop	r9
 978:	8f 90       	pop	r8
 97a:	7f 90       	pop	r7
 97c:	6f 90       	pop	r6
 97e:	5f 90       	pop	r5
 980:	4f 90       	pop	r4
 982:	3f 90       	pop	r3
 984:	2f 90       	pop	r2
 986:	08 95       	ret

00000988 <strnlen_P>:
 988:	fc 01       	movw	r30, r24
 98a:	05 90       	lpm	r0, Z+
 98c:	61 50       	subi	r22, 0x01	; 1
 98e:	70 40       	sbci	r23, 0x00	; 0
 990:	01 10       	cpse	r0, r1
 992:	d8 f7       	brcc	.-10     	; 0x98a <strnlen_P+0x2>
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	8e 0f       	add	r24, r30
 99a:	9f 1f       	adc	r25, r31
 99c:	08 95       	ret

0000099e <strnlen>:
 99e:	fc 01       	movw	r30, r24
 9a0:	61 50       	subi	r22, 0x01	; 1
 9a2:	70 40       	sbci	r23, 0x00	; 0
 9a4:	01 90       	ld	r0, Z+
 9a6:	01 10       	cpse	r0, r1
 9a8:	d8 f7       	brcc	.-10     	; 0x9a0 <strnlen+0x2>
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	8e 0f       	add	r24, r30
 9b0:	9f 1f       	adc	r25, r31
 9b2:	08 95       	ret

000009b4 <fputc>:
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	fb 01       	movw	r30, r22
 9be:	23 81       	ldd	r18, Z+3	; 0x03
 9c0:	21 fd       	sbrc	r18, 1
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <fputc+0x16>
 9c4:	8f ef       	ldi	r24, 0xFF	; 255
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	2c c0       	rjmp	.+88     	; 0xa22 <fputc+0x6e>
 9ca:	22 ff       	sbrs	r18, 2
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <fputc+0x46>
 9ce:	46 81       	ldd	r20, Z+6	; 0x06
 9d0:	57 81       	ldd	r21, Z+7	; 0x07
 9d2:	24 81       	ldd	r18, Z+4	; 0x04
 9d4:	35 81       	ldd	r19, Z+5	; 0x05
 9d6:	42 17       	cp	r20, r18
 9d8:	53 07       	cpc	r21, r19
 9da:	44 f4       	brge	.+16     	; 0x9ec <fputc+0x38>
 9dc:	a0 81       	ld	r26, Z
 9de:	b1 81       	ldd	r27, Z+1	; 0x01
 9e0:	9d 01       	movw	r18, r26
 9e2:	2f 5f       	subi	r18, 0xFF	; 255
 9e4:	3f 4f       	sbci	r19, 0xFF	; 255
 9e6:	31 83       	std	Z+1, r19	; 0x01
 9e8:	20 83       	st	Z, r18
 9ea:	8c 93       	st	X, r24
 9ec:	26 81       	ldd	r18, Z+6	; 0x06
 9ee:	37 81       	ldd	r19, Z+7	; 0x07
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	37 83       	std	Z+7, r19	; 0x07
 9f6:	26 83       	std	Z+6, r18	; 0x06
 9f8:	14 c0       	rjmp	.+40     	; 0xa22 <fputc+0x6e>
 9fa:	8b 01       	movw	r16, r22
 9fc:	ec 01       	movw	r28, r24
 9fe:	fb 01       	movw	r30, r22
 a00:	00 84       	ldd	r0, Z+8	; 0x08
 a02:	f1 85       	ldd	r31, Z+9	; 0x09
 a04:	e0 2d       	mov	r30, r0
 a06:	19 95       	eicall
 a08:	89 2b       	or	r24, r25
 a0a:	e1 f6       	brne	.-72     	; 0x9c4 <fputc+0x10>
 a0c:	d8 01       	movw	r26, r16
 a0e:	16 96       	adiw	r26, 0x06	; 6
 a10:	8d 91       	ld	r24, X+
 a12:	9c 91       	ld	r25, X
 a14:	17 97       	sbiw	r26, 0x07	; 7
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	17 96       	adiw	r26, 0x07	; 7
 a1a:	9c 93       	st	X, r25
 a1c:	8e 93       	st	-X, r24
 a1e:	16 97       	sbiw	r26, 0x06	; 6
 a20:	ce 01       	movw	r24, r28
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <__ultoa_invert>:
 a2c:	fa 01       	movw	r30, r20
 a2e:	aa 27       	eor	r26, r26
 a30:	28 30       	cpi	r18, 0x08	; 8
 a32:	51 f1       	breq	.+84     	; 0xa88 <__ultoa_invert+0x5c>
 a34:	20 31       	cpi	r18, 0x10	; 16
 a36:	81 f1       	breq	.+96     	; 0xa98 <__ultoa_invert+0x6c>
 a38:	e8 94       	clt
 a3a:	6f 93       	push	r22
 a3c:	6e 7f       	andi	r22, 0xFE	; 254
 a3e:	6e 5f       	subi	r22, 0xFE	; 254
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	af 4f       	sbci	r26, 0xFF	; 255
 a48:	b1 e0       	ldi	r27, 0x01	; 1
 a4a:	3e d0       	rcall	.+124    	; 0xac8 <__ultoa_invert+0x9c>
 a4c:	b4 e0       	ldi	r27, 0x04	; 4
 a4e:	3c d0       	rcall	.+120    	; 0xac8 <__ultoa_invert+0x9c>
 a50:	67 0f       	add	r22, r23
 a52:	78 1f       	adc	r23, r24
 a54:	89 1f       	adc	r24, r25
 a56:	9a 1f       	adc	r25, r26
 a58:	a1 1d       	adc	r26, r1
 a5a:	68 0f       	add	r22, r24
 a5c:	79 1f       	adc	r23, r25
 a5e:	8a 1f       	adc	r24, r26
 a60:	91 1d       	adc	r25, r1
 a62:	a1 1d       	adc	r26, r1
 a64:	6a 0f       	add	r22, r26
 a66:	71 1d       	adc	r23, r1
 a68:	81 1d       	adc	r24, r1
 a6a:	91 1d       	adc	r25, r1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	20 d0       	rcall	.+64     	; 0xab0 <__ultoa_invert+0x84>
 a70:	09 f4       	brne	.+2      	; 0xa74 <__ultoa_invert+0x48>
 a72:	68 94       	set
 a74:	3f 91       	pop	r19
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	26 9f       	mul	r18, r22
 a7a:	11 24       	eor	r1, r1
 a7c:	30 19       	sub	r19, r0
 a7e:	30 5d       	subi	r19, 0xD0	; 208
 a80:	31 93       	st	Z+, r19
 a82:	de f6       	brtc	.-74     	; 0xa3a <__ultoa_invert+0xe>
 a84:	cf 01       	movw	r24, r30
 a86:	08 95       	ret
 a88:	46 2f       	mov	r20, r22
 a8a:	47 70       	andi	r20, 0x07	; 7
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	41 93       	st	Z+, r20
 a90:	b3 e0       	ldi	r27, 0x03	; 3
 a92:	0f d0       	rcall	.+30     	; 0xab2 <__ultoa_invert+0x86>
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x5c>
 a96:	f6 cf       	rjmp	.-20     	; 0xa84 <__ultoa_invert+0x58>
 a98:	46 2f       	mov	r20, r22
 a9a:	4f 70       	andi	r20, 0x0F	; 15
 a9c:	40 5d       	subi	r20, 0xD0	; 208
 a9e:	4a 33       	cpi	r20, 0x3A	; 58
 aa0:	18 f0       	brcs	.+6      	; 0xaa8 <__ultoa_invert+0x7c>
 aa2:	49 5d       	subi	r20, 0xD9	; 217
 aa4:	31 fd       	sbrc	r19, 1
 aa6:	40 52       	subi	r20, 0x20	; 32
 aa8:	41 93       	st	Z+, r20
 aaa:	02 d0       	rcall	.+4      	; 0xab0 <__ultoa_invert+0x84>
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__ultoa_invert+0x6c>
 aae:	ea cf       	rjmp	.-44     	; 0xa84 <__ultoa_invert+0x58>
 ab0:	b4 e0       	ldi	r27, 0x04	; 4
 ab2:	a6 95       	lsr	r26
 ab4:	97 95       	ror	r25
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0x86>
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	61 05       	cpc	r22, r1
 ac4:	71 05       	cpc	r23, r1
 ac6:	08 95       	ret
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
 acc:	0a 2e       	mov	r0, r26
 ace:	06 94       	lsr	r0
 ad0:	57 95       	ror	r21
 ad2:	47 95       	ror	r20
 ad4:	37 95       	ror	r19
 ad6:	27 95       	ror	r18
 ad8:	ba 95       	dec	r27
 ada:	c9 f7       	brne	.-14     	; 0xace <__ultoa_invert+0xa2>
 adc:	62 0f       	add	r22, r18
 ade:	73 1f       	adc	r23, r19
 ae0:	84 1f       	adc	r24, r20
 ae2:	95 1f       	adc	r25, r21
 ae4:	a0 1d       	adc	r26, r0
 ae6:	08 95       	ret

00000ae8 <_exit>:
 ae8:	f8 94       	cli

00000aea <__stop_program>:
 aea:	ff cf       	rjmp	.-2      	; 0xaea <__stop_program>
