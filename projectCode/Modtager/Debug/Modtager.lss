
Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800200  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800338  00800338  0000069c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001944  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  000032ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000985  00000000  00000000  00003c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  00004591  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	e9 c0       	rjmp	.+466    	; 0x1e8 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ed       	ldi	r30, 0xD0	; 208
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 33       	cpi	r26, 0x3A	; 58
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d5 c1       	rjmp	.+938    	; 0x4cc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Utils/X10Modtager.h"

volatile int interruptFlag = 0;

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	ea 97       	sbiw	r28, 0x3a	; 58
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	// tænder interrupts.
	EICRB |= (1 << ISC41) | (1 << ISC40); // Configure INT4 to trigger on rising edge
 138:	ea e6       	ldi	r30, 0x6A	; 106
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);                 // Enable INT4
 142:	8d b3       	in	r24, 0x1d	; 29
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8d bb       	out	0x1d, r24	; 29
	sei();
 148:	78 94       	sei
	
	// Sætter PORTB som input port.
	DDRB &= ~(1 << PB5);
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	84 b9       	out	0x04, r24	; 4
	
	UART uart;
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	5e d0       	rcall	.+188    	; 0x212 <_ZN4UARTC1Ev>
	uart.transmitString("KLAR!!!!");
 156:	62 ef       	ldi	r22, 0xF2	; 242
 158:	72 e0       	ldi	r23, 0x02	; 2
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	69 d0       	rcall	.+210    	; 0x232 <_ZN4UART14transmitStringEPKc>
	
	uint8_t recieverAddress[4] = {0,0,0,1};
 160:	1a 82       	std	Y+2, r1	; 0x02
 162:	1b 82       	std	Y+3, r1	; 0x03
 164:	1c 82       	std	Y+4, r1	; 0x04
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	8d 83       	std	Y+5, r24	; 0x05
	
	X10Modtager modtager(recieverAddress);
 16a:	be 01       	movw	r22, r28
 16c:	6e 5f       	subi	r22, 0xFE	; 254
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	ce 01       	movw	r24, r28
 172:	06 96       	adiw	r24, 0x06	; 6
 174:	70 d0       	rcall	.+224    	; 0x256 <_ZN11X10ModtagerC1EPh>
	
	uint8_t recievedBit = 0;
    uint8_t bitChecker = 0; 
	while (1) 
    {		
		if (interruptFlag == 1)
 176:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <__data_end>
 17a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <__data_end+0x1>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	d1 f7       	brne	.-12     	; 0x176 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x62>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x68>
 18c:	00 00       	nop
		{
			_delay_us(500);
			recievedBit = PINB & (1 << PB5) ? 1 : 0;
 18e:	1d 9b       	sbis	0x03, 5	; 3
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x72>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	01 c0       	rjmp	.+2      	; 0x198 <main+0x74>
			/*if (recievedBit == 1) {
				uart.transmitString("1 ");
				} else {
				uart.transmitString("0 ");
			}*/
			modtager.getNextBit(recievedBit);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	ce 01       	movw	r24, r28
 19a:	06 96       	adiw	r24, 0x06	; 6
			
			command = 'a';
			if (modtager.protocolAndAddressCorrect()) {
 19c:	ed d0       	rcall	.+474    	; 0x378 <_ZN11X10Modtager10getNextBitEh>
 19e:	ce 01       	movw	r24, r28
 1a0:	06 96       	adiw	r24, 0x06	; 6
 1a2:	6a d0       	rcall	.+212    	; 0x278 <_ZN11X10Modtager25protocolAndAddressCorrectEv>
 1a4:	88 23       	and	r24, r24
				command = modtager.getCommand();
 1a6:	29 f0       	breq	.+10     	; 0x1b2 <main+0x8e>
 1a8:	ce 01       	movw	r24, r28
 1aa:	06 96       	adiw	r24, 0x06	; 6
 1ac:	36 d1       	rcall	.+620    	; 0x41a <_ZN11X10Modtager10getCommandEv>
 1ae:	18 2f       	mov	r17, r24
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <main+0x90>
				} else {
				uart.transmitString("0 ");
			}*/
			modtager.getNextBit(recievedBit);
			
			command = 'a';
 1b2:	11 e6       	ldi	r17, 0x61	; 97
			if (modtager.protocolAndAddressCorrect()) {
				command = modtager.getCommand();
			}
			
			if (command == 'O')
 1b4:	1f 34       	cpi	r17, 0x4F	; 79
			{
				uart.transmitString("MODTOG KOMMANDO O\r\n");
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <main+0x9e>
 1b8:	6b ef       	ldi	r22, 0xFB	; 251
 1ba:	72 e0       	ldi	r23, 0x02	; 2
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
				// Åben vindue.
			}
			
			if (command == 'C')
 1c0:	38 d0       	rcall	.+112    	; 0x232 <_ZN4UART14transmitStringEPKc>
 1c2:	13 34       	cpi	r17, 0x43	; 67
			{
				uart.transmitString("MODTOG KOMMANDO C\r\n");
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <main+0xac>
 1c6:	6f e0       	ldi	r22, 0x0F	; 15
 1c8:	73 e0       	ldi	r23, 0x03	; 3
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
				// Luk vindue
			}
			
			if (command == 'H')
 1ce:	31 d0       	rcall	.+98     	; 0x232 <_ZN4UART14transmitStringEPKc>
 1d0:	18 34       	cpi	r17, 0x48	; 72
			{
				uart.transmitString("MODTOG KOMMANDO H\r\n");
 1d2:	29 f4       	brne	.+10     	; 0x1de <main+0xba>
 1d4:	63 e2       	ldi	r22, 0x23	; 35
 1d6:	73 e0       	ldi	r23, 0x03	; 3
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	2a d0       	rcall	.+84     	; 0x232 <_ZN4UART14transmitStringEPKc>
				// Halvt åbent vindue
			}
			
			interruptFlag = 0;
 1de:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <__data_end+0x1>
 1e2:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <__data_end>
 1e6:	c7 cf       	rjmp	.-114    	; 0x176 <main+0x52>

000001e8 <__vector_5>:
		}
    }
}


ISR(INT4_vect) {
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
	interruptFlag = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__data_end+0x1>
 1fe:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__data_end>
	EIFR = 0x00;
 202:	1c ba       	out	0x1c, r1	; 28
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <_ZN4UARTC1Ev>:
	// Initialiserer UART med BAUD-rate 9600 (beregnet i cheatsheet)
	// fosc / (16(UBRRn+1)) -solve-> UBRRn = 103,167.
	unsigned int ubrr = 103;
	
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 212:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 216:	87 e6       	ldi	r24, 0x67	; 103
 218:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable transmitter and receiver
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 222:	08 95       	ret

00000224 <_ZN4UART8transmitEh>:
}

void UART::transmit(unsigned char data) 
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 224:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 228:	85 ff       	sbrs	r24, 5
 22a:	fc cf       	rjmp	.-8      	; 0x224 <_ZN4UART8transmitEh>

	// Put data into buffer, sends the data
	UDR0 = data;
 22c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 230:	08 95       	ret

00000232 <_ZN4UART14transmitStringEPKc>:
}

void UART::transmitString(const char *str) 
{
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	8c 01       	movw	r16, r24
 23c:	eb 01       	movw	r28, r22
	// Transmit each character in the string
	while (*str) {
 23e:	68 81       	ld	r22, Y
 240:	66 23       	and	r22, r22
 242:	21 f0       	breq	.+8      	; 0x24c <_ZN4UART14transmitStringEPKc+0x1a>
		this->transmit(*str);
 244:	c8 01       	movw	r24, r16
 246:	ee df       	rcall	.-36     	; 0x224 <_ZN4UART8transmitEh>
		str++;
 248:	21 96       	adiw	r28, 0x01	; 1
}

void UART::transmitString(const char *str) 
{
	// Transmit each character in the string
	while (*str) {
 24a:	f9 cf       	rjmp	.-14     	; 0x23e <_ZN4UART14transmitStringEPKc+0xc>
		this->transmit(*str);
		str++;
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <_ZN11X10ModtagerC1EPh>:


#include "X10Modtager.h"

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
 256:	dc 01       	movw	r26, r24
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	94 30       	cpi	r25, 0x04	; 4
 25c:	60 f4       	brcc	.+24     	; 0x276 <_ZN11X10ModtagerC1EPh+0x20>
	{
		address_[i] = address[i];
 25e:	29 2f       	mov	r18, r25
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	fb 01       	movw	r30, r22
 264:	e2 0f       	add	r30, r18
 266:	f3 1f       	adc	r31, r19
 268:	40 81       	ld	r20, Z
 26a:	fd 01       	movw	r30, r26
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	41 ab       	std	Z+49, r20	; 0x31

// default constructor
X10Modtager::X10Modtager(uint8_t address[4])
{
	// Kopierer adressen til privat variabel.
	for (uint8_t i = 0; i < 4; i++)
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	f2 cf       	rjmp	.-28     	; 0x25a <_ZN11X10ModtagerC1EPh+0x4>
 276:	08 95       	ret

00000278 <_ZN11X10Modtager25protocolAndAddressCorrectEv>:
	
	this->translateFromManchesterCode();
}

bool X10Modtager::protocolAndAddressCorrect()
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	28 97       	sbiw	r28, 0x08	; 8
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	bc 01       	movw	r22, r24
	int initiateProtocol[4] = {1,1,1,0};
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	ea ee       	ldi	r30, 0xEA	; 234
 292:	f2 e0       	ldi	r31, 0x02	; 2
 294:	de 01       	movw	r26, r28
 296:	11 96       	adiw	r26, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x20>
	
	for (uint8_t i = 0; i < 4; i++)
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	94 30       	cpi	r25, 0x04	; 4
 2a4:	18 f5       	brcc	.+70     	; 0x2ec <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x74>
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
 2a6:	29 2f       	mov	r18, r25
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	fb 01       	movw	r30, r22
 2ac:	e2 0f       	add	r30, r18
 2ae:	f3 1f       	adc	r31, r19
 2b0:	40 81       	ld	r20, Z
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	a1 e0       	ldi	r26, 0x01	; 1
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	ac 0f       	add	r26, r28
 2c0:	bd 1f       	adc	r27, r29
 2c2:	ea 0f       	add	r30, r26
 2c4:	fb 1f       	adc	r31, r27
 2c6:	01 90       	ld	r0, Z+
 2c8:	f0 81       	ld	r31, Z
 2ca:	e0 2d       	mov	r30, r0
 2cc:	4e 17       	cp	r20, r30
 2ce:	5f 07       	cpc	r21, r31
 2d0:	79 f4       	brne	.+30     	; 0x2f0 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x78>
		{
			return false;
		}
		
		if (!(dataArray_[i+4] == address_[i]))
 2d2:	f9 01       	movw	r30, r18
 2d4:	34 96       	adiw	r30, 0x04	; 4
 2d6:	e6 0f       	add	r30, r22
 2d8:	f7 1f       	adc	r31, r23
 2da:	40 81       	ld	r20, Z
 2dc:	fb 01       	movw	r30, r22
 2de:	e2 0f       	add	r30, r18
 2e0:	f3 1f       	adc	r31, r19
 2e2:	81 a9       	ldd	r24, Z+49	; 0x31
 2e4:	48 13       	cpse	r20, r24
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7c>

bool X10Modtager::protocolAndAddressCorrect()
{
	int initiateProtocol[4] = {1,1,1,0};
	
	for (uint8_t i = 0; i < 4; i++)
 2e8:	9f 5f       	subi	r25, 0xFF	; 255
 2ea:	db cf       	rjmp	.-74     	; 0x2a2 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x2a>
		{
			return false;
		}
	}
	
	return true;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
	
	for (uint8_t i = 0; i < 4; i++)
	{
		if (!(dataArray_[i] == initiateProtocol[i]))
		{
			return false;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <_ZN11X10Modtager25protocolAndAddressCorrectEv+0x7e>
		}
		
		if (!(dataArray_[i+4] == address_[i]))
		{
			return false;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
 2f6:	28 96       	adiw	r28, 0x08	; 8
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <_ZN11X10Modtager27translateFromManchesterCodeEv>:
	
	return 'a';
}

void X10Modtager::translateFromManchesterCode()
{
 308:	dc 01       	movw	r26, r24
	manchesterError_ = false;
 30a:	d0 96       	adiw	r26, 0x30	; 48
 30c:	1c 92       	st	X, r1
 30e:	d0 97       	sbiw	r26, 0x30	; 48

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 310:	90 e0       	ldi	r25, 0x00	; 0
void X10Modtager::translateFromManchesterCode()
{
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;
 312:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 314:	9f 31       	cpi	r25, 0x1F	; 31
 316:	78 f5       	brcc	.+94     	; 0x376 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x6e>
	{
		if (manchesterArray_[i] == 0 && manchesterArray_[i + 1] == 1)
 318:	29 2f       	mov	r18, r25
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	fd 01       	movw	r30, r26
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	40 89       	ldd	r20, Z+16	; 0x10
 324:	41 11       	cpse	r20, r1
 326:	0d c0       	rjmp	.+26     	; 0x342 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
 328:	f9 01       	movw	r30, r18
 32a:	31 96       	adiw	r30, 0x01	; 1
 32c:	ea 0f       	add	r30, r26
 32e:	fb 1f       	adc	r31, r27
 330:	40 89       	ldd	r20, Z+16	; 0x10
 332:	41 30       	cpi	r20, 0x01	; 1
 334:	31 f4       	brne	.+12     	; 0x342 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x3a>
		{
			dataArray_[dataArrayI] = 1;
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	fd 01       	movw	r30, r26
 33a:	e8 0f       	add	r30, r24
 33c:	f1 1d       	adc	r31, r1
 33e:	20 83       	st	Z, r18
 340:	17 c0       	rjmp	.+46     	; 0x370 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else if (manchesterArray_[i] == 1 && manchesterArray_[i + 1] == 0)
 342:	fd 01       	movw	r30, r26
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	40 89       	ldd	r20, Z+16	; 0x10
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	69 f4       	brne	.+26     	; 0x368 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	fd 01       	movw	r30, r26
 354:	e2 0f       	add	r30, r18
 356:	f3 1f       	adc	r31, r19
 358:	20 89       	ldd	r18, Z+16	; 0x10
 35a:	21 11       	cpse	r18, r1
 35c:	05 c0       	rjmp	.+10     	; 0x368 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x60>
		{
			dataArray_[dataArrayI] = 0;
 35e:	fd 01       	movw	r30, r26
 360:	e8 0f       	add	r30, r24
 362:	f1 1d       	adc	r31, r1
 364:	10 82       	st	Z, r1
 366:	04 c0       	rjmp	.+8      	; 0x370 <_ZN11X10Modtager27translateFromManchesterCodeEv+0x68>
		}
		else
		{
			manchesterError_ = true;
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	d0 96       	adiw	r26, 0x30	; 48
 36c:	2c 93       	st	X, r18
 36e:	d0 97       	sbiw	r26, 0x30	; 48
		}
		
		dataArrayI++;
 370:	8f 5f       	subi	r24, 0xFF	; 255
	manchesterError_ = false;

	const uint8_t manchesterArraySize = 32; // Assuming size is 32
	uint8_t dataArrayI = 0;

	for (uint8_t i = 0; i < manchesterArraySize - 1; i += 2)
 372:	9e 5f       	subi	r25, 0xFE	; 254
 374:	cf cf       	rjmp	.-98     	; 0x314 <_ZN11X10Modtager27translateFromManchesterCodeEv+0xc>
 376:	08 95       	ret

00000378 <_ZN11X10Modtager10getNextBitEh>:
	}
	
} //X10Modtager

void X10Modtager::getNextBit(uint8_t nextBit)
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	a0 97       	sbiw	r28, 0x20	; 32
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	ac 01       	movw	r20, r24
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	9f 31       	cpi	r25, 0x1F	; 31
 392:	80 f4       	brcc	.+32     	; 0x3b4 <_ZN11X10Modtager10getNextBitEh+0x3c>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
 394:	29 2f       	mov	r18, r25
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	31 96       	adiw	r30, 0x01	; 1
 39c:	e4 0f       	add	r30, r20
 39e:	f5 1f       	adc	r31, r21
 3a0:	80 89       	ldd	r24, Z+16	; 0x10
 3a2:	e1 e0       	ldi	r30, 0x01	; 1
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	e2 0f       	add	r30, r18
 3ac:	f3 1f       	adc	r31, r19
 3ae:	80 83       	st	Z, r24

void X10Modtager::getNextBit(uint8_t nextBit)
{
	uint8_t nextManchesterArray[32];
	
	for (uint8_t i = 0; i < 31; i++)
 3b0:	9f 5f       	subi	r25, 0xFF	; 255
 3b2:	ee cf       	rjmp	.-36     	; 0x390 <_ZN11X10Modtager10getNextBitEh+0x18>
	{
		nextManchesterArray[i] = manchesterArray_[i + 1];
	}
	
	nextManchesterArray[31] = nextBit;
 3b4:	68 a3       	std	Y+32, r22	; 0x20
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 32       	cpi	r25, 0x20	; 32
 3ba:	78 f4       	brcc	.+30     	; 0x3da <_ZN11X10Modtager10getNextBitEh+0x62>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
 3bc:	29 2f       	mov	r18, r25
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	e1 e0       	ldi	r30, 0x01	; 1
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	ec 0f       	add	r30, r28
 3c6:	fd 1f       	adc	r31, r29
 3c8:	e2 0f       	add	r30, r18
 3ca:	f3 1f       	adc	r31, r19
 3cc:	80 81       	ld	r24, Z
 3ce:	fa 01       	movw	r30, r20
 3d0:	e2 0f       	add	r30, r18
 3d2:	f3 1f       	adc	r31, r19
 3d4:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	nextManchesterArray[31] = nextBit;
	
	// Der må være en smartere måde at gøre nedenstående på.
	for (uint8_t i = 0; i < 32; i++)
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	ef cf       	rjmp	.-34     	; 0x3b8 <_ZN11X10Modtager10getNextBitEh+0x40>
	{
		manchesterArray_[i] = nextManchesterArray[i]; 
	}
	
	this->translateFromManchesterCode();
 3da:	ca 01       	movw	r24, r20
 3dc:	95 df       	rcall	.-214    	; 0x308 <_ZN11X10Modtager27translateFromManchesterCodeEv>
}
 3de:	a0 96       	adiw	r28, 0x20	; 32
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <_ZN11X10Modtager11arraysEqualEPhS0_>:
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	88 30       	cpi	r24, 0x08	; 8
 3f6:	91 05       	cpc	r25, r1
 3f8:	64 f4       	brge	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	    if (arr1[i] != arr2[i]) {
 3fa:	fb 01       	movw	r30, r22
 3fc:	e8 0f       	add	r30, r24
 3fe:	f9 1f       	adc	r31, r25
 400:	30 81       	ld	r19, Z
 402:	fa 01       	movw	r30, r20
 404:	e8 0f       	add	r30, r24
 406:	f9 1f       	adc	r31, r25
 408:	20 81       	ld	r18, Z
 40a:	32 13       	cpse	r19, r18
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
}

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	f1 cf       	rjmp	.-30     	; 0x3f4 <_ZN11X10Modtager11arraysEqualEPhS0_+0x4>
	    if (arr1[i] != arr2[i]) {
		    return false;
	    }
    }
    return true;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret

bool X10Modtager::arraysEqual(uint8_t arr1[8], uint8_t arr2[8])
{
    for (int i = 0; i < 8; i++) {
	    if (arr1[i] != arr2[i]) {
		    return false;
 416:	80 e0       	ldi	r24, 0x00	; 0
	    }
    }
    return true;
}
 418:	08 95       	ret

0000041a <_ZN11X10Modtager10getCommandEv>:
	
	return true;
}

char X10Modtager::getCommand()
{
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	28 97       	sbiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	7c 01       	movw	r14, r24
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 43a:	28 e0       	ldi	r18, 0x08	; 8
 43c:	20 31       	cpi	r18, 0x10	; 16
 43e:	88 f4       	brcc	.+34     	; 0x462 <_ZN11X10Modtager10getCommandEv+0x48>
	{
		command[j - DATA_START] = dataArray_[j];
 440:	82 2f       	mov	r24, r18
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	38 97       	sbiw	r30, 0x08	; 8
 448:	d7 01       	movw	r26, r14
 44a:	a8 0f       	add	r26, r24
 44c:	b9 1f       	adc	r27, r25
 44e:	8c 91       	ld	r24, X
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	4c 0f       	add	r20, r28
 456:	5d 1f       	adc	r21, r29
 458:	e4 0f       	add	r30, r20
 45a:	f5 1f       	adc	r31, r21
 45c:	80 83       	st	Z, r24
{
	uint8_t command[8];
	const uint8_t DATA_START = 8;
	const uint8_t DATA_END = 16;
		
	for (uint8_t j = DATA_START; j < DATA_END; j++)
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	ed cf       	rjmp	.-38     	; 0x43c <_ZN11X10Modtager10getCommandEv+0x22>
 462:	10 e0       	ldi	r17, 0x00	; 0
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 464:	1b 31       	cpi	r17, 0x1B	; 27
 466:	18 f5       	brcc	.+70     	; 0x4ae <_ZN11X10Modtager10getCommandEv+0x94>
	{
		if (this->arraysEqual(asciiLookup_[i].binary, command))
 468:	c1 2e       	mov	r12, r17
 46a:	d1 2c       	mov	r13, r1
 46c:	b6 01       	movw	r22, r12
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	6c 0d       	add	r22, r12
 47c:	7d 1d       	adc	r23, r13
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7d 4f       	sbci	r23, 0xFD	; 253
 482:	ae 01       	movw	r20, r28
 484:	4f 5f       	subi	r20, 0xFF	; 255
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	c7 01       	movw	r24, r14
 48a:	b2 df       	rcall	.-156    	; 0x3f0 <_ZN11X10Modtager11arraysEqualEPhS0_>
 48c:	88 23       	and	r24, r24
 48e:	69 f0       	breq	.+26     	; 0x4aa <_ZN11X10Modtager10getCommandEv+0x90>
		{
			return asciiLookup_[i].character;
 490:	f6 01       	movw	r30, r12
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	ec 0d       	add	r30, r12
 4a0:	fd 1d       	adc	r31, r13
 4a2:	e0 50       	subi	r30, 0x00	; 0
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	80 81       	ld	r24, Z
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <_ZN11X10Modtager10getCommandEv+0x96>
	for (uint8_t j = DATA_START; j < DATA_END; j++)
	{
		command[j - DATA_START] = dataArray_[j];
	}
	
	for (uint8_t i = 0; i < 27; i++) // Der er 26 bogstaver i alfabetet.
 4aa:	1f 5f       	subi	r17, 0xFF	; 255
 4ac:	db cf       	rjmp	.-74     	; 0x464 <_ZN11X10Modtager10getCommandEv+0x4a>
		{
			return asciiLookup_[i].character;
		}
	}
	
	return 'a';
 4ae:	81 e6       	ldi	r24, 0x61	; 97
}
 4b0:	28 96       	adiw	r28, 0x08	; 8
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
